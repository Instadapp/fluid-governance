{"metadata":"{\"defaultCompiler\":{\"version\":\"0.7.3\"},\"sources\":{\"contracts/payloads/IGP26/PayloadIGP26.sol\":{\"content\":\"pragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {BigMathMinified} from \\\"./libraries/bigMathMinified.sol\\\";\\nimport {LiquiditySlotsLink} from \\\"./libraries/liquiditySlotsLink.sol\\\";\\nimport {LiquidityCalcs} from \\\"./libraries/liquidityCalcs.sol\\\";\\n\\ninterface IGovernorBravo {\\n    function _acceptAdmin() external;\\n\\n    function _setVotingDelay(uint newVotingDelay) external;\\n\\n    function _setVotingPeriod(uint newVotingPeriod) external;\\n\\n    function _acceptAdminOnTimelock() external;\\n\\n    function _setImplementation(address implementation_) external;\\n\\n    function propose(\\n        address[] memory targets,\\n        uint[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) external returns (uint);\\n\\n    function admin() external view returns (address);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function timelock() external view returns (address);\\n\\n    function votingDelay() external view returns (uint256);\\n\\n    function votingPeriod() external view returns (uint256);\\n}\\n\\ninterface ITimelock {\\n    function acceptAdmin() external;\\n\\n    function setDelay(uint delay_) external;\\n\\n    function setPendingAdmin(address pendingAdmin_) external;\\n\\n    function queueTransaction(\\n        address target,\\n        uint value,\\n        string memory signature,\\n        bytes memory data,\\n        uint eta\\n    ) external returns (bytes32);\\n\\n    function executeTransaction(\\n        address target,\\n        uint value,\\n        string memory signature,\\n        bytes memory data,\\n        uint eta\\n    ) external payable returns (bytes memory);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function delay() external view returns (uint256);\\n}\\n\\ninterface AdminModuleStructs {\\n    struct AddressBool {\\n        address addr;\\n        bool value;\\n    }\\n\\n    struct AddressUint256 {\\n        address addr;\\n        uint256 value;\\n    }\\n\\n    struct RateDataV1Params {\\n        address token;\\n        uint256 kink;\\n        uint256 rateAtUtilizationZero;\\n        uint256 rateAtUtilizationKink;\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    struct RateDataV2Params {\\n        address token;\\n        uint256 kink1;\\n        uint256 kink2;\\n        uint256 rateAtUtilizationZero;\\n        uint256 rateAtUtilizationKink1;\\n        uint256 rateAtUtilizationKink2;\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    struct TokenConfig {\\n        address token;\\n        uint256 fee;\\n        uint256 threshold;\\n        uint256 maxUtilization;\\n    }\\n\\n    struct UserSupplyConfig {\\n        address user;\\n        address token;\\n        uint8 mode;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseWithdrawalLimit;\\n    }\\n\\n    struct UserBorrowConfig {\\n        address user;\\n        address token;\\n        uint8 mode;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseDebtCeiling;\\n        uint256 maxDebtCeiling;\\n    }\\n}\\n\\ninterface IProxy {\\n    function setAdmin(address newAdmin_) external;\\n\\n    function setDummyImplementation(address newDummyImplementation_) external;\\n\\n    function addImplementation(\\n        address implementation_,\\n        bytes4[] calldata sigs_\\n    ) external;\\n\\n    function removeImplementation(address implementation_) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function getDummyImplementation() external view returns (address);\\n\\n    function getImplementationSigs(\\n        address impl_\\n    ) external view returns (bytes4[] memory);\\n\\n    function getSigsImplementation(bytes4 sig_) external view returns (address);\\n\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n}\\n\\ninterface IFluidLiquidityAdmin {\\n    /// @notice adds/removes auths. Auths generally could be contracts which can have restricted actions defined on contract.\\n    ///         auths can be helpful in reducing governance overhead where it's not needed.\\n    /// @param authsStatus_ array of structs setting allowed status for an address.\\n    ///                     status true => add auth, false => remove auth\\n    function updateAuths(\\n        AdminModuleStructs.AddressBool[] calldata authsStatus_\\n    ) external;\\n\\n    /// @notice adds/removes guardians. Only callable by Governance.\\n    /// @param guardiansStatus_ array of structs setting allowed status for an address.\\n    ///                         status true => add guardian, false => remove guardian\\n    function updateGuardians(\\n        AdminModuleStructs.AddressBool[] calldata guardiansStatus_\\n    ) external;\\n\\n    /// @notice changes the revenue collector address (contract that is sent revenue). Only callable by Governance.\\n    /// @param revenueCollector_  new revenue collector address\\n    function updateRevenueCollector(address revenueCollector_) external;\\n\\n    /// @notice changes current status, e.g. for pausing or unpausing all user operations. Only callable by Auths.\\n    /// @param newStatus_ new status\\n    ///        status = 2 -> pause, status = 1 -> resume.\\n    function changeStatus(uint256 newStatus_) external;\\n\\n    /// @notice                  update tokens rate data version 1. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV1Params with rate data to set for each token\\n    function updateRateDataV1s(\\n        AdminModuleStructs.RateDataV1Params[] calldata tokensRateData_\\n    ) external;\\n\\n    /// @notice                  update tokens rate data version 2. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV2Params with rate data to set for each token\\n    function updateRateDataV2s(\\n        AdminModuleStructs.RateDataV2Params[] calldata tokensRateData_\\n    ) external;\\n\\n    /// @notice updates token configs: fee charge on borrowers interest & storage update utilization threshold.\\n    ///         Only callable by Auths.\\n    /// @param tokenConfigs_ contains token address, fee & utilization threshold\\n    function updateTokenConfigs(\\n        AdminModuleStructs.TokenConfig[] calldata tokenConfigs_\\n    ) external;\\n\\n    /// @notice updates user classes: 0 is for new protocols, 1 is for established protocols.\\n    ///         Only callable by Auths.\\n    /// @param userClasses_ struct array of uint256 value to assign for each user address\\n    function updateUserClasses(\\n        AdminModuleStructs.AddressUint256[] calldata userClasses_\\n    ) external;\\n\\n    /// @notice sets user supply configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userSupplyConfigs_ struct array containing user supply config, see `UserSupplyConfig` struct for more info\\n    function updateUserSupplyConfigs(\\n        AdminModuleStructs.UserSupplyConfig[] memory userSupplyConfigs_\\n    ) external;\\n\\n    /// @notice setting user borrow configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userBorrowConfigs_ struct array containing user borrow config, see `UserBorrowConfig` struct for more info\\n    function updateUserBorrowConfigs(\\n        AdminModuleStructs.UserBorrowConfig[] memory userBorrowConfigs_\\n    ) external;\\n\\n    /// @notice pause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to pause operations for\\n    /// @param supplyTokens_  token addresses to pause withdrawals for\\n    /// @param borrowTokens_  token addresses to pause borrowings for\\n    function pauseUser(\\n        address user_,\\n        address[] calldata supplyTokens_,\\n        address[] calldata borrowTokens_\\n    ) external;\\n\\n    /// @notice unpause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to unpause operations for\\n    /// @param supplyTokens_  token addresses to unpause withdrawals for\\n    /// @param borrowTokens_  token addresses to unpause borrowings for\\n    function unpauseUser(\\n        address user_,\\n        address[] calldata supplyTokens_,\\n        address[] calldata borrowTokens_\\n    ) external;\\n\\n    /// @notice         collects revenue for tokens to configured revenueCollector address.\\n    /// @param tokens_  array of tokens to collect revenue for\\n    /// @dev            Note that this can revert if token balance is < revenueAmount (utilization > 100%)\\n    function collectRevenue(address[] calldata tokens_) external;\\n\\n    /// @notice gets the current updated exchange prices for n tokens and updates all prices, rates related data in storage.\\n    /// @param tokens_ tokens to update exchange prices for\\n    /// @return supplyExchangePrices_ new supply rates of overall system for each token\\n    /// @return borrowExchangePrices_ new borrow rates of overall system for each token\\n    function updateExchangePrices(\\n        address[] calldata tokens_\\n    )\\n        external\\n        returns (\\n            uint256[] memory supplyExchangePrices_,\\n            uint256[] memory borrowExchangePrices_\\n        );\\n\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n}\\n\\ninterface IFluidVaultT1Factory {\\n    /// @notice                         Deploys a new vault using the specified deployment logic `vaultDeploymentLogic_` and data `vaultDeploymentData_`.\\n    ///                                 Only accounts with deployer access or the owner can deploy a new vault.\\n    /// @param vaultDeploymentLogic_    The address of the vault deployment logic contract.\\n    /// @param vaultDeploymentData_     The data to be used for vault deployment.\\n    /// @return vault_                  Returns the address of the newly deployed vault.\\n    function deployVault(\\n        address vaultDeploymentLogic_,\\n        bytes calldata vaultDeploymentData_\\n    ) external returns (address vault_);\\n\\n    /// @notice                         Sets an address as allowed vault deployment logic (`deploymentLogic_`) contract or not.\\n    ///                                 This function can only be called by the owner.\\n    /// @param deploymentLogic_         The address of the vault deployment logic contract to be set.\\n    /// @param allowed_                 A boolean indicating whether the specified address is allowed to deploy new type of vault.\\n    function setVaultDeploymentLogic(\\n        address deploymentLogic_,\\n        bool allowed_\\n    ) external;\\n\\n    /// @notice                         Computes the address of a vault based on its given ID (`vaultId_`).\\n    /// @param vaultId_                 The ID of the vault.\\n    /// @return vault_                  Returns the computed address of the vault.\\n    function getVaultAddress(\\n        uint256 vaultId_\\n    ) external view returns (address vault_);\\n\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n}\\n\\ninterface IFluidVaultT1 {\\n    /// @notice updates the Vault oracle to `newOracle_`. Must implement the FluidOracle interface.\\n    function updateOracle(address newOracle_) external;\\n\\n    /// @notice updates the all Vault core settings according to input params.\\n    /// All input values are expected in 1e2 (1% = 100, 100% = 10_000).\\n    function updateCoreSettings(\\n        uint256 supplyRateMagnifier_,\\n        uint256 borrowRateMagnifier_,\\n        uint256 collateralFactor_,\\n        uint256 liquidationThreshold_,\\n        uint256 liquidationMaxLimit_,\\n        uint256 withdrawGap_,\\n        uint256 liquidationPenalty_,\\n        uint256 borrowFee_\\n    ) external;\\n\\n    /// @notice updates the allowed rebalancer to `newRebalancer_`.\\n    function updateRebalancer(address newRebalancer_) external;\\n\\n    /// @notice updates the supply rate magnifier to `supplyRateMagnifier_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateSupplyRateMagnifier(uint supplyRateMagnifier_) external;\\n\\n    /// @notice updates the collateral factor to `collateralFactor_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateCollateralFactor(uint collateralFactor_) external;\\n\\n    struct ConstantViews {\\n        address liquidity;\\n        address factory;\\n        address adminImplementation;\\n        address secondaryImplementation;\\n        address supplyToken;\\n        address borrowToken;\\n        uint8 supplyDecimals;\\n        uint8 borrowDecimals;\\n        uint vaultId;\\n        bytes32 liquiditySupplyExchangePriceSlot;\\n        bytes32 liquidityBorrowExchangePriceSlot;\\n        bytes32 liquidityUserSupplySlot;\\n        bytes32 liquidityUserBorrowSlot;\\n    }\\n\\n    /// @notice returns all Vault constants\\n    function constantsView()\\n        external\\n        view\\n        returns (ConstantViews memory constantsView_);\\n\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n\\n    struct Configs {\\n        uint16 supplyRateMagnifier;\\n        uint16 borrowRateMagnifier;\\n        uint16 collateralFactor;\\n        uint16 liquidationThreshold;\\n        uint16 liquidationMaxLimit;\\n        uint16 withdrawalGap;\\n        uint16 liquidationPenalty;\\n        uint16 borrowFee;\\n        address oracle;\\n        uint oraclePriceOperate;\\n        uint oraclePriceLiquidate;\\n        address rebalancer;\\n    }\\n}\\n\\ninterface IFluidOracle {\\n    /// @dev Deprecated. Use `getExchangeRateOperate()` and `getExchangeRateLiquidate()` instead. Only implemented for\\n    ///      backwards compatibility.\\n    function getExchangeRate() external view returns (uint256 exchangeRate_);\\n\\n    /// @notice Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for operates\\n    function getExchangeRateOperate()\\n        external\\n        view\\n        returns (uint256 exchangeRate_);\\n\\n    /// @notice Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for liquidations\\n    function getExchangeRateLiquidate()\\n        external\\n        view\\n        returns (uint256 exchangeRate_);\\n}\\n\\ninterface IFluidReserveContract {\\n    function isRebalancer(address user) external returns (bool);\\n\\n    function rebalanceFToken(address protocol_) external;\\n\\n    function rebalanceVault(address protocol_) external;\\n\\n    function transferFunds(address token_) external;\\n\\n    function getProtocolTokens(address protocol_) external;\\n\\n    function updateAuth(address auth_, bool isAuth_) external;\\n\\n    function updateRebalancer(address rebalancer_, bool isRebalancer_) external;\\n\\n    function approve(\\n        address[] memory protocols_,\\n        address[] memory tokens_,\\n        uint256[] memory amounts_\\n    ) external;\\n\\n    function revoke(\\n        address[] memory protocols_,\\n        address[] memory tokens_\\n    ) external;\\n}\\n\\ncontract PayloadIGP26 {\\n    uint256 public constant PROPOSAL_ID = 26;\\n\\n    address public constant PROPOSER =\\n        0xA45f7bD6A5Ff45D31aaCE6bCD3d426D9328cea01;\\n\\n    address public constant PROPOSER_AVO_MULTISIG =\\n        0x059A94A72951c0ae1cc1CE3BF0dB52421bbE8210;\\n\\n    address public constant PROPOSER_AVO_MULTISIG_2 =\\n        0x9efdE135CA4832AbF0408c44c6f5f370eB0f35e8;\\n\\n    IGovernorBravo public constant GOVERNOR =\\n        IGovernorBravo(0x0204Cd037B2ec03605CFdFe482D8e257C765fA1B);\\n    ITimelock public immutable TIMELOCK =\\n        ITimelock(0x2386DC45AdDed673317eF068992F19421B481F4c);\\n\\n    address public immutable ADDRESS_THIS;\\n\\n    address public constant TEAM_MULTISIG =\\n        0x4F6F977aCDD1177DCD81aB83074855EcB9C2D49e;\\n\\n    IFluidLiquidityAdmin public constant LIQUIDITY =\\n        IFluidLiquidityAdmin(0x52Aa899454998Be5b000Ad077a46Bbe360F4e497);\\n    IFluidVaultT1Factory public constant VAULT_T1_FACTORY =\\n        IFluidVaultT1Factory(0x324c5Dc1fC42c7a4D43d92df1eBA58a54d13Bf2d);\\n    IFluidReserveContract public constant FLUID_RESERVE =\\n        IFluidReserveContract(0x264786EF916af64a1DB19F513F24a3681734ce92);\\n\\n    uint256 internal constant X8 = 0xff;\\n    uint256 internal constant X10 = 0x3ff;\\n    uint256 internal constant X14 = 0x3fff;\\n    uint256 internal constant X15 = 0x7fff;\\n    uint256 internal constant X16 = 0xffff;\\n    uint256 internal constant X18 = 0x3ffff;\\n    uint256 internal constant X24 = 0xffffff;\\n    uint256 internal constant X64 = 0xffffffffffffffff;\\n\\n    uint256 internal constant DEFAULT_EXPONENT_SIZE = 8;\\n    uint256 internal constant DEFAULT_EXPONENT_MASK = 0xff;\\n\\n    address public constant ETH_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public constant wstETH_ADDRESS =\\n        0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\n    address public constant weETH_ADDRESS =\\n        0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee;\\n\\n    address public constant sUSDe_ADDRESS =\\n        0x9D39A5DE30e57443BfF2A8307A4256c8797A3497;\\n    address public constant USDC_ADDRESS =\\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address public constant USDT_ADDRESS =\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    constructor() {\\n        ADDRESS_THIS = address(this);\\n    }\\n\\n    function propose(string memory description) external {\\n        require(\\n            msg.sender == PROPOSER ||\\n                msg.sender == TEAM_MULTISIG ||\\n                address(this) == PROPOSER_AVO_MULTISIG ||\\n                address(this) == PROPOSER_AVO_MULTISIG_2,\\n            \\\"msg.sender-not-allowed\\\"\\n        );\\n\\n        uint256 totalActions = 1;\\n        address[] memory targets = new address[](totalActions);\\n        uint256[] memory values = new uint256[](totalActions);\\n        string[] memory signatures = new string[](totalActions);\\n        bytes[] memory calldatas = new bytes[](totalActions);\\n\\n        // Action 1: call executePayload on timelock contract to execute payload related to Fluid\\n        targets[0] = address(TIMELOCK);\\n        values[0] = 0;\\n        signatures[0] = \\\"executePayload(address,string,bytes)\\\";\\n        calldatas[0] = abi.encode(ADDRESS_THIS, \\\"execute()\\\", abi.encode());\\n\\n        uint256 proposedId = GOVERNOR.propose(\\n            targets,\\n            values,\\n            signatures,\\n            calldatas,\\n            description\\n        );\\n\\n        require(proposedId == PROPOSAL_ID, \\\"PROPOSAL_IS_NOT_SAME\\\");\\n    }\\n\\n    function execute() external {\\n        require(address(this) == address(TIMELOCK), \\\"not-valid-caller\\\");\\n\\n        // Action 1: Clone from old vault config to new vault\\n        action1();\\n\\n        // Action 2: Collect revenue from Liquditiy Layer\\n        action2();\\n    }\\n\\n    /***********************************|\\n    |     Proposal Payload Actions      |\\n    |__________________________________*/\\n\\n    /// @notice Action 1: Clone from old vault config to new vault\\n    function action1() internal {\\n        for (uint oldVaultId = 1; oldVaultId <= 10; oldVaultId++) {\\n            cloneVault(oldVaultId);\\n        }\\n    }\\n\\n    /// @notice Action 2: Collect revenue from Liquditiy Layer\\n    function action2() internal {\\n        address[] memory tokens = new address[](4);\\n\\n        tokens[0] = ETH_ADDRESS;\\n        tokens[1] = wstETH_ADDRESS;\\n        tokens[2] = USDC_ADDRESS;\\n        tokens[3] = USDT_ADDRESS;\\n\\n        LIQUIDITY.collectRevenue(tokens);\\n    }\\n\\n    /***********************************|\\n    |     Proposal Payload Helpers      |\\n    |__________________________________*/\\n\\n    function getUserSupplyDataAndSetLimits(\\n        address token_,\\n        address oldVault_,\\n        address newVault_,\\n        uint256 withdrawalLimit\\n    )\\n        internal\\n        view\\n        returns (AdminModuleStructs.UserSupplyConfig memory config_)\\n    {\\n        uint256 userSupplyData_ = LIQUIDITY.readFromStorage(\\n            LiquiditySlotsLink.calculateDoubleMappingStorageSlot(\\n                LiquiditySlotsLink.LIQUIDITY_USER_SUPPLY_DOUBLE_MAPPING_SLOT,\\n                oldVault_,\\n                token_\\n            )\\n        );\\n\\n        (uint256 supplyExchangePrice, ) = LiquidityCalcs.calcExchangePrices(\\n            LIQUIDITY.readFromStorage(\\n                LiquiditySlotsLink.calculateMappingStorageSlot(\\n                    LiquiditySlotsLink.LIQUIDITY_EXCHANGE_PRICES_MAPPING_SLOT,\\n                    token_\\n                )\\n            )\\n        );\\n\\n        config_ = AdminModuleStructs.UserSupplyConfig({\\n            user: newVault_,\\n            token: token_,\\n            mode: uint8(userSupplyData_ & 1),\\n            expandPercent: (userSupplyData_ >>\\n                LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_PERCENT) & X14,\\n            expandDuration: (userSupplyData_ >>\\n                LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_DURATION) & X24,\\n            baseWithdrawalLimit: (withdrawalLimit * 1e12) / supplyExchangePrice\\n        });\\n    }\\n\\n    function getUserBorrowDataAndSetLimits(\\n        address token_,\\n        address oldVault_,\\n        address newVault_,\\n        uint256 baseLimit,\\n        uint256 maxLimit\\n    )\\n        internal\\n        view\\n        returns (AdminModuleStructs.UserBorrowConfig memory config_)\\n    {\\n        uint256 userBorrowData_ = LIQUIDITY.readFromStorage(\\n            LiquiditySlotsLink.calculateDoubleMappingStorageSlot(\\n                LiquiditySlotsLink.LIQUIDITY_USER_BORROW_DOUBLE_MAPPING_SLOT,\\n                oldVault_,\\n                token_\\n            )\\n        );\\n\\n        (, uint256 borrowExchangePrice) = LiquidityCalcs.calcExchangePrices(\\n            LIQUIDITY.readFromStorage(\\n                LiquiditySlotsLink.calculateMappingStorageSlot(\\n                    LiquiditySlotsLink.LIQUIDITY_EXCHANGE_PRICES_MAPPING_SLOT,\\n                    token_\\n                )\\n            )\\n        );\\n\\n        config_ = AdminModuleStructs.UserBorrowConfig({\\n            user: newVault_,\\n            token: token_,\\n            mode: uint8(userBorrowData_ & 1),\\n            expandPercent: (userBorrowData_ >>\\n                LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_PERCENT) & X14,\\n            expandDuration: (userBorrowData_ >>\\n                LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_DURATION) & X24,\\n            baseDebtCeiling: (baseLimit * 1e12) / borrowExchangePrice,\\n            maxDebtCeiling: (maxLimit * 1e12) / borrowExchangePrice\\n        });\\n    }\\n\\n    function getAllowance(\\n        address token\\n    ) internal pure returns (uint256, uint256, uint256) {\\n        if (token == ETH_ADDRESS) {\\n            return (3 * 1e18, 4 * 1e18, 0);\\n        } else if (token == wstETH_ADDRESS) {\\n            return (2.33 * 1e18, 3.5 * 1e18, 0.03 * 1e18);\\n        } else if (token == weETH_ADDRESS) {\\n            return (2.6 * 1e18, 3.95 * 1e18, 0.03 * 1e18);\\n        } else if (token == USDC_ADDRESS || token == USDT_ADDRESS) {\\n            return (10_000 * 1e6, 15_000 * 1e6, 100 * 1e6);\\n        } else if (token == sUSDe_ADDRESS) {\\n            return (9_200 * 1e18, 13_900 * 1e18, 100 * 1e18);\\n        } else {\\n            revert(\\\"no allowance found\\\");\\n        }\\n    }\\n\\n    function getOracleAddress(uint256 vaultId) internal pure returns (address) {\\n        if (vaultId == 11) {\\n            return 0x5b2860C6D6F888319C752aaCDaf8165C21095E3a; // VAULT_ETH_USDC\\n        } else if (vaultId == 12) {\\n            return 0x7eA20E1FB456AF31C6425813bFfD4Ef6E0A4C86E; // VAULT_ETH_USDT\\n        } else if (vaultId == 13) {\\n            return 0xadE0948e2431DEFB87e75760e94f190cbF35E95b; // VAULT_WSTETH_ETH\\n        } else if (vaultId == 14) {\\n            return 0xc5911Fa3917c507fBEbAb910C8b47cBdD3Ce147e; // VAULT_WSTETH_USDC\\n        } else if (vaultId == 15) {\\n            return 0x38aE6fa3d6376D86D1EE591364CD4b45C99adE22; // VAULT_WSTETH_USDT\\n        } else if (vaultId == 16) {\\n            return 0xEA0C58bE3133Cb7f035faCF45cb1d4F84CF178B4; // VAULT_WEETH_WSTETH\\n        } else if (vaultId == 17) {\\n            return 0x72DB9B7Bd2b0BC282708E85E16123023b32de6A9; // VAULT_SUSDE_USDC\\n        } else if (vaultId == 18) {\\n            return 0x72DB9B7Bd2b0BC282708E85E16123023b32de6A9; // VAULT_SUSDE_USDT\\n        } else if (vaultId == 19) {\\n            return 0xda8a70b9533DEBE425F8A3b2B33bc09c0415e5FE; // VAULT_WEETH_USDC\\n        } else if (vaultId == 20) {\\n            return 0x32eE0cB3587C6e9f8Ad2a0CF83B6Cf326848b7c6; // VAULT_WEETH_USDT\\n        } else {\\n            revert(\\\"no oracle address\\\");\\n        }\\n    }\\n\\n    function getVaultConfig(\\n        address vault\\n    ) internal view returns (IFluidVaultT1.Configs memory configs) {\\n        uint vaultVariables2 = IFluidVaultT1(vault).readFromStorage(\\n            bytes32(uint256(1))\\n        );\\n        configs.supplyRateMagnifier = uint16(vaultVariables2 & X16);\\n        configs.borrowRateMagnifier = uint16((vaultVariables2 >> 16) & X16);\\n        configs.collateralFactor = (uint16((vaultVariables2 >> 32) & X10)) * 10;\\n        configs.liquidationThreshold =\\n            (uint16((vaultVariables2 >> 42) & X10)) *\\n            10;\\n        configs.liquidationMaxLimit = (uint16((vaultVariables2 >> 52) & X10) *\\n            10);\\n        configs.withdrawalGap = uint16((vaultVariables2 >> 62) & X10) * 10;\\n        configs.liquidationPenalty = uint16((vaultVariables2 >> 72) & X10);\\n        configs.borrowFee = uint16((vaultVariables2 >> 82) & X10);\\n        configs.oracle = address(uint160(vaultVariables2 >> 96));\\n    }\\n\\n    struct CloneVaultStruct {\\n        address oldVaultAddress;\\n        address newVaultAddress;\\n        address newOracleAddress;\\n        address[] protocols;\\n        address[] tokens;\\n        uint256[] amounts;\\n        uint256 supplyBaseAllowance;\\n        uint256 supplyReserveAllowance;\\n        uint256 borrowBaseAllowance;\\n        uint256 borrowMaxAllowance;\\n        uint256 borrowReserveAllowance;\\n    }\\n\\n    function cloneVault(uint256 oldVaultId) internal {\\n        CloneVaultStruct memory data;\\n\\n        data.oldVaultAddress = VAULT_T1_FACTORY.getVaultAddress(oldVaultId);\\n        data.newVaultAddress = VAULT_T1_FACTORY.getVaultAddress(\\n            oldVaultId + 10\\n        );\\n\\n        IFluidVaultT1.ConstantViews memory oldConstants = IFluidVaultT1(\\n            data.oldVaultAddress\\n        ).constantsView();\\n        IFluidVaultT1.ConstantViews memory newConstants = IFluidVaultT1(\\n            data.newVaultAddress\\n        ).constantsView();\\n\\n        data.newOracleAddress = getOracleAddress(oldVaultId + 10);\\n\\n        (\\n            data.supplyBaseAllowance,\\n            ,\\n            data.supplyReserveAllowance\\n        ) = getAllowance(newConstants.supplyToken);\\n        (\\n            data.borrowBaseAllowance,\\n            data.borrowMaxAllowance,\\n            data.borrowReserveAllowance\\n        ) = getAllowance(newConstants.borrowToken);\\n\\n        {\\n            require(\\n                oldConstants.supplyToken == newConstants.supplyToken,\\n                \\\"not-same-supply-token\\\"\\n            );\\n            require(\\n                oldConstants.borrowToken == newConstants.borrowToken,\\n                \\\"not-same-borrow-token\\\"\\n            );\\n        }\\n\\n        // Set user supply config for the vault on Liquidity Layer.\\n        {\\n            AdminModuleStructs.UserSupplyConfig[]\\n                memory configs_ = new AdminModuleStructs.UserSupplyConfig[](1);\\n\\n            configs_[0] = getUserSupplyDataAndSetLimits(\\n                newConstants.supplyToken,\\n                data.oldVaultAddress,\\n                data.newVaultAddress,\\n                data.supplyBaseAllowance\\n            );\\n\\n            LIQUIDITY.updateUserSupplyConfigs(configs_);\\n        }\\n\\n        // Set user borrow config for the vault on Liquidity Layer.\\n        {\\n            AdminModuleStructs.UserBorrowConfig[]\\n                memory configs_ = new AdminModuleStructs.UserBorrowConfig[](1);\\n\\n            configs_[0] = getUserBorrowDataAndSetLimits(\\n                newConstants.borrowToken,\\n                data.oldVaultAddress,\\n                data.newVaultAddress,\\n                data.borrowBaseAllowance,\\n                data.borrowMaxAllowance\\n            );\\n\\n            LIQUIDITY.updateUserBorrowConfigs(configs_);\\n        }\\n\\n        // Clone core settings from old vault to new vault.\\n        {\\n            IFluidVaultT1.Configs memory configs = getVaultConfig(\\n                data.oldVaultAddress\\n            );\\n\\n            {\\n                require(\\n                    (IFluidOracle(configs.oracle).getExchangeRate() ==\\n                        IFluidOracle(data.newOracleAddress)\\n                            .getExchangeRateOperate()) &&\\n                        (IFluidOracle(data.newOracleAddress)\\n                            .getExchangeRateOperate() ==\\n                            IFluidOracle(data.newOracleAddress)\\n                                .getExchangeRateLiquidate()),\\n                    \\\"oracle exchangePrice is not same\\\"\\n                );\\n            }\\n\\n            IFluidVaultT1(data.newVaultAddress).updateCoreSettings(\\n                configs.supplyRateMagnifier, //     supplyRateMagnifier\\n                configs.borrowRateMagnifier, //     borrowRateMagnifier\\n                configs.collateralFactor, //        collateralFactor\\n                configs.liquidationThreshold, //    liquidationThreshold\\n                configs.liquidationMaxLimit, //     liquidationMaxLimit\\n                configs.withdrawalGap, //           withdrawGap\\n                configs.liquidationPenalty, //      liquidationPenalty\\n                configs.borrowFee //                borrowFee\\n            );\\n        }\\n\\n        // Update oracle on new vault.\\n        {\\n            IFluidVaultT1(data.newVaultAddress).updateOracle(\\n                data.newOracleAddress\\n            );\\n        }\\n\\n        // Update rebalancer on new vault.\\n        {\\n            IFluidVaultT1(data.newVaultAddress).updateRebalancer(\\n                0x264786EF916af64a1DB19F513F24a3681734ce92\\n            );\\n        }\\n\\n        // Approve new vault to spend the reserves dust tokens\\n        {\\n            uint256 len = data.supplyReserveAllowance == 0 ||\\n                data.borrowReserveAllowance == 0\\n                ? 1\\n                : 2;\\n            uint256 i = 0;\\n\\n            data.protocols = new address[](len);\\n            data.tokens = new address[](len);\\n            data.amounts = new uint256[](len);\\n\\n            {\\n                if (data.supplyReserveAllowance != 0) {\\n                    data.protocols[i] = data.newVaultAddress;\\n                    data.tokens[i] = newConstants.supplyToken;\\n                    data.amounts[i] = data.supplyReserveAllowance;\\n                    i++;\\n                }\\n\\n                if (data.borrowReserveAllowance != 0) {\\n                    data.protocols[i] = data.newVaultAddress;\\n                    data.tokens[i] = newConstants.borrowToken;\\n                    data.amounts[i] = data.borrowReserveAllowance;\\n                }\\n\\n                FLUID_RESERVE.approve(\\n                    data.protocols,\\n                    data.tokens,\\n                    data.amounts\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.0\"},\"contracts/payloads/IGP26/libraries/liquiditySlotsLink.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @notice library that helps in reading / working with storage slot data of Fluid Liquidity.\\n/// @dev as all data for Fluid Liquidity is internal, any data must be fetched directly through manual\\n/// slot reading through this library or, if gas usage is less important, through the FluidLiquidityResolver.\\nlibrary LiquiditySlotsLink {\\n    /// @dev storage slot for status at Liquidity\\n    uint256 internal constant LIQUIDITY_STATUS_SLOT = 1;\\n    /// @dev storage slot for auths mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_AUTHS_MAPPING_SLOT = 2;\\n    /// @dev storage slot for guardians mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_GUARDIANS_MAPPING_SLOT = 3;\\n    /// @dev storage slot for user class mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_CLASS_MAPPING_SLOT = 4;\\n    /// @dev storage slot for exchangePricesAndConfig mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_EXCHANGE_PRICES_MAPPING_SLOT = 5;\\n    /// @dev storage slot for rateData mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_RATE_DATA_MAPPING_SLOT = 6;\\n    /// @dev storage slot for totalAmounts mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_TOTAL_AMOUNTS_MAPPING_SLOT = 7;\\n    /// @dev storage slot for user supply double mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_SUPPLY_DOUBLE_MAPPING_SLOT = 8;\\n    /// @dev storage slot for user borrow double mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_BORROW_DOUBLE_MAPPING_SLOT = 9;\\n    /// @dev storage slot for listed tokens array at Liquidity\\n    uint256 internal constant LIQUIDITY_LISTED_TOKENS_ARRAY_SLOT = 10;\\n\\n    // --------------------------------\\n    // @dev stacked uint256 storage slots bits position data for each:\\n\\n    // ExchangePricesAndConfig\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_RATE = 0;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_FEE = 16;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_UTILIZATION = 30;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_UPDATE_THRESHOLD = 44;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_LAST_TIMESTAMP = 58;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_SUPPLY_EXCHANGE_PRICE = 91;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_EXCHANGE_PRICE = 155;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_SUPPLY_RATIO = 219;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_RATIO = 234;\\n\\n    // RateData:\\n    uint256 internal constant BITS_RATE_DATA_VERSION = 0;\\n    // RateData: V1\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_ZERO = 4;\\n    uint256 internal constant BITS_RATE_DATA_V1_UTILIZATION_AT_KINK = 20;\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_KINK = 36;\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_MAX = 52;\\n    // RateData: V2\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_ZERO = 4;\\n    uint256 internal constant BITS_RATE_DATA_V2_UTILIZATION_AT_KINK1 = 20;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK1 = 36;\\n    uint256 internal constant BITS_RATE_DATA_V2_UTILIZATION_AT_KINK2 = 52;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK2 = 68;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_MAX = 84;\\n\\n    // TotalAmounts\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_SUPPLY_WITH_INTEREST = 0;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_SUPPLY_INTEREST_FREE = 64;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_BORROW_WITH_INTEREST = 128;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_BORROW_INTEREST_FREE = 192;\\n\\n    // UserSupplyData\\n    uint256 internal constant BITS_USER_SUPPLY_MODE = 0;\\n    uint256 internal constant BITS_USER_SUPPLY_AMOUNT = 1;\\n    uint256 internal constant BITS_USER_SUPPLY_PREVIOUS_WITHDRAWAL_LIMIT = 65;\\n    uint256 internal constant BITS_USER_SUPPLY_LAST_UPDATE_TIMESTAMP = 129;\\n    uint256 internal constant BITS_USER_SUPPLY_EXPAND_PERCENT = 162;\\n    uint256 internal constant BITS_USER_SUPPLY_EXPAND_DURATION = 176;\\n    uint256 internal constant BITS_USER_SUPPLY_BASE_WITHDRAWAL_LIMIT = 200;\\n    uint256 internal constant BITS_USER_SUPPLY_IS_PAUSED = 255;\\n\\n    // UserBorrowData\\n    uint256 internal constant BITS_USER_BORROW_MODE = 0;\\n    uint256 internal constant BITS_USER_BORROW_AMOUNT = 1;\\n    uint256 internal constant BITS_USER_BORROW_PREVIOUS_BORROW_LIMIT = 65;\\n    uint256 internal constant BITS_USER_BORROW_LAST_UPDATE_TIMESTAMP = 129;\\n    uint256 internal constant BITS_USER_BORROW_EXPAND_PERCENT = 162;\\n    uint256 internal constant BITS_USER_BORROW_EXPAND_DURATION = 176;\\n    uint256 internal constant BITS_USER_BORROW_BASE_BORROW_LIMIT = 200;\\n    uint256 internal constant BITS_USER_BORROW_MAX_BORROW_LIMIT = 218;\\n    uint256 internal constant BITS_USER_BORROW_IS_PAUSED = 255;\\n\\n    // --------------------------------\\n\\n    /// @notice Calculating the slot ID for Liquidity contract for single mapping at `slot_` for `key_`\\n    function calculateMappingStorageSlot(uint256 slot_, address key_) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(key_, slot_));\\n    }\\n\\n    /// @notice Calculating the slot ID for Liquidity contract for double mapping at `slot_` for `key1_` and `key2_`\\n    function calculateDoubleMappingStorageSlot(\\n        uint256 slot_,\\n        address key1_,\\n        address key2_\\n    ) internal pure returns (bytes32) {\\n        bytes32 intermediateSlot_ = keccak256(abi.encode(key1_, slot_));\\n        return keccak256(abi.encode(key2_, intermediateSlot_));\\n    }\\n}\\n\",\"versionPragma\":\"0.8.21\"},\"contracts/payloads/IGP26/libraries/bigMathMinified.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @title library that represents a number in BigNumber(coefficient and exponent) format to store in smaller bits.\\n/// @notice the number is divided into two parts: a coefficient and an exponent. This comes at a cost of losing some precision\\n/// at the end of the number because the exponent simply fills it with zeroes. This precision is oftentimes negligible and can\\n/// result in significant gas cost reduction due to storage space reduction.\\n/// Also note, a valid big number is as follows: if the exponent is > 0, then coefficient last bits should be occupied to have max precision.\\n/// @dev roundUp is more like a increase 1, which happens everytime for the same number.\\n/// roundDown simply sets trailing digits after coefficientSize to zero (floor), only once for the same number.\\nlibrary BigMathMinified {\\n    /// @dev constants to use for `roundUp` input param to increase readability\\n    bool internal constant ROUND_DOWN = false;\\n    bool internal constant ROUND_UP = true;\\n\\n    /// @dev converts `normal` number to BigNumber with `exponent` and `coefficient` (or precision).\\n    /// e.g.:\\n    /// 5035703444687813576399599 (normal) = (coefficient[32bits], exponent[8bits])[40bits]\\n    /// 5035703444687813576399599 (decimal) => 10000101010010110100000011111011110010100110100000000011100101001101001101011101111 (binary)\\n    ///                                     => 10000101010010110100000011111011000000000000000000000000000000000000000000000000000\\n    ///                                                                        ^-------------------- 51(exponent) -------------- ^\\n    /// coefficient = 1000,0101,0100,1011,0100,0000,1111,1011               (2236301563)\\n    /// exponent =                                            0011,0011     (51)\\n    /// bigNumber =   1000,0101,0100,1011,0100,0000,1111,1011,0011,0011     (572493200179)\\n    ///\\n    /// @param normal number which needs to be converted into Big Number\\n    /// @param coefficientSize at max how many bits of precision there should be (64 = uint64 (64 bits precision))\\n    /// @param exponentSize at max how many bits of exponent there should be (8 = uint8 (8 bits exponent))\\n    /// @param roundUp signals if result should be rounded down or up\\n    /// @return bigNumber converted bigNumber (coefficient << exponent)\\n    function toBigNumber(\\n        uint256 normal,\\n        uint256 coefficientSize,\\n        uint256 exponentSize,\\n        bool roundUp\\n    ) internal pure returns (uint256 bigNumber) {\\n        assembly {\\n            let lastBit_\\n            let number_ := normal\\n            if gt(number_, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x80, number_)\\n                lastBit_ := 0x80\\n            }\\n            if gt(number_, 0xFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x40, number_)\\n                lastBit_ := add(lastBit_, 0x40)\\n            }\\n            if gt(number_, 0xFFFFFFFF) {\\n                number_ := shr(0x20, number_)\\n                lastBit_ := add(lastBit_, 0x20)\\n            }\\n            if gt(number_, 0xFFFF) {\\n                number_ := shr(0x10, number_)\\n                lastBit_ := add(lastBit_, 0x10)\\n            }\\n            if gt(number_, 0xFF) {\\n                number_ := shr(0x8, number_)\\n                lastBit_ := add(lastBit_, 0x8)\\n            }\\n            if gt(number_, 0xF) {\\n                number_ := shr(0x4, number_)\\n                lastBit_ := add(lastBit_, 0x4)\\n            }\\n            if gt(number_, 0x3) {\\n                number_ := shr(0x2, number_)\\n                lastBit_ := add(lastBit_, 0x2)\\n            }\\n            if gt(number_, 0x1) {\\n                lastBit_ := add(lastBit_, 1)\\n            }\\n            if gt(number_, 0) {\\n                lastBit_ := add(lastBit_, 1)\\n            }\\n            if lt(lastBit_, coefficientSize) {\\n                // for throw exception\\n                lastBit_ := coefficientSize\\n            }\\n            let exponent := sub(lastBit_, coefficientSize)\\n            let coefficient := shr(exponent, normal)\\n            if and(roundUp, gt(exponent, 0)) {\\n                // rounding up is only needed if exponent is > 0, as otherwise the coefficient fully holds the original number\\n                coefficient := add(coefficient, 1)\\n                if eq(shl(coefficientSize, 1), coefficient) {\\n                    // case were coefficient was e.g. 111, with adding 1 it became 1000 (in binary) and coefficientSize 3 bits\\n                    // final coefficient would exceed it's size. -> reduce coefficent to 100 and increase exponent by 1.\\n                    coefficient := shl(sub(coefficientSize, 1), 1)\\n                    exponent := add(exponent, 1)\\n                }\\n            }\\n            if iszero(lt(exponent, shl(exponentSize, 1))) {\\n                // if exponent is >= exponentSize, the normal number is too big to fit within\\n                // BigNumber with too small sizes for coefficient and exponent\\n                revert(0, 0)\\n            }\\n            bigNumber := shl(exponentSize, coefficient)\\n            bigNumber := add(bigNumber, exponent)\\n        }\\n    }\\n\\n    /// @dev get `normal` number from `bigNumber`, `exponentSize` and `exponentMask`\\n    function fromBigNumber(\\n        uint256 bigNumber,\\n        uint256 exponentSize,\\n        uint256 exponentMask\\n    ) internal pure returns (uint256 normal) {\\n        assembly {\\n            let coefficient := shr(exponentSize, bigNumber)\\n            let exponent := and(bigNumber, exponentMask)\\n            normal := shl(exponent, coefficient)\\n        }\\n    }\\n\\n    /// @dev gets the most significant bit `lastBit` of a `normal` number (length of given number of binary format).\\n    /// e.g.\\n    /// 5035703444687813576399599 = 10000101010010110100000011111011110010100110100000000011100101001101001101011101111\\n    /// lastBit =                   ^---------------------------------   83   ----------------------------------------^\\n    function mostSignificantBit(uint256 normal) internal pure returns (uint lastBit) {\\n        assembly {\\n            let number_ := normal\\n            if gt(normal, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x80, number_)\\n                lastBit := 0x80\\n            }\\n            if gt(number_, 0xFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x40, number_)\\n                lastBit := add(lastBit, 0x40)\\n            }\\n            if gt(number_, 0xFFFFFFFF) {\\n                number_ := shr(0x20, number_)\\n                lastBit := add(lastBit, 0x20)\\n            }\\n            if gt(number_, 0xFFFF) {\\n                number_ := shr(0x10, number_)\\n                lastBit := add(lastBit, 0x10)\\n            }\\n            if gt(number_, 0xFF) {\\n                number_ := shr(0x8, number_)\\n                lastBit := add(lastBit, 0x8)\\n            }\\n            if gt(number_, 0xF) {\\n                number_ := shr(0x4, number_)\\n                lastBit := add(lastBit, 0x4)\\n            }\\n            if gt(number_, 0x3) {\\n                number_ := shr(0x2, number_)\\n                lastBit := add(lastBit, 0x2)\\n            }\\n            if gt(number_, 0x1) {\\n                lastBit := add(lastBit, 1)\\n            }\\n            if gt(number_, 0) {\\n                lastBit := add(lastBit, 1)\\n            }\\n        }\\n    }\\n}\",\"versionPragma\":\"0.8.21\"},\"contracts/payloads/IGP26/libraries/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary LibsErrorTypes {\\n    /***********************************|\\n    |         LiquidityCalcs            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when supply or borrow exchange price is zero at calc token data (token not configured yet)\\n    uint256 internal constant LiquidityCalcs__ExchangePriceZero = 70001;\\n\\n    /// @notice thrown when rate data is set to a version that is not implemented\\n    uint256 internal constant LiquidityCalcs__UnsupportedRateVersion = 70002;\\n\\n    /// @notice thrown when the calculated borrow rate turns negative. This should never happen.\\n    uint256 internal constant LiquidityCalcs__BorrowRateNegative = 70003;\\n\\n    /***********************************|\\n    |           SafeTransfer            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe transfer from for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFromFailed = 71001;\\n\\n    /// @notice thrown when safe transfer for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFailed = 71002;\\n}\",\"versionPragma\":\"0.8.21\"},\"contracts/payloads/IGP26/libraries/liquidityCalcs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { LibsErrorTypes as ErrorTypes } from \\\"./errorTypes.sol\\\";\\nimport { LiquiditySlotsLink } from \\\"./liquiditySlotsLink.sol\\\";\\nimport { BigMathMinified } from \\\"./bigMathMinified.sol\\\";\\n\\n/// @notice implements calculation methods used for Fluid liquidity such as updated exchange prices,\\n/// borrow rate, withdrawal / borrow limits, revenue amount.\\nlibrary LiquidityCalcs {\\n    error FluidLiquidityCalcsError(uint256 errorId_);\\n\\n    /// @notice emitted if the calculated borrow rate surpassed max borrow rate (16 bits) and was capped at maximum value 65535\\n    event BorrowRateMaxCap();\\n\\n    /// @dev constants as from Liquidity variables.sol\\n    uint256 internal constant EXCHANGE_PRICES_PRECISION = 1e12;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n    // constants used for BigMath conversion from and to storage\\n    uint256 internal constant DEFAULT_EXPONENT_SIZE = 8;\\n    uint256 internal constant DEFAULT_EXPONENT_MASK = 0xFF;\\n\\n    uint256 internal constant FOUR_DECIMALS = 1e4;\\n    uint256 internal constant TWELVE_DECIMALS = 1e12;\\n    uint256 internal constant X14 = 0x3fff;\\n    uint256 internal constant X15 = 0x7fff;\\n    uint256 internal constant X16 = 0xffff;\\n    uint256 internal constant X18 = 0x3ffff;\\n    uint256 internal constant X24 = 0xffffff;\\n    uint256 internal constant X33 = 0x1ffffffff;\\n    uint256 internal constant X64 = 0xffffffffffffffff;\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                  CALC EXCHANGE PRICES                  /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev calculates interest (exchange prices) for a token given its' exchangePricesAndConfig from storage.\\n    /// @param exchangePricesAndConfig_ exchange prices and config packed uint256 read from storage\\n    /// @return supplyExchangePrice_ updated supplyExchangePrice\\n    /// @return borrowExchangePrice_ updated borrowExchangePrice\\n    function calcExchangePrices(\\n        uint256 exchangePricesAndConfig_\\n    ) internal view returns (uint256 supplyExchangePrice_, uint256 borrowExchangePrice_) {\\n        // Extracting exchange prices\\n        supplyExchangePrice_ =\\n            (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_SUPPLY_EXCHANGE_PRICE) &\\n            X64;\\n        borrowExchangePrice_ =\\n            (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_BORROW_EXCHANGE_PRICE) &\\n            X64;\\n\\n        if (supplyExchangePrice_ == 0 || borrowExchangePrice_ == 0) {\\n            revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__ExchangePriceZero);\\n        }\\n\\n        uint256 temp_ = exchangePricesAndConfig_ & X16; // temp_ = borrowRate\\n\\n        unchecked {\\n            // last timestamp can not be > current timestamp\\n            uint256 secondsSinceLastUpdate_ = block.timestamp -\\n                ((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_LAST_TIMESTAMP) & X33);\\n\\n            uint256 borrowRatio_ = (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_BORROW_RATIO) &\\n                X15;\\n            if (secondsSinceLastUpdate_ == 0 || temp_ == 0 || borrowRatio_ == 1) {\\n                // if no time passed, borrow rate is 0, or no raw borrowings: no exchange price update needed\\n                // (if borrowRatio_ == 1 means there is only borrowInterestFree, as first bit is 1 and rest is 0)\\n                return (supplyExchangePrice_, borrowExchangePrice_);\\n            }\\n\\n            // calculate new borrow exchange price.\\n            // formula borrowExchangePriceIncrease: previous price * borrow rate * secondsSinceLastUpdate_.\\n            // nominator is max uint112 (uint64 * uint16 * uint32). Divisor can not be 0.\\n            borrowExchangePrice_ +=\\n                (borrowExchangePrice_ * temp_ * secondsSinceLastUpdate_) /\\n                (SECONDS_PER_YEAR * FOUR_DECIMALS);\\n\\n            // FOR SUPPLY EXCHANGE PRICE:\\n            // all yield paid by borrowers (in mode with interest) goes to suppliers in mode with interest.\\n            // formula: previous price * supply rate * secondsSinceLastUpdate_.\\n            // where supply rate = (borrow rate  - revenueFee%) * ratioSupplyYield. And\\n            // ratioSupplyYield = utilization * supplyRatio * borrowRatio\\n            //\\n            // Example:\\n            // supplyRawInterest is 80, supplyInterestFree is 20. totalSupply is 100. BorrowedRawInterest is 50.\\n            // BorrowInterestFree is 10. TotalBorrow is 60. borrow rate 40%, revenueFee 10%.\\n            // yield is 10 (so half a year must have passed).\\n            // supplyRawInterest must become worth 89. totalSupply must become 109. BorrowedRawInterest must become 60.\\n            // borrowInterestFree must still be 10. supplyInterestFree still 20. totalBorrow 70.\\n            // supplyExchangePrice would have to go from 1 to 1,125 (+ 0.125). borrowExchangePrice from 1 to 1,2 (+0.2).\\n            // utilization is 60%. supplyRatio = 20 / 80 = 25% (only 80% of lenders receiving yield).\\n            // borrowRatio = 10 / 50 = 20% (only 83,333% of borrowers paying yield):\\n            // x of borrowers paying yield = 100% - (20 / (100 + 20)) = 100% - 16.6666666% = 83,333%.\\n            // ratioSupplyYield = 60% * 83,33333% * (100% + 20%) = 62,5%\\n            // supplyRate = (40% * (100% - 10%)) * = 36% * 62,5% = 22.5%\\n            // increase in supplyExchangePrice, assuming 100 as previous price.\\n            // 100 * 22,5% * 1/2 (half a year) = 0,1125.\\n            // cross-check supplyRawInterest worth = 80 * 1.1125 = 89. totalSupply worth = 89 + 20.\\n\\n            // -------------- 1. calculate ratioSupplyYield --------------------------------\\n            // step1: utilization * supplyRatio (or actually part of lenders receiving yield)\\n\\n            // temp_ => supplyRatio (in 1e2: 100% = 10_000; 1% = 100 -> max value 16_383)\\n            // if first bit 0 then ratio is supplyInterestFree / supplyWithInterest (supplyWithInterest is bigger)\\n            // else ratio is supplyWithInterest / supplyInterestFree (supplyInterestFree is bigger)\\n            temp_ = (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_SUPPLY_RATIO) & X15;\\n\\n            if (temp_ == 1) {\\n                // if no raw supply: no exchange price update needed\\n                // (if supplyRatio_ == 1 means there is only supplyInterestFree, as first bit is 1 and rest is 0)\\n                return (supplyExchangePrice_, borrowExchangePrice_);\\n            }\\n\\n            // ratioSupplyYield precision is 1e27 as 100% for increased precision when supplyInterestFree > supplyWithInterest\\n            if (temp_ & 1 == 1) {\\n                // ratio is supplyWithInterest / supplyInterestFree (supplyInterestFree is bigger)\\n                temp_ = temp_ >> 1;\\n\\n                // Note: case where temp_ == 0 (only supplyInterestFree, no yield) already covered by early return\\n                // in the if statement a little above.\\n\\n                // based on above example but supplyRawInterest is 20, supplyInterestFree is 80. no fee.\\n                // supplyRawInterest must become worth 30. totalSupply must become 110.\\n                // supplyExchangePrice would have to go from 1 to 1,5. borrowExchangePrice from 1 to 1,2.\\n                // so ratioSupplyYield must come out as 2.5 (250%).\\n                // supplyRatio would be (20 * 10_000 / 80) = 2500. but must be inverted.\\n                temp_ = (1e27 * FOUR_DECIMALS) / temp_; // e.g. 1e31 / 2500 = 4e27. (* 1e27 for precision)\\n                // e.g. 5_000 * (1e27 + 4e27) / 1e27 = 25_000 (=250%).\\n                temp_ =\\n                    // utilization * (100% + 100% / supplyRatio)\\n                    (((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_UTILIZATION) & X14) *\\n                        (1e27 + temp_)) / // extract utilization (max 16_383 so there is no way this can overflow).\\n                    (FOUR_DECIMALS);\\n                // max possible value of temp_ here is 16383 * (1e27 + 1e31) / 1e4 = ~1.64e31\\n            } else {\\n                // ratio is supplyInterestFree / supplyWithInterest (supplyWithInterest is bigger)\\n                temp_ = temp_ >> 1;\\n                // if temp_ == 0 then only supplyWithInterest => full yield. temp_ is already 0\\n\\n                // e.g. 5_000 * 10_000 + (20 * 10_000 / 80) / 10_000 = 5000 * 12500 / 10000 = 6250 (=62.5%).\\n                temp_ =\\n                    // 1e27 * utilization * (100% + supplyRatio) / 100%\\n                    (1e27 *\\n                        ((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_UTILIZATION) & X14) * // extract utilization (max 16_383 so there is no way this can overflow).\\n                        (FOUR_DECIMALS + temp_)) /\\n                    (FOUR_DECIMALS * FOUR_DECIMALS);\\n                // max possible temp_ value: 1e27 * 16383 * 2e4 / 1e8 = 3.2766e27\\n            }\\n            // from here temp_ => ratioSupplyYield (utilization * supplyRatio part) scaled by 1e27. max possible value ~1.64e31\\n\\n            // step2 of ratioSupplyYield: add borrowRatio (only x% of borrowers paying yield)\\n            if (borrowRatio_ & 1 == 1) {\\n                // ratio is borrowWithInterest / borrowInterestFree (borrowInterestFree is bigger)\\n                borrowRatio_ = borrowRatio_ >> 1;\\n                // borrowRatio_ => x of total bororwers paying yield. scale to 1e27.\\n\\n                // Note: case where borrowRatio_ == 0 (only borrowInterestFree, no yield) already covered\\n                // at the beginning of the method by early return if `borrowRatio_ == 1`.\\n\\n                // based on above example but borrowRawInterest is 10, borrowInterestFree is 50. no fee. borrowRatio = 20%.\\n                // so only 16.66% of borrowers are paying yield. so the 100% - part of the formula is not needed.\\n                // x of borrowers paying yield = (borrowRatio / (100 + borrowRatio)) = 16.6666666%\\n                // borrowRatio_ => x of total bororwers paying yield. scale to 1e27.\\n                borrowRatio_ = (borrowRatio_ * 1e27) / (FOUR_DECIMALS + borrowRatio_);\\n                // max value here for borrowRatio_ is (1e31 / (1e4 + 1e4))= 5e26 (= 50% of borrowers paying yield).\\n            } else {\\n                // ratio is borrowInterestFree / borrowWithInterest (borrowWithInterest is bigger)\\n                borrowRatio_ = borrowRatio_ >> 1;\\n\\n                // borrowRatio_ => x of total bororwers paying yield. scale to 1e27.\\n                // x of borrowers paying yield = 100% - (borrowRatio / (100 + borrowRatio)) = 100% - 16.6666666% = 83,333%.\\n                borrowRatio_ = (1e27 - ((borrowRatio_ * 1e27) / (FOUR_DECIMALS + borrowRatio_)));\\n                // borrowRatio can never be > 100%. so max subtraction can be 100% - 100% / 200%.\\n                // or if borrowRatio_ is 0 -> 100% - 0. or if borrowRatio_ is 1 -> 100% - 1 / 101.\\n                // max value here for borrowRatio_ is 1e27 - 0 = 1e27 (= 100% of borrowers paying yield).\\n            }\\n\\n            // temp_ => ratioSupplyYield. scaled down from 1e25 = 1% each to normal percent precision 1e2 = 1%.\\n            // max nominator value is ~1.64e31 * 1e27 = 1.64e58. max result = 1.64e8\\n            temp_ = (FOUR_DECIMALS * temp_ * borrowRatio_) / 1e54;\\n\\n            // 2. calculate supply rate\\n            // temp_ => supply rate (borrow rate  - revenueFee%) * ratioSupplyYield.\\n            // division part is done in next step to increase precision. (divided by 2x FOUR_DECIMALS, fee + borrowRate)\\n            // Note that all calculation divisions for supplyExchangePrice are rounded down.\\n            // Note supply rate can be bigger than the borrowRate, e.g. if there are only few lenders with interest\\n            // but more suppliers not earning interest.\\n            temp_ = ((exchangePricesAndConfig_ & X16) * // borrow rate\\n                temp_ * // ratioSupplyYield\\n                (FOUR_DECIMALS - ((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_FEE) & X14))); // revenueFee\\n            // fee can not be > 100%. max possible = 65535 * ~1.64e8 * 1e4 =~1.074774e17.\\n\\n            // 3. calculate increase in supply exchange price\\n            supplyExchangePrice_ += ((supplyExchangePrice_ * temp_ * secondsSinceLastUpdate_) /\\n                (SECONDS_PER_YEAR * FOUR_DECIMALS * FOUR_DECIMALS * FOUR_DECIMALS));\\n            // max possible nominator = max uint 64 * 1.074774e17 * max uint32 = ~8.52e45. Denominator can not be 0.\\n        }\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                     CALC REVENUE                       /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev gets the `revenueAmount_` for a token given its' totalAmounts and exchangePricesAndConfig from storage\\n    /// and the current balance of the Fluid liquidity contract for the token.\\n    /// @param totalAmounts_ total amounts packed uint256 read from storage\\n    /// @param exchangePricesAndConfig_ exchange prices and config packed uint256 read from storage\\n    /// @param liquidityTokenBalance_   current balance of Liquidity contract (IERC20(token_).balanceOf(address(this)))\\n    /// @return revenueAmount_ collectable revenue amount\\n    function calcRevenue(\\n        uint256 totalAmounts_,\\n        uint256 exchangePricesAndConfig_,\\n        uint256 liquidityTokenBalance_\\n    ) internal view returns (uint256 revenueAmount_) {\\n        // @dev no need to super-optimize this method as it is only used by admin\\n\\n        // calculate the new exchange prices based on earned interest\\n        (uint256 supplyExchangePrice_, uint256 borrowExchangePrice_) = calcExchangePrices(exchangePricesAndConfig_);\\n\\n        // total supply = interest free + with interest converted from raw\\n        uint256 totalSupply_ = getTotalSupply(totalAmounts_, supplyExchangePrice_);\\n\\n        if (totalSupply_ > 0) {\\n            // available revenue: balanceOf(token) + totalBorrowings - totalLendings.\\n            revenueAmount_ = liquidityTokenBalance_ + getTotalBorrow(totalAmounts_, borrowExchangePrice_);\\n            // ensure there is no possible case because of rounding etc. where this would revert,\\n            // explicitly check if >\\n            revenueAmount_ = revenueAmount_ > totalSupply_ ? revenueAmount_ - totalSupply_ : 0;\\n            // Note: if utilization > 100% (totalSupply < totalBorrow), then all the amount above 100% utilization\\n            // can only be revenue.\\n        } else {\\n            // if supply is 0, then rest of balance can be withdrawn as revenue so that no amounts get stuck\\n            revenueAmount_ = liquidityTokenBalance_;\\n        }\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                      CALC LIMITS                       /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev calculates withdrawal limit before an operate execution:\\n    /// amount of user supply that must stay supplied (not amount that can be withdrawn).\\n    /// i.e. if user has supplied 100m and can withdraw 5M, this method returns the 95M, not the withdrawable amount 5M\\n    /// @param userSupplyData_ user supply data packed uint256 from storage\\n    /// @param userSupply_ current user supply amount already extracted from `userSupplyData_` and converted from BigMath\\n    /// @return currentWithdrawalLimit_ current withdrawal limit updated for expansion since last interaction.\\n    ///         returned value is in raw for with interest mode, normal amount for interest free mode!\\n    function calcWithdrawalLimitBeforeOperate(\\n        uint256 userSupplyData_,\\n        uint256 userSupply_\\n    ) internal view returns (uint256 currentWithdrawalLimit_) {\\n        // @dev must support handling the case where timestamp is 0 (config is set but no interactions yet).\\n        // first tx where timestamp is 0 will enter `if (lastWithdrawalLimit_ == 0)` because lastWithdrawalLimit_ is not set yet.\\n        // returning max withdrawal allowed, which is not exactly right but doesn't matter because the first interaction must be\\n        // a deposit anyway. Important is that it would not revert.\\n\\n        // Note the first time a deposit brings the user supply amount to above the base withdrawal limit, the active limit\\n        // is the fully expanded limit immediately.\\n\\n        // extract last set withdrawal limit\\n        uint256 lastWithdrawalLimit_ = (userSupplyData_ >>\\n            LiquiditySlotsLink.BITS_USER_SUPPLY_PREVIOUS_WITHDRAWAL_LIMIT) & X64;\\n        lastWithdrawalLimit_ =\\n            (lastWithdrawalLimit_ >> DEFAULT_EXPONENT_SIZE) <<\\n            (lastWithdrawalLimit_ & DEFAULT_EXPONENT_MASK);\\n        if (lastWithdrawalLimit_ == 0) {\\n            // withdrawal limit is not activated. Max withdrawal allowed\\n            return 0;\\n        }\\n\\n        uint256 maxWithdrawableLimit_;\\n        uint256 temp_;\\n        unchecked {\\n            // extract max withdrawable percent of user supply and\\n            // calculate maximum withdrawable amount expandPercentage of user supply at full expansion duration elapsed\\n            // e.g.: if 10% expandPercentage, meaning 10% is withdrawable after full expandDuration has elapsed.\\n\\n            // userSupply_ needs to be atleast 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            maxWithdrawableLimit_ =\\n                (((userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_PERCENT) & X14) * userSupply_) /\\n                FOUR_DECIMALS;\\n\\n            // time elapsed since last withdrawal limit was set (in seconds)\\n            // @dev last process timestamp is guaranteed to exist for withdrawal, as a supply must have happened before.\\n            // last timestamp can not be > current timestamp\\n            temp_ =\\n                block.timestamp -\\n                ((userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_LAST_UPDATE_TIMESTAMP) & X33);\\n        }\\n        // calculate withdrawable amount of expandPercent that is elapsed of expandDuration.\\n        // e.g. if 60% of expandDuration has elapsed, then user should be able to withdraw 6% of user supply, down to 94%.\\n        // Note: no explicit check for this needed, it is covered by setting minWithdrawalLimit_ if needed.\\n        temp_ =\\n            (maxWithdrawableLimit_ * temp_) /\\n            // extract expand duration: After this, decrement won't happen (user can withdraw 100% of withdraw limit)\\n            ((userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_DURATION) & X24); // expand duration can never be 0\\n        // calculate expanded withdrawal limit: last withdrawal limit - withdrawable amount.\\n        // Note: withdrawable amount here can grow bigger than userSupply if timeElapsed is a lot bigger than expandDuration,\\n        // which would cause the subtraction `lastWithdrawalLimit_ - withdrawableAmount_` to revert. In that case, set 0\\n        // which will cause minimum (fully expanded) withdrawal limit to be set in lines below.\\n        unchecked {\\n            // underflow explicitly checked & handled\\n            currentWithdrawalLimit_ = lastWithdrawalLimit_ > temp_ ? lastWithdrawalLimit_ - temp_ : 0;\\n            // calculate minimum withdrawal limit: minimum amount of user supply that must stay supplied at full expansion.\\n            // subtraction can not underflow as maxWithdrawableLimit_ is a percentage amount (<=100%) of userSupply_\\n            temp_ = userSupply_ - maxWithdrawableLimit_;\\n        }\\n        // if withdrawal limit is decreased below minimum then set minimum\\n        // (e.g. when more than expandDuration time has elapsed)\\n        if (temp_ > currentWithdrawalLimit_) {\\n            currentWithdrawalLimit_ = temp_;\\n        }\\n    }\\n\\n    /// @dev calculates withdrawal limit after an operate execution:\\n    /// amount of user supply that must stay supplied (not amount that can be withdrawn).\\n    /// i.e. if user has supplied 100m and can withdraw 5M, this method returns the 95M, not the withdrawable amount 5M\\n    /// @param userSupplyData_ user supply data packed uint256 from storage\\n    /// @param userSupply_ current user supply amount already extracted from `userSupplyData_` and added / subtracted with the executed operate amount\\n    /// @param newWithdrawalLimit_ current withdrawal limit updated for expansion since last interaction, result from `calcWithdrawalLimitBeforeOperate`\\n    /// @return withdrawalLimit_ updated withdrawal limit that should be written to storage. returned value is in\\n    ///                          raw for with interest mode, normal amount for interest free mode!\\n    function calcWithdrawalLimitAfterOperate(\\n        uint256 userSupplyData_,\\n        uint256 userSupply_,\\n        uint256 newWithdrawalLimit_\\n    ) internal pure returns (uint256) {\\n        // temp_ => base withdrawal limit. below this, maximum withdrawals are allowed\\n        uint256 temp_ = (userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_BASE_WITHDRAWAL_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        // if user supply is below base limit then max withdrawals are allowed\\n        if (userSupply_ < temp_) {\\n            return 0;\\n        }\\n        // temp_ => withdrawal limit expandPercent (is in 1e2 decimals)\\n        temp_ = (userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_PERCENT) & X14;\\n        unchecked {\\n            // temp_ => minimum withdrawal limit: userSupply - max withdrawable limit (userSupply * expandPercent))\\n            // userSupply_ needs to be atleast 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            // subtraction can not underflow as maxWithdrawableLimit_ is a percentage amount (<=100%) of userSupply_\\n            temp_ = userSupply_ - ((userSupply_ * temp_) / FOUR_DECIMALS);\\n        }\\n        // if new (before operation) withdrawal limit is less than minimum limit then set minimum limit.\\n        // e.g. can happen on new deposits. withdrawal limit is instantly fully expanded in a scenario where\\n        // increased deposit amount outpaces withrawals.\\n        if (temp_ > newWithdrawalLimit_) {\\n            return temp_;\\n        }\\n        return newWithdrawalLimit_;\\n    }\\n\\n    /// @dev calculates borrow limit before an operate execution:\\n    /// total amount user borrow can reach (not borrowable amount in current operation).\\n    /// i.e. if user has borrowed 50M and can still borrow 5M, this method returns the total 55M, not the borrowable amount 5M\\n    /// @param userBorrowData_ user borrow data packed uint256 from storage\\n    /// @param userBorrow_ current user borrow amount already extracted from `userBorrowData_`\\n    /// @return currentBorrowLimit_ current borrow limit updated for expansion since last interaction. returned value is in\\n    ///                             raw for with interest mode, normal amount for interest free mode!\\n    function calcBorrowLimitBeforeOperate(\\n        uint256 userBorrowData_,\\n        uint256 userBorrow_\\n    ) internal view returns (uint256 currentBorrowLimit_) {\\n        // @dev must support handling the case where timestamp is 0 (config is set but no interactions yet) -> base limit.\\n        // first tx where timestamp is 0 will enter `if (maxExpandedBorrowLimit_ < baseBorrowLimit_)` because `userBorrow_` and thus\\n        // `maxExpansionLimit_` and thus `maxExpandedBorrowLimit_` is 0 and `baseBorrowLimit_` can not be 0.\\n\\n        // temp_ = extract borrow expand percent (is in 1e2 decimals)\\n        uint256 temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_PERCENT) & X14;\\n\\n        uint256 maxExpansionLimit_;\\n        uint256 maxExpandedBorrowLimit_;\\n        unchecked {\\n            // calculate max expansion limit: Max amount limit can expand to since last interaction\\n            // userBorrow_ needs to be atleast 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            maxExpansionLimit_ = ((userBorrow_ * temp_) / FOUR_DECIMALS);\\n\\n            // calculate max borrow limit: Max point limit can increase to since last interaction\\n            maxExpandedBorrowLimit_ = userBorrow_ + maxExpansionLimit_;\\n        }\\n\\n        // currentBorrowLimit_ = extract base borrow limit\\n        currentBorrowLimit_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_BASE_BORROW_LIMIT) & X18;\\n        currentBorrowLimit_ =\\n            (currentBorrowLimit_ >> DEFAULT_EXPONENT_SIZE) <<\\n            (currentBorrowLimit_ & DEFAULT_EXPONENT_MASK);\\n\\n        if (maxExpandedBorrowLimit_ < currentBorrowLimit_) {\\n            return currentBorrowLimit_;\\n        }\\n        // time elapsed since last borrow limit was set (in seconds)\\n        unchecked {\\n            // temp_ = timeElapsed_ (last timestamp can not be > current timestamp)\\n            temp_ =\\n                block.timestamp -\\n                ((userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_LAST_UPDATE_TIMESTAMP) & X33); // extract last update timestamp\\n        }\\n\\n        // currentBorrowLimit_ = expandedBorrowableAmount + extract last set borrow limit\\n        currentBorrowLimit_ =\\n            // calculate borrow limit expansion since last interaction for `expandPercent` that is elapsed of `expandDuration`.\\n            // divisor is extract expand duration (after this, full expansion to expandPercentage happened).\\n            ((maxExpansionLimit_ * temp_) /\\n                ((userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_DURATION) & X24)) + // expand duration can never be 0\\n            //  extract last set borrow limit\\n            BigMathMinified.fromBigNumber(\\n                (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_PREVIOUS_BORROW_LIMIT) & X64,\\n                DEFAULT_EXPONENT_SIZE,\\n                DEFAULT_EXPONENT_MASK\\n            );\\n\\n        // if timeElapsed is bigger than expandDuration, new borrow limit would be > max expansion,\\n        // so set to `maxExpandedBorrowLimit_` in that case.\\n        // also covers the case where last process timestamp = 0 (timeElapsed would simply be very big)\\n        if (currentBorrowLimit_ > maxExpandedBorrowLimit_) {\\n            currentBorrowLimit_ = maxExpandedBorrowLimit_;\\n        }\\n        // temp_ = extract hard max borrow limit. Above this user can never borrow (not expandable above)\\n        temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_MAX_BORROW_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        if (currentBorrowLimit_ > temp_) {\\n            currentBorrowLimit_ = temp_;\\n        }\\n    }\\n\\n    /// @dev calculates borrow limit after an operate execution:\\n    /// total amount user borrow can reach (not borrowable amount in current operation).\\n    /// i.e. if user has borrowed 50M and can still borrow 5M, this method returns the total 55M, not the borrowable amount 5M\\n    /// @param userBorrowData_ user borrow data packed uint256 from storage\\n    /// @param userBorrow_ current user borrow amount already extracted from `userBorrowData_` and added / subtracted with the executed operate amount\\n    /// @param newBorrowLimit_ current borrow limit updated for expansion since last interaction, result from `calcBorrowLimitBeforeOperate`\\n    /// @return borrowLimit_ updated borrow limit that should be written to storage.\\n    ///                      returned value is in raw for with interest mode, normal amount for interest free mode!\\n    function calcBorrowLimitAfterOperate(\\n        uint256 userBorrowData_,\\n        uint256 userBorrow_,\\n        uint256 newBorrowLimit_\\n    ) internal pure returns (uint256 borrowLimit_) {\\n        // temp_ = extract borrow expand percent\\n        uint256 temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_PERCENT) & X14; // (is in 1e2 decimals)\\n\\n        unchecked {\\n            // borrowLimit_ = calculate maximum borrow limit at full expansion.\\n            // userBorrow_ needs to be at least 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            borrowLimit_ = userBorrow_ + ((userBorrow_ * temp_) / FOUR_DECIMALS);\\n        }\\n\\n        // temp_ = extract base borrow limit\\n        temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_BASE_BORROW_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        if (borrowLimit_ < temp_) {\\n            // below base limit, borrow limit is always base limit\\n            return temp_;\\n        }\\n        // temp_ = extract hard max borrow limit. Above this user can never borrow (not expandable above)\\n        temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_MAX_BORROW_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        // make sure fully expanded borrow limit is not above hard max borrow limit\\n        if (borrowLimit_ > temp_) {\\n            borrowLimit_ = temp_;\\n        }\\n        // if new borrow limit (from before operate) is > max borrow limit, set max borrow limit.\\n        // (e.g. on a repay shrinking instantly to fully expanded borrow limit from new borrow amount. shrinking is instant)\\n        if (newBorrowLimit_ > borrowLimit_) {\\n            return borrowLimit_;\\n        }\\n        return newBorrowLimit_;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                      CALC RATES                        /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev Calculates new borrow rate from utilization for a token\\n    /// @param rateData_ rate data packed uint256 from storage for the token\\n    /// @param utilization_ totalBorrow / totalSupply. 1e4 = 100% utilization\\n    /// @return rate_ rate for that particular token in 1e2 precision (e.g. 5% rate = 500)\\n    function calcBorrowRateFromUtilization(uint256 rateData_, uint256 utilization_) internal returns (uint256 rate_) {\\n        // extract rate version: 4 bits (0xF) starting from bit 0\\n        uint256 rateVersion_ = (rateData_ & 0xF);\\n\\n        if (rateVersion_ == 1) {\\n            rate_ = calcRateV1(rateData_, utilization_);\\n        } else if (rateVersion_ == 2) {\\n            rate_ = calcRateV2(rateData_, utilization_);\\n        } else {\\n            revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__UnsupportedRateVersion);\\n        }\\n\\n        if (rate_ > X16) {\\n            // hard cap for borrow rate at maximum value 16 bits (65535) to make sure it does not overflow storage space.\\n            // this is unlikely to ever happen if configs stay within expected levels.\\n            rate_ = X16;\\n            // emit event to more easily become aware\\n            emit BorrowRateMaxCap();\\n        }\\n    }\\n\\n    /// @dev calculates the borrow rate based on utilization for rate data version 1 (with one kink) in 1e2 precision\\n    /// @param rateData_ rate data packed uint256 from storage for the token\\n    /// @param utilization_  in 1e2 (100% = 1e4)\\n    /// @return rate_ rate in 1e2 precision\\n    function calcRateV1(uint256 rateData_, uint256 utilization_) internal pure returns (uint256 rate_) {\\n        /// For rate v1 (one kink) ------------------------------------------------------\\n        /// Next 16  bits =>  4 - 19 => Rate at utilization 0% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  20- 35 => Utilization at kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  36- 51 => Rate at utilization kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  52- 67 => Rate at utilization 100% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Last 188 bits =>  68-255 => blank, might come in use in future\\n\\n        // y = mx + c.\\n        // y is borrow rate\\n        // x is utilization\\n        // m = slope (m can also be negative for declining rates)\\n        // c is constant (c can be negative)\\n\\n        uint256 y1_;\\n        uint256 y2_;\\n        uint256 x1_;\\n        uint256 x2_;\\n\\n        // extract kink1: 16 bits (0xFFFF) starting from bit 20\\n        // kink is in 1e2, same as utilization, so no conversion needed for direct comparison of the two\\n        uint256 kink1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_UTILIZATION_AT_KINK) & X16;\\n        if (utilization_ < kink1_) {\\n            // if utilization is less than kink\\n            y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_ZERO) & X16;\\n            y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_KINK) & X16;\\n            x1_ = 0; // 0%\\n            x2_ = kink1_;\\n        } else {\\n            // else utilization is greater than kink\\n            y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_KINK) & X16;\\n            y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_MAX) & X16;\\n            x1_ = kink1_;\\n            x2_ = FOUR_DECIMALS; // 100%\\n        }\\n\\n        int256 constant_;\\n        int256 slope_;\\n        unchecked {\\n            // calculating slope with twelve decimal precision. m = (y2 - y1) / (x2 - x1).\\n            // utilization of x2 can not be <= utilization of x1 (so no underflow or 0 divisor)\\n            // y is in 1e2 so can not overflow when multiplied with TWELVE_DECIMALS\\n            slope_ = (int256(y2_ - y1_) * int256(TWELVE_DECIMALS)) / int256((x2_ - x1_));\\n\\n            // calculating constant at 12 decimal precision. slope is already in 12 decimal hence only multiple with y1. c = y - mx.\\n            // maximum y1_ value is 65535. 65535 * 1e12 can not overflow int256\\n            // maximum slope is 65535 - 0 * TWELVE_DECIMALS / 1 = 65535 * 1e12;\\n            // maximum x1_ is 100% (9_999 actually) => slope_ * x1_ can not overflow int256\\n            // subtraction most extreme case would be  0 - max value slope_ * x1_ => can not underflow int256\\n            constant_ = int256(y1_ * TWELVE_DECIMALS) - (slope_ * int256(x1_));\\n\\n            // calculating new borrow rate\\n            // - slope_ max value is 65535 * 1e12,\\n            // - utilization max value is let's say 500% (extreme case where borrow rate increases borrow amount without new supply)\\n            // - constant max value is 65535 * 1e12\\n            // so max values are 65535 * 1e12 * 50_000 + 65535 * 1e12 -> 3.2768*10^21, which easily fits int256\\n            // divisor TWELVE_DECIMALS can not be 0\\n            slope_ = (slope_ * int256(utilization_)) + constant_; // reusing `slope_` as variable for gas savings\\n            if (slope_ < 0) {\\n                revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__BorrowRateNegative);\\n            }\\n            rate_ = uint256(slope_) / TWELVE_DECIMALS;\\n        }\\n    }\\n\\n    /// @dev calculates the borrow rate based on utilization for rate data version 2 (with two kinks) in 1e4 precision\\n    /// @param rateData_ rate data packed uint256 from storage for the token\\n    /// @param utilization_  in 1e2 (100% = 1e4)\\n    /// @return rate_ rate in 1e4 precision\\n    function calcRateV2(uint256 rateData_, uint256 utilization_) internal pure returns (uint256 rate_) {\\n        /// For rate v2 (two kinks) -----------------------------------------------------\\n        /// Next 16  bits =>  4 - 19 => Rate at utilization 0% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  20- 35 => Utilization at kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  36- 51 => Rate at utilization kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  52- 67 => Utilization at kink2 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  68- 83 => Rate at utilization kink2 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  84- 99 => Rate at utilization 100% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Last 156 bits => 100-255 => blank, might come in use in future\\n\\n        // y = mx + c.\\n        // y is borrow rate\\n        // x is utilization\\n        // m = slope (m can also be negative for declining rates)\\n        // c is constant (c can be negative)\\n\\n        uint256 y1_;\\n        uint256 y2_;\\n        uint256 x1_;\\n        uint256 x2_;\\n\\n        // extract kink1: 16 bits (0xFFFF) starting from bit 20\\n        // kink is in 1e2, same as utilization, so no conversion needed for direct comparison of the two\\n        uint256 kink1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_UTILIZATION_AT_KINK1) & X16;\\n        if (utilization_ < kink1_) {\\n            // if utilization is less than kink1\\n            y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_ZERO) & X16;\\n            y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK1) & X16;\\n            x1_ = 0; // 0%\\n            x2_ = kink1_;\\n        } else {\\n            // extract kink2: 16 bits (0xFFFF) starting from bit 52\\n            uint256 kink2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_UTILIZATION_AT_KINK2) & X16;\\n            if (utilization_ < kink2_) {\\n                // if utilization is less than kink2\\n                y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK1) & X16;\\n                y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK2) & X16;\\n                x1_ = kink1_;\\n                x2_ = kink2_;\\n            } else {\\n                // else utilization is greater than kink2\\n                y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK2) & X16;\\n                y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_MAX) & X16;\\n                x1_ = kink2_;\\n                x2_ = FOUR_DECIMALS;\\n            }\\n        }\\n\\n        int256 constant_;\\n        int256 slope_;\\n        unchecked {\\n            // calculating slope with twelve decimal precision. m = (y2 - y1) / (x2 - x1).\\n            // utilization of x2 can not be <= utilization of x1 (so no underflow or 0 divisor)\\n            // y is in 1e2 so can not overflow when multiplied with TWELVE_DECIMALS\\n            slope_ = (int256(y2_ - y1_) * int256(TWELVE_DECIMALS)) / int256((x2_ - x1_));\\n\\n            // calculating constant at 12 decimal precision. slope is already in 12 decimal hence only multiple with y1. c = y - mx.\\n            // maximum y1_ value is 65535. 65535 * 1e12 can not overflow int256\\n            // maximum slope is 65535 - 0 * TWELVE_DECIMALS / 1 = 65535 * 1e12;\\n            // maximum x1_ is 100% (9_999 actually) => slope_ * x1_ can not overflow int256\\n            // subtraction most extreme case would be  0 - max value slope_ * x1_ => can not underflow int256\\n            constant_ = int256(y1_ * TWELVE_DECIMALS) - (slope_ * int256(x1_));\\n\\n            // calculating new borrow rate\\n            // - slope_ max value is 65535 * 1e12,\\n            // - utilization max value is let's say 500% (extreme case where borrow rate increases borrow amount without new supply)\\n            // - constant max value is 65535 * 1e12\\n            // so max values are 65535 * 1e12 * 50_000 + 65535 * 1e12 -> 3.2768*10^21, which easily fits int256\\n            // divisor TWELVE_DECIMALS can not be 0\\n            slope_ = (slope_ * int256(utilization_)) + constant_; // reusing `slope_` as variable for gas savings\\n            if (slope_ < 0) {\\n                revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__BorrowRateNegative);\\n            }\\n            rate_ = uint256(slope_) / TWELVE_DECIMALS;\\n        }\\n    }\\n\\n    /// @dev reads the total supply out of Liquidity packed storage `totalAmounts_` for `supplyExchangePrice_`\\n    function getTotalSupply(\\n        uint256 totalAmounts_,\\n        uint256 supplyExchangePrice_\\n    ) internal pure returns (uint256 totalSupply_) {\\n        // totalSupply_ => supplyInterestFree\\n        totalSupply_ = (totalAmounts_ >> LiquiditySlotsLink.BITS_TOTAL_AMOUNTS_SUPPLY_INTEREST_FREE) & X64;\\n        totalSupply_ = (totalSupply_ >> DEFAULT_EXPONENT_SIZE) << (totalSupply_ & DEFAULT_EXPONENT_MASK);\\n\\n        uint256 totalSupplyRaw_ = totalAmounts_ & X64; // no shifting as supplyRaw is first 64 bits\\n        totalSupplyRaw_ = (totalSupplyRaw_ >> DEFAULT_EXPONENT_SIZE) << (totalSupplyRaw_ & DEFAULT_EXPONENT_MASK);\\n\\n        // totalSupply = supplyInterestFree + supplyRawInterest normalized from raw\\n        totalSupply_ += ((totalSupplyRaw_ * supplyExchangePrice_) / EXCHANGE_PRICES_PRECISION);\\n    }\\n\\n    /// @dev reads the total borrow out of Liquidity packed storage `totalAmounts_` for `borrowExchangePrice_`\\n    function getTotalBorrow(\\n        uint256 totalAmounts_,\\n        uint256 borrowExchangePrice_\\n    ) internal pure returns (uint256 totalBorrow_) {\\n        // totalBorrow_ => borrowInterestFree\\n        // no & mask needed for borrow interest free as it occupies the last bits in the storage slot\\n        totalBorrow_ = (totalAmounts_ >> LiquiditySlotsLink.BITS_TOTAL_AMOUNTS_BORROW_INTEREST_FREE);\\n        totalBorrow_ = (totalBorrow_ >> DEFAULT_EXPONENT_SIZE) << (totalBorrow_ & DEFAULT_EXPONENT_MASK);\\n\\n        uint256 totalBorrowRaw_ = (totalAmounts_ >> LiquiditySlotsLink.BITS_TOTAL_AMOUNTS_BORROW_WITH_INTEREST) & X64;\\n        totalBorrowRaw_ = (totalBorrowRaw_ >> DEFAULT_EXPONENT_SIZE) << (totalBorrowRaw_ & DEFAULT_EXPONENT_MASK);\\n\\n        // totalBorrow = borrowInterestFree + borrowRawInterest normalized from raw\\n        totalBorrow_ += ((totalBorrowRaw_ * borrowExchangePrice_) / EXCHANGE_PRICES_PRECISION);\\n    }\\n}\",\"versionPragma\":\"0.8.21\"}}}","address":"0x5c380EC6B29e26Da77110f828638e145E495677B","bytecode":"0x60c0604052732386dc45added673317ef068992f19421b481f4c60805234801561002857600080fd5b503060a05260805160a0516126d56100676000396000818161030101526106450152600081816101b901528181610349015261058401526126d56000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063a734f06e116100ad578063bb09d9b711610071578063bb09d9b7146102ab578063bffa7f0f146102c6578063c1892058146102e1578063cc025f7c146102fc578063dca95fbf1461032357600080fd5b8063a734f06e1461022c578063aa98df3914610247578063aaff04931461025a578063b696649514610275578063b788f3a11461029057600080fd5b80636dc0ae22116100f45780636dc0ae22146101995780637aadef8b146101b45780637e2f35fa146101db5780638a1c7364146101f6578063a44855981461021157600080fd5b80630bc9136e1461012657806325ad7f4d146101415780632861c7d114610174578063614619541461018f575b600080fd5b61012e601a81565b6040519081526020015b60405180910390f35b61015c739efde135ca4832abf0408c44c6f5f370eb0f35e881565b6040516001600160a01b039091168152602001610138565b61015c7352aa899454998be5b000ad077a46bbe360f4e49781565b61019761033e565b005b61015c730204cd037b2ec03605cfdfe482d8e257c765fa1b81565b61015c7f000000000000000000000000000000000000000000000000000000000000000081565b61015c73059a94a72951c0ae1cc1ce3bf0db52421bbe821081565b61015c73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d81565b61015c737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b61015c73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b610197610255366004612062565b6103c0565b61015c73cd5fe23c85820f7b72d0926fc9b05b43e359b7ee81565b61015c73264786ef916af64a1db19f513f24a3681734ce9281565b61015c734f6f977acdd1177dcd81ab83074855ecb9c2d49e81565b61015c73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b61015c73a45f7bd6a5ff45d31aace6bcd3d426d9328cea0181565b61015c73dac17f958d2ee523a2206206994597c13d831ec781565b61015c7f000000000000000000000000000000000000000000000000000000000000000081565b61015c739d39a5de30e57443bff2a8307a4256c8797a349781565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103ae5760405162461bcd60e51b815260206004820152601060248201526f3737ba16bb30b634b216b1b0b63632b960811b60448201526064015b60405180910390fd5b6103b6610770565b6103be610799565b565b3373a45f7bd6a5ff45d31aace6bcd3d426d9328cea0114806103f5575033734f6f977acdd1177dcd81ab83074855ecb9c2d49e145b8061041357503073059a94a72951c0ae1cc1ce3bf0db52421bbe8210145b80610431575030739efde135ca4832abf0408c44c6f5f370eb0f35e8145b6104765760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c8b5b9bdd0b585b1b1bddd95960521b60448201526064016103a5565b604080516001808252818301909252600090826020808301908036833701905050905060008267ffffffffffffffff8111156104b4576104b4612022565b6040519080825280602002602001820160405280156104dd578160200160208202803683370190505b50905060008367ffffffffffffffff8111156104fb576104fb612022565b60405190808252806020026020018201604052801561052e57816020015b60608152602001906001900390816105195790505b50905060008467ffffffffffffffff81111561054c5761054c612022565b60405190808252806020026020018201604052801561057f57816020015b606081526020019060019003908161056a5790505b5090507f0000000000000000000000000000000000000000000000000000000000000000846000815181106105b6576105b6612113565b60200260200101906001600160a01b031690816001600160a01b0316815250506000836000815181106105eb576105eb612113565b60200260200101818152505060405180606001604052806024815260200161267c602491398260008151811061062357610623612113565b6020908102919091018101919091526040805160008152918201815261066c917f000000000000000000000000000000000000000000000000000000000000000091810161216f565b6040516020818303038152906040528160008151811061068e5761068e612113565b6020908102919091010152604051636d4ab48d60e11b8152600090730204cd037b2ec03605cfdfe482d8e257c765fa1b9063da95691a906106db9088908890889088908e90600401612281565b6020604051808303816000875af11580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e9190612330565b9050601a81146107675760405162461bcd60e51b815260206004820152601460248201527350524f504f53414c5f49535f4e4f545f53414d4560601b60448201526064016103a5565b50505050505050565b60015b600a81116107965761078481610940565b8061078e8161235f565b915050610773565b50565b60408051600480825260a082019092526000916020820160808036833701905050905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee816000815181106107e4576107e4612113565b60200260200101906001600160a01b031690816001600160a01b031681525050737f39c581f595b53c5cb19bd0b3f8da6c935e2ca08160018151811061082c5761082c612113565b60200260200101906001600160a01b031690816001600160a01b03168152505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb488160028151811061087457610874612113565b60200260200101906001600160a01b031690816001600160a01b03168152505073dac17f958d2ee523a2206206994597c13d831ec7816003815181106108bc576108bc612113565b6001600160a01b039092166020928302919091019091015260405163564315fd60e11b81527352aa899454998be5b000ad077a46bbe360f4e4979063ac862bfa9061090b908490600401612378565b600060405180830381600087803b15801561092557600080fd5b505af1158015610939573d6000803e3d6000fd5b5050505050565b6109b860405180610160016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405163735e935160e11b81526004810183905273324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a290602401602060405180830381865afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c91906123a9565b6001600160a01b0316815273324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d63e6bd26a2610a5c84600a6123c4565b6040518263ffffffff1660e01b8152600401610a7a91815260200190565b602060405180830381865afa158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb91906123a9565b81602001906001600160a01b031690816001600160a01b031681525050600081600001516001600160a01b031663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa158015610b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4191906123e8565b9050600082602001516001600160a01b031663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa158015610b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bac91906123e8565b9050610bc1610bbc85600a6123c4565b61150a565b6001600160a01b031660408401526080810151610bdd906116ab565b60e08601525060c084015260a0810151610bf6906116ab565b610140860152610120850152610100840152608080820151908301516001600160a01b03908116911614610c645760405162461bcd60e51b81526020600482015260156024820152743737ba16b9b0b6b296b9bab838363c96ba37b5b2b760591b60448201526064016103a5565b8060a001516001600160a01b03168260a001516001600160a01b031614610cc55760405162461bcd60e51b81526020600482015260156024820152743737ba16b9b0b6b296b137b93937bb96ba37b5b2b760591b60448201526064016103a5565b604080516001808252818301909252600091816020015b610ce4611f85565b815260200190600190039081610cdc57505060808301518551602087015160c0880151939450610d139361187e565b81600081518110610d2657610d26612113565b60209081029190910101526040516301635db560e11b81527352aa899454998be5b000ad077a46bbe360f4e497906302c6bb6a90610d689084906004016124c5565b600060405180830381600087803b158015610d8257600080fd5b505af1158015610d96573d6000803e3d6000fd5b506000935060019250610da7915050565b604051908082528060200260200182016040528015610de057816020015b610dcd611fd0565b815260200190600190039081610dc55790505b509050610e068260a0015185600001518660200151876101000151886101200151611a1b565b81600081518110610e1957610e19612113565b602090810291909101015260405162dc47c360e11b81527352aa899454998be5b000ad077a46bbe360f4e497906301b88f8690610e5a90849060040161253f565b600060405180830381600087803b158015610e7457600080fd5b505af1158015610e88573d6000803e3d6000fd5b50505050506000610e9c8460000151611b74565b905083604001516001600160a01b0316638e7bfbc06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f049190612330565b8161010001516001600160a01b031663e6aa216c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b9190612330565b148015611041575083604001516001600160a01b031663f3190c896040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd99190612330565b84604001516001600160a01b0316638e7bfbc06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f9190612330565b145b61108d5760405162461bcd60e51b815260206004820181905260248201527f6f7261636c652065786368616e67655072696365206973206e6f742073616d6560448201526064016103a5565b6020808501518251918301516040808501516060860151608087015160a088015160c089015160e08a015195516354b04ef560e01b815261ffff998a16600482015296891660248801529388166044870152918716606486015286166084850152851660a4840152841660c48301529290921660e48301526001600160a01b0316906354b04ef59061010401600060405180830381600087803b15801561113357600080fd5b505af1158015611147573d6000803e3d6000fd5b5050506020850151604080870151905163072d137f60e21b81526001600160a01b03918216600482015291169250631cb44dfc9150602401600060405180830381600087803b15801561119957600080fd5b505af11580156111ad573d6000803e3d6000fd5b505050602084015160405163b046a44960e01b815273264786ef916af64a1db19f513f24a3681734ce9260048201526001600160a01b03909116915063b046a44990602401600060405180830381600087803b15801561120c57600080fd5b505af1158015611220573d6000803e3d6000fd5b5050505060008360e001516000148061123c5750610140840151155b61124757600261124a565b60015b60ff16905060008167ffffffffffffffff81111561126a5761126a612022565b604051908082528060200260200182016040528015611293578160200160208202803683370190505b5060608601528167ffffffffffffffff8111156112b2576112b2612022565b6040519080825280602002602001820160405280156112db578160200160208202803683370190505b5060808601528167ffffffffffffffff8111156112fa576112fa612022565b604051908082528060200260200182016040528015611323578160200160208202803683370190505b5060a086015260e0850151156113dd5784602001518560600151828151811061134e5761134e612113565b60200260200101906001600160a01b031690816001600160a01b03168152505082608001518560800151828151811061138957611389612113565b60200260200101906001600160a01b031690816001600160a01b0316815250508460e001518560a0015182815181106113c4576113c4612113565b6020908102919091010152806113d98161235f565b9150505b610140850151156114875784602001518560600151828151811061140357611403612113565b60200260200101906001600160a01b031690816001600160a01b0316815250508260a001518560800151828151811061143e5761143e612113565b60200260200101906001600160a01b031690816001600160a01b0316815250508461014001518560a00151828151811061147a5761147a612113565b6020026020010181815250505b6060850151608086015160a08701516040516303e8046160e01b815273264786ef916af64a1db19f513f24a3681734ce92936303e80461936114d09391929091906004016125c3565b600060405180830381600087803b1580156114ea57600080fd5b505af11580156114fe573d6000803e3d6000fd5b50505050505050505050565b600081600b0361152f5750735b2860c6d6f888319c752aacdaf8165c21095e3a919050565b81600c036115525750737ea20e1fb456af31c6425813bffd4ef6e0a4c86e919050565b81600d03611575575073ade0948e2431defb87e75760e94f190cbf35e95b919050565b81600e03611598575073c5911fa3917c507fbebab910c8b47cbdd3ce147e919050565b81600f036115bb57507338ae6fa3d6376d86d1ee591364cd4b45c99ade22919050565b816010036115de575073ea0c58be3133cb7f035facf45cb1d4f84cf178b4919050565b8160110361160157507372db9b7bd2b0bc282708e85e16123023b32de6a9919050565b8160120361162457507372db9b7bd2b0bc282708e85e16123023b32de6a9919050565b81601303611647575073da8a70b9533debe425f8a3b2b33bc09c0415e5fe919050565b8160140361166a57507332ee0cb3587c6e9f8ad2a0cf83b6cf326848b7c6919050565b60405162461bcd60e51b81526020600482015260116024820152706e6f206f7261636c65206164647265737360781b60448201526064016103a5565b919050565b6000808073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038516016116f257506729a2241af62c00009150673782dace9d90000090506000611877565b737f39c581f595b53c5cb19bd0b3f8da6c935e2c9f196001600160a01b0385160161173b5750672055d2a7b6a9000091506730927f74c9de00009050666a94d74f430000611877565b73cd5fe23c85820f7b72d0926fc9b05b43e359b7ed196001600160a01b0385160161178457506724150e398004000091506736d138126ecb00009050666a94d74f430000611877565b6001600160a01b03841673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4814806117cb57506001600160a01b03841673dac17f958d2ee523a2206206994597c13d831ec7145b156117eb57506402540be400915064037e11d60090506305f5e100611877565b739d39a5de30e57443bff2a8307a4256c8797a3496196001600160a01b0385160161183a57506901f2bba5d84f99c0000091506902f1854022a4c9b00000905068056bc75e2d63100000611877565b60405162461bcd60e51b81526020600482015260126024820152711b9bc8185b1b1bddd85b98d948199bdd5b9960721b60448201526064016103a5565b9193909250565b611886611f85565b60007352aa899454998be5b000ad077a46bbe360f4e49763b5c736e46118ae6008888a611cf2565b6040518263ffffffff1660e01b81526004016118cc91815260200190565b602060405180830381865afa1580156118e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190d9190612330565b9050600061199d7352aa899454998be5b000ad077a46bbe360f4e49763b5c736e461193960058b611d52565b6040518263ffffffff1660e01b815260040161195791815260200190565b602060405180830381865afa158015611974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119989190612330565b611d90565b5090506040518060c00160405280866001600160a01b03168152602001886001600160a01b031681526020018360011660ff168152602001613fff60a285901c16815260200162ffffff60b085901c168152602001828664e8d4a51000611a049190612606565b611a0e9190612633565b9052979650505050505050565b611a23611fd0565b60007352aa899454998be5b000ad077a46bbe360f4e49763b5c736e4611a4b6009898b611cf2565b6040518263ffffffff1660e01b8152600401611a6991815260200190565b602060405180830381865afa158015611a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aaa9190612330565b90506000611ad67352aa899454998be5b000ad077a46bbe360f4e49763b5c736e461193960058c611d52565b9150506040518060e00160405280876001600160a01b03168152602001896001600160a01b031681526020018360011660ff168152602001613fff60a285901c16815260200162ffffff60b085901c168152602001828764e8d4a51000611b3d9190612606565b611b479190612633565b815260200182611b5c8764e8d4a51000612606565b611b669190612633565b905298975050505050505050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152604051632d71cdb960e21b8152600160048201526000906001600160a01b0384169063b5c736e490602401602060405180830381865afa158015611c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c419190612330565b61ffff8082168452601082901c16602080850191909152909150611c6d9082901c6103ff16600a612655565b61ffff166040830152611c89602a82901c6103ff16600a612655565b61ffff166060830152611ca5603482901c6103ff16600a612655565b61ffff166080830152611cc1603e82901c6103ff16600a612655565b61ffff1660a08301526103ff604882901c811660c0840152605282901c1660e083015260601c610100820152919050565b604080516001600160a01b039384166020808301919091528183019590955281518082038301815260608201835280519086012092909316608084015260a0808401929092528051808403909201825260c0909201909152805191012090565b604080516001600160a01b03831660208201529081018390526000906060016040516020818303038152906040528051906020012090505b92915050565b67ffffffffffffffff605b82901c811690609b83901c16811580611db2575080155b15611dd557604051636a86ba8960e11b81526201117160048201526024016103a5565b61ffff8316603a84901c6401ffffffff16428181039160ea87901c617fff16911480611dff575082155b80611e0a5750806001145b15611e1757505050915091565b64496cebb80084840283020484019350617fff60db87901c16925082600103611e4257505050915091565b82600116600103611e975760019290921c91826c7e37be2022c0914b268000000081611e7057611e7061261d565b049250612710601e87901c613fff166b033b2e3c9fd0803ce8000000850102049250611ec4565b60019290921c916305f5e100601e87901c613fff166127108501026b033b2e3c9fd0803ce8000000020492505b80600116600103611efb5760011c61271081016b033b2e3c9fd0803ce8000000820281611ef357611ef361261d565b049050611f31565b60011c61271081016b033b2e3c9fd0803ce8000000820281611f1f57611f1f61261d565b046b033b2e3c9fd0803ce80000000390505b760a70c3c40a64e6c51999090b65f67d92400000000000008382026127100261ffff881691900402601087901c613fff16612710030292506801b5a660ea44b8000085840283020485019450505050915091565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600060ff1681526020016000815260200160008152602001600081525090565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600060ff168152602001600081526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff8111828210171561205c5761205c612022565b60405290565b60006020828403121561207457600080fd5b813567ffffffffffffffff8082111561208c57600080fd5b818401915084601f8301126120a057600080fd5b8135818111156120b2576120b2612022565b604051601f8201601f19908116603f011681019083821181831017156120da576120da612022565b816040528281528760208487010111156120f357600080fd5b826020860160208301376000928101602001929092525095945050505050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561214f57602081850181015186830182015201612133565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b038316815260606020820152600960608201526865786563757465282960b81b608082015260a0604082015260006121b060a0830184612129565b949350505050565b600081518084526020808501945080840160005b838110156121f15781516001600160a01b0316875295820195908201906001016121cc565b509495945050505050565b600081518084526020808501945080840160005b838110156121f157815187529582019590820190600101612210565b600081518084526020808501808196508360051b8101915082860160005b85811015612274578284038952612262848351612129565b9885019893509084019060010161224a565b5091979650505050505050565b60a08152600061229460a08301886121b8565b6020838203818501526122a782896121fc565b915083820360408501528187518084528284019150828160051b850101838a0160005b838110156122f857601f198784030185526122e6838351612129565b948601949250908501906001016122ca565b5050868103606088015261230c818a61222c565b94505050505082810360808401526123248185612129565b98975050505050505050565b60006020828403121561234257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161237157612371612349565b5060010190565b60208152600061238b60208301846121b8565b9392505050565b80516001600160a01b03811681146116a657600080fd5b6000602082840312156123bb57600080fd5b61238b82612392565b80820180821115611d8a57611d8a612349565b805160ff811681146116a657600080fd5b60006101a082840312156123fb57600080fd5b612403612038565b61240c83612392565b815261241a60208401612392565b602082015261242b60408401612392565b604082015261243c60608401612392565b606082015261244d60808401612392565b608082015261245e60a08401612392565b60a082015261246f60c084016123d7565b60c082015261248060e084016123d7565b60e08201526101008381015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b602080825282518282018190526000919060409081850190868401855b8281101561227457815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0908101519085015260c090930192908501906001016124e2565b602080825282518282018190526000919060409081850190868401855b8281101561227457815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0808201519086015260c0908101519085015260e0909301929085019060010161255c565b6060815260006125d660608301866121b8565b82810360208401526125e881866121b8565b905082810360408401526125fc81856121fc565b9695505050505050565b8082028115828204841417611d8a57611d8a612349565b634e487b7160e01b600052601260045260246000fd5b60008261265057634e487b7160e01b600052601260045260246000fd5b500490565b61ffff81811683821602808216919082811461267357612673612349565b50509291505056fe657865637574655061796c6f616428616464726573732c737472696e672c627974657329a2646970667358221220a3358fded563927772adc2665fd55b3790da905ed935e28d5dc85f8aad9c0d0664736f6c63430008150033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101215760003560e01c8063a734f06e116100ad578063bb09d9b711610071578063bb09d9b7146102ab578063bffa7f0f146102c6578063c1892058146102e1578063cc025f7c146102fc578063dca95fbf1461032357600080fd5b8063a734f06e1461022c578063aa98df3914610247578063aaff04931461025a578063b696649514610275578063b788f3a11461029057600080fd5b80636dc0ae22116100f45780636dc0ae22146101995780637aadef8b146101b45780637e2f35fa146101db5780638a1c7364146101f6578063a44855981461021157600080fd5b80630bc9136e1461012657806325ad7f4d146101415780632861c7d114610174578063614619541461018f575b600080fd5b61012e601a81565b6040519081526020015b60405180910390f35b61015c739efde135ca4832abf0408c44c6f5f370eb0f35e881565b6040516001600160a01b039091168152602001610138565b61015c7352aa899454998be5b000ad077a46bbe360f4e49781565b61019761033e565b005b61015c730204cd037b2ec03605cfdfe482d8e257c765fa1b81565b61015c7f000000000000000000000000000000000000000000000000000000000000000081565b61015c73059a94a72951c0ae1cc1ce3bf0db52421bbe821081565b61015c73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d81565b61015c737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b61015c73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b610197610255366004612062565b6103c0565b61015c73cd5fe23c85820f7b72d0926fc9b05b43e359b7ee81565b61015c73264786ef916af64a1db19f513f24a3681734ce9281565b61015c734f6f977acdd1177dcd81ab83074855ecb9c2d49e81565b61015c73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b61015c73a45f7bd6a5ff45d31aace6bcd3d426d9328cea0181565b61015c73dac17f958d2ee523a2206206994597c13d831ec781565b61015c7f000000000000000000000000000000000000000000000000000000000000000081565b61015c739d39a5de30e57443bff2a8307a4256c8797a349781565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103ae5760405162461bcd60e51b815260206004820152601060248201526f3737ba16bb30b634b216b1b0b63632b960811b60448201526064015b60405180910390fd5b6103b6610770565b6103be610799565b565b3373a45f7bd6a5ff45d31aace6bcd3d426d9328cea0114806103f5575033734f6f977acdd1177dcd81ab83074855ecb9c2d49e145b8061041357503073059a94a72951c0ae1cc1ce3bf0db52421bbe8210145b80610431575030739efde135ca4832abf0408c44c6f5f370eb0f35e8145b6104765760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c8b5b9bdd0b585b1b1bddd95960521b60448201526064016103a5565b604080516001808252818301909252600090826020808301908036833701905050905060008267ffffffffffffffff8111156104b4576104b4612022565b6040519080825280602002602001820160405280156104dd578160200160208202803683370190505b50905060008367ffffffffffffffff8111156104fb576104fb612022565b60405190808252806020026020018201604052801561052e57816020015b60608152602001906001900390816105195790505b50905060008467ffffffffffffffff81111561054c5761054c612022565b60405190808252806020026020018201604052801561057f57816020015b606081526020019060019003908161056a5790505b5090507f0000000000000000000000000000000000000000000000000000000000000000846000815181106105b6576105b6612113565b60200260200101906001600160a01b031690816001600160a01b0316815250506000836000815181106105eb576105eb612113565b60200260200101818152505060405180606001604052806024815260200161267c602491398260008151811061062357610623612113565b6020908102919091018101919091526040805160008152918201815261066c917f000000000000000000000000000000000000000000000000000000000000000091810161216f565b6040516020818303038152906040528160008151811061068e5761068e612113565b6020908102919091010152604051636d4ab48d60e11b8152600090730204cd037b2ec03605cfdfe482d8e257c765fa1b9063da95691a906106db9088908890889088908e90600401612281565b6020604051808303816000875af11580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e9190612330565b9050601a81146107675760405162461bcd60e51b815260206004820152601460248201527350524f504f53414c5f49535f4e4f545f53414d4560601b60448201526064016103a5565b50505050505050565b60015b600a81116107965761078481610940565b8061078e8161235f565b915050610773565b50565b60408051600480825260a082019092526000916020820160808036833701905050905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee816000815181106107e4576107e4612113565b60200260200101906001600160a01b031690816001600160a01b031681525050737f39c581f595b53c5cb19bd0b3f8da6c935e2ca08160018151811061082c5761082c612113565b60200260200101906001600160a01b031690816001600160a01b03168152505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb488160028151811061087457610874612113565b60200260200101906001600160a01b031690816001600160a01b03168152505073dac17f958d2ee523a2206206994597c13d831ec7816003815181106108bc576108bc612113565b6001600160a01b039092166020928302919091019091015260405163564315fd60e11b81527352aa899454998be5b000ad077a46bbe360f4e4979063ac862bfa9061090b908490600401612378565b600060405180830381600087803b15801561092557600080fd5b505af1158015610939573d6000803e3d6000fd5b5050505050565b6109b860405180610160016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405163735e935160e11b81526004810183905273324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a290602401602060405180830381865afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c91906123a9565b6001600160a01b0316815273324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d63e6bd26a2610a5c84600a6123c4565b6040518263ffffffff1660e01b8152600401610a7a91815260200190565b602060405180830381865afa158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb91906123a9565b81602001906001600160a01b031690816001600160a01b031681525050600081600001516001600160a01b031663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa158015610b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4191906123e8565b9050600082602001516001600160a01b031663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa158015610b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bac91906123e8565b9050610bc1610bbc85600a6123c4565b61150a565b6001600160a01b031660408401526080810151610bdd906116ab565b60e08601525060c084015260a0810151610bf6906116ab565b610140860152610120850152610100840152608080820151908301516001600160a01b03908116911614610c645760405162461bcd60e51b81526020600482015260156024820152743737ba16b9b0b6b296b9bab838363c96ba37b5b2b760591b60448201526064016103a5565b8060a001516001600160a01b03168260a001516001600160a01b031614610cc55760405162461bcd60e51b81526020600482015260156024820152743737ba16b9b0b6b296b137b93937bb96ba37b5b2b760591b60448201526064016103a5565b604080516001808252818301909252600091816020015b610ce4611f85565b815260200190600190039081610cdc57505060808301518551602087015160c0880151939450610d139361187e565b81600081518110610d2657610d26612113565b60209081029190910101526040516301635db560e11b81527352aa899454998be5b000ad077a46bbe360f4e497906302c6bb6a90610d689084906004016124c5565b600060405180830381600087803b158015610d8257600080fd5b505af1158015610d96573d6000803e3d6000fd5b506000935060019250610da7915050565b604051908082528060200260200182016040528015610de057816020015b610dcd611fd0565b815260200190600190039081610dc55790505b509050610e068260a0015185600001518660200151876101000151886101200151611a1b565b81600081518110610e1957610e19612113565b602090810291909101015260405162dc47c360e11b81527352aa899454998be5b000ad077a46bbe360f4e497906301b88f8690610e5a90849060040161253f565b600060405180830381600087803b158015610e7457600080fd5b505af1158015610e88573d6000803e3d6000fd5b50505050506000610e9c8460000151611b74565b905083604001516001600160a01b0316638e7bfbc06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f049190612330565b8161010001516001600160a01b031663e6aa216c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b9190612330565b148015611041575083604001516001600160a01b031663f3190c896040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd99190612330565b84604001516001600160a01b0316638e7bfbc06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f9190612330565b145b61108d5760405162461bcd60e51b815260206004820181905260248201527f6f7261636c652065786368616e67655072696365206973206e6f742073616d6560448201526064016103a5565b6020808501518251918301516040808501516060860151608087015160a088015160c089015160e08a015195516354b04ef560e01b815261ffff998a16600482015296891660248801529388166044870152918716606486015286166084850152851660a4840152841660c48301529290921660e48301526001600160a01b0316906354b04ef59061010401600060405180830381600087803b15801561113357600080fd5b505af1158015611147573d6000803e3d6000fd5b5050506020850151604080870151905163072d137f60e21b81526001600160a01b03918216600482015291169250631cb44dfc9150602401600060405180830381600087803b15801561119957600080fd5b505af11580156111ad573d6000803e3d6000fd5b505050602084015160405163b046a44960e01b815273264786ef916af64a1db19f513f24a3681734ce9260048201526001600160a01b03909116915063b046a44990602401600060405180830381600087803b15801561120c57600080fd5b505af1158015611220573d6000803e3d6000fd5b5050505060008360e001516000148061123c5750610140840151155b61124757600261124a565b60015b60ff16905060008167ffffffffffffffff81111561126a5761126a612022565b604051908082528060200260200182016040528015611293578160200160208202803683370190505b5060608601528167ffffffffffffffff8111156112b2576112b2612022565b6040519080825280602002602001820160405280156112db578160200160208202803683370190505b5060808601528167ffffffffffffffff8111156112fa576112fa612022565b604051908082528060200260200182016040528015611323578160200160208202803683370190505b5060a086015260e0850151156113dd5784602001518560600151828151811061134e5761134e612113565b60200260200101906001600160a01b031690816001600160a01b03168152505082608001518560800151828151811061138957611389612113565b60200260200101906001600160a01b031690816001600160a01b0316815250508460e001518560a0015182815181106113c4576113c4612113565b6020908102919091010152806113d98161235f565b9150505b610140850151156114875784602001518560600151828151811061140357611403612113565b60200260200101906001600160a01b031690816001600160a01b0316815250508260a001518560800151828151811061143e5761143e612113565b60200260200101906001600160a01b031690816001600160a01b0316815250508461014001518560a00151828151811061147a5761147a612113565b6020026020010181815250505b6060850151608086015160a08701516040516303e8046160e01b815273264786ef916af64a1db19f513f24a3681734ce92936303e80461936114d09391929091906004016125c3565b600060405180830381600087803b1580156114ea57600080fd5b505af11580156114fe573d6000803e3d6000fd5b50505050505050505050565b600081600b0361152f5750735b2860c6d6f888319c752aacdaf8165c21095e3a919050565b81600c036115525750737ea20e1fb456af31c6425813bffd4ef6e0a4c86e919050565b81600d03611575575073ade0948e2431defb87e75760e94f190cbf35e95b919050565b81600e03611598575073c5911fa3917c507fbebab910c8b47cbdd3ce147e919050565b81600f036115bb57507338ae6fa3d6376d86d1ee591364cd4b45c99ade22919050565b816010036115de575073ea0c58be3133cb7f035facf45cb1d4f84cf178b4919050565b8160110361160157507372db9b7bd2b0bc282708e85e16123023b32de6a9919050565b8160120361162457507372db9b7bd2b0bc282708e85e16123023b32de6a9919050565b81601303611647575073da8a70b9533debe425f8a3b2b33bc09c0415e5fe919050565b8160140361166a57507332ee0cb3587c6e9f8ad2a0cf83b6cf326848b7c6919050565b60405162461bcd60e51b81526020600482015260116024820152706e6f206f7261636c65206164647265737360781b60448201526064016103a5565b919050565b6000808073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038516016116f257506729a2241af62c00009150673782dace9d90000090506000611877565b737f39c581f595b53c5cb19bd0b3f8da6c935e2c9f196001600160a01b0385160161173b5750672055d2a7b6a9000091506730927f74c9de00009050666a94d74f430000611877565b73cd5fe23c85820f7b72d0926fc9b05b43e359b7ed196001600160a01b0385160161178457506724150e398004000091506736d138126ecb00009050666a94d74f430000611877565b6001600160a01b03841673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4814806117cb57506001600160a01b03841673dac17f958d2ee523a2206206994597c13d831ec7145b156117eb57506402540be400915064037e11d60090506305f5e100611877565b739d39a5de30e57443bff2a8307a4256c8797a3496196001600160a01b0385160161183a57506901f2bba5d84f99c0000091506902f1854022a4c9b00000905068056bc75e2d63100000611877565b60405162461bcd60e51b81526020600482015260126024820152711b9bc8185b1b1bddd85b98d948199bdd5b9960721b60448201526064016103a5565b9193909250565b611886611f85565b60007352aa899454998be5b000ad077a46bbe360f4e49763b5c736e46118ae6008888a611cf2565b6040518263ffffffff1660e01b81526004016118cc91815260200190565b602060405180830381865afa1580156118e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190d9190612330565b9050600061199d7352aa899454998be5b000ad077a46bbe360f4e49763b5c736e461193960058b611d52565b6040518263ffffffff1660e01b815260040161195791815260200190565b602060405180830381865afa158015611974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119989190612330565b611d90565b5090506040518060c00160405280866001600160a01b03168152602001886001600160a01b031681526020018360011660ff168152602001613fff60a285901c16815260200162ffffff60b085901c168152602001828664e8d4a51000611a049190612606565b611a0e9190612633565b9052979650505050505050565b611a23611fd0565b60007352aa899454998be5b000ad077a46bbe360f4e49763b5c736e4611a4b6009898b611cf2565b6040518263ffffffff1660e01b8152600401611a6991815260200190565b602060405180830381865afa158015611a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aaa9190612330565b90506000611ad67352aa899454998be5b000ad077a46bbe360f4e49763b5c736e461193960058c611d52565b9150506040518060e00160405280876001600160a01b03168152602001896001600160a01b031681526020018360011660ff168152602001613fff60a285901c16815260200162ffffff60b085901c168152602001828764e8d4a51000611b3d9190612606565b611b479190612633565b815260200182611b5c8764e8d4a51000612606565b611b669190612633565b905298975050505050505050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152604051632d71cdb960e21b8152600160048201526000906001600160a01b0384169063b5c736e490602401602060405180830381865afa158015611c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c419190612330565b61ffff8082168452601082901c16602080850191909152909150611c6d9082901c6103ff16600a612655565b61ffff166040830152611c89602a82901c6103ff16600a612655565b61ffff166060830152611ca5603482901c6103ff16600a612655565b61ffff166080830152611cc1603e82901c6103ff16600a612655565b61ffff1660a08301526103ff604882901c811660c0840152605282901c1660e083015260601c610100820152919050565b604080516001600160a01b039384166020808301919091528183019590955281518082038301815260608201835280519086012092909316608084015260a0808401929092528051808403909201825260c0909201909152805191012090565b604080516001600160a01b03831660208201529081018390526000906060016040516020818303038152906040528051906020012090505b92915050565b67ffffffffffffffff605b82901c811690609b83901c16811580611db2575080155b15611dd557604051636a86ba8960e11b81526201117160048201526024016103a5565b61ffff8316603a84901c6401ffffffff16428181039160ea87901c617fff16911480611dff575082155b80611e0a5750806001145b15611e1757505050915091565b64496cebb80084840283020484019350617fff60db87901c16925082600103611e4257505050915091565b82600116600103611e975760019290921c91826c7e37be2022c0914b268000000081611e7057611e7061261d565b049250612710601e87901c613fff166b033b2e3c9fd0803ce8000000850102049250611ec4565b60019290921c916305f5e100601e87901c613fff166127108501026b033b2e3c9fd0803ce8000000020492505b80600116600103611efb5760011c61271081016b033b2e3c9fd0803ce8000000820281611ef357611ef361261d565b049050611f31565b60011c61271081016b033b2e3c9fd0803ce8000000820281611f1f57611f1f61261d565b046b033b2e3c9fd0803ce80000000390505b760a70c3c40a64e6c51999090b65f67d92400000000000008382026127100261ffff881691900402601087901c613fff16612710030292506801b5a660ea44b8000085840283020485019450505050915091565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600060ff1681526020016000815260200160008152602001600081525090565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600060ff168152602001600081526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff8111828210171561205c5761205c612022565b60405290565b60006020828403121561207457600080fd5b813567ffffffffffffffff8082111561208c57600080fd5b818401915084601f8301126120a057600080fd5b8135818111156120b2576120b2612022565b604051601f8201601f19908116603f011681019083821181831017156120da576120da612022565b816040528281528760208487010111156120f357600080fd5b826020860160208301376000928101602001929092525095945050505050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561214f57602081850181015186830182015201612133565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b038316815260606020820152600960608201526865786563757465282960b81b608082015260a0604082015260006121b060a0830184612129565b949350505050565b600081518084526020808501945080840160005b838110156121f15781516001600160a01b0316875295820195908201906001016121cc565b509495945050505050565b600081518084526020808501945080840160005b838110156121f157815187529582019590820190600101612210565b600081518084526020808501808196508360051b8101915082860160005b85811015612274578284038952612262848351612129565b9885019893509084019060010161224a565b5091979650505050505050565b60a08152600061229460a08301886121b8565b6020838203818501526122a782896121fc565b915083820360408501528187518084528284019150828160051b850101838a0160005b838110156122f857601f198784030185526122e6838351612129565b948601949250908501906001016122ca565b5050868103606088015261230c818a61222c565b94505050505082810360808401526123248185612129565b98975050505050505050565b60006020828403121561234257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161237157612371612349565b5060010190565b60208152600061238b60208301846121b8565b9392505050565b80516001600160a01b03811681146116a657600080fd5b6000602082840312156123bb57600080fd5b61238b82612392565b80820180821115611d8a57611d8a612349565b805160ff811681146116a657600080fd5b60006101a082840312156123fb57600080fd5b612403612038565b61240c83612392565b815261241a60208401612392565b602082015261242b60408401612392565b604082015261243c60608401612392565b606082015261244d60808401612392565b608082015261245e60a08401612392565b60a082015261246f60c084016123d7565b60c082015261248060e084016123d7565b60e08201526101008381015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b602080825282518282018190526000919060409081850190868401855b8281101561227457815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0908101519085015260c090930192908501906001016124e2565b602080825282518282018190526000919060409081850190868401855b8281101561227457815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0808201519086015260c0908101519085015260e0909301929085019060010161255c565b6060815260006125d660608301866121b8565b82810360208401526125e881866121b8565b905082810360408401526125fc81856121fc565b9695505050505050565b8082028115828204841417611d8a57611d8a612349565b634e487b7160e01b600052601260045260246000fd5b60008261265057634e487b7160e01b600052601260045260246000fd5b500490565b61ffff81811683821602808216919082811461267357612673612349565b50509291505056fe657865637574655061796c6f616428616464726573732c737472696e672c627974657329a2646970667358221220a3358fded563927772adc2665fd55b3790da905ed935e28d5dc85f8aad9c0d0664736f6c63430008150033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"errorId_","type":"uint256"}],"name":"FluidLiquidityCalcsError","type":"error"},{"inputs":[],"name":"ADDRESS_THIS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FLUID_RESERVE","outputs":[{"internalType":"contract IFluidReserveContract","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GOVERNOR","outputs":[{"internalType":"contract IGovernorBravo","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LIQUIDITY","outputs":[{"internalType":"contract IFluidLiquidityAdmin","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSAL_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG_2","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TEAM_MULTISIG","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TIMELOCK","outputs":[{"internalType":"contract ITimelock","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"USDC_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"USDT_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VAULT_T1_FACTORY","outputs":[{"internalType":"contract IFluidVaultT1Factory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"execute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"description","type":"string"}],"name":"propose","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"sUSDe_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"weETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wstETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}