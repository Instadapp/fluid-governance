{"metadata":"{\"defaultCompiler\":{\"version\":\"0.7.3\"},\"sources\":{\"contracts/payloads/IGP35/PayloadIGP35.sol\":{\"content\":\"pragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernorBravo {\\n    function _acceptAdmin() external;\\n\\n    function _setVotingDelay(uint newVotingDelay) external;\\n\\n    function _setVotingPeriod(uint newVotingPeriod) external;\\n\\n    function _acceptAdminOnTimelock() external;\\n\\n    function _setImplementation(address implementation_) external;\\n\\n    function propose(\\n        address[] memory targets,\\n        uint[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) external returns (uint);\\n\\n    function admin() external view returns (address);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function timelock() external view returns (address);\\n\\n    function votingDelay() external view returns (uint256);\\n\\n    function votingPeriod() external view returns (uint256);\\n}\\n\\ninterface ITimelock {\\n    function acceptAdmin() external;\\n\\n    function setDelay(uint delay_) external;\\n\\n    function setPendingAdmin(address pendingAdmin_) external;\\n\\n    function queueTransaction(\\n        address target,\\n        uint value,\\n        string memory signature,\\n        bytes memory data,\\n        uint eta\\n    ) external returns (bytes32);\\n\\n    function executeTransaction(\\n        address target,\\n        uint value,\\n        string memory signature,\\n        bytes memory data,\\n        uint eta\\n    ) external payable returns (bytes memory);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function delay() external view returns (uint256);\\n}\\n\\ninterface AdminModuleStructs {\\n    struct AddressBool {\\n        address addr;\\n        bool value;\\n    }\\n\\n    struct AddressUint256 {\\n        address addr;\\n        uint256 value;\\n    }\\n\\n    struct RateDataV1Params {\\n        address token;\\n        uint256 kink;\\n        uint256 rateAtUtilizationZero;\\n        uint256 rateAtUtilizationKink;\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    struct RateDataV2Params {\\n        address token;\\n        uint256 kink1;\\n        uint256 kink2;\\n        uint256 rateAtUtilizationZero;\\n        uint256 rateAtUtilizationKink1;\\n        uint256 rateAtUtilizationKink2;\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    struct TokenConfig {\\n        address token;\\n        uint256 fee;\\n        uint256 threshold;\\n        uint256 maxUtilization;\\n    }\\n\\n    struct UserSupplyConfig {\\n        address user;\\n        address token;\\n        uint8 mode;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseWithdrawalLimit;\\n    }\\n\\n    struct UserBorrowConfig {\\n        address user;\\n        address token;\\n        uint8 mode;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseDebtCeiling;\\n        uint256 maxDebtCeiling;\\n    }\\n}\\n\\ninterface IFluidVaultT1 {\\n    /// @notice updates the Vault oracle to `newOracle_`. Must implement the FluidOracle interface.\\n    function updateOracle(address newOracle_) external;\\n\\n    /// @notice updates the all Vault core settings according to input params.\\n    /// All input values are expected in 1e2 (1% = 100, 100% = 10_000).\\n    function updateCoreSettings(\\n        uint256 supplyRateMagnifier_,\\n        uint256 borrowRateMagnifier_,\\n        uint256 collateralFactor_,\\n        uint256 liquidationThreshold_,\\n        uint256 liquidationMaxLimit_,\\n        uint256 withdrawGap_,\\n        uint256 liquidationPenalty_,\\n        uint256 borrowFee_\\n    ) external;\\n\\n    /// @notice updates the allowed rebalancer to `newRebalancer_`.\\n    function updateRebalancer(address newRebalancer_) external;\\n\\n    /// @notice updates the supply rate magnifier to `supplyRateMagnifier_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateSupplyRateMagnifier(uint supplyRateMagnifier_) external;\\n    \\n    /// @notice updates the borrow rate magnifier to `borrowRateMagnifier_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateBorrowRateMagnifier(uint borrowRateMagnifier_) external;\\n\\n    /// @notice updates the collateral factor to `collateralFactor_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateCollateralFactor(uint collateralFactor_) external;\\n\\n    /// @notice updates the liquidation threshold to `liquidationThreshold_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateLiquidationThreshold(uint liquidationThreshold_) external;\\n\\n    /// @notice updates the liquidation max limit to `liquidationMaxLimit_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateLiquidationMaxLimit(uint liquidationMaxLimit_) external;\\n\\n    /// @notice updates the withdrawal gap to `withdrawGap_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateWithdrawGap(uint withdrawGap_) external;\\n\\n    /// @notice updates the liquidation penalty to `liquidationPenalty_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateLiquidationPenalty(uint liquidationPenalty_) external;\\n\\n    /// @notice updates the borrow fee to `borrowFee_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateBorrowFee(uint borrowFee_) external;\\n}\\n\\ninterface IProxy {\\n    function setAdmin(address newAdmin_) external;\\n\\n    function setDummyImplementation(address newDummyImplementation_) external;\\n\\n    function addImplementation(\\n        address implementation_,\\n        bytes4[] calldata sigs_\\n    ) external;\\n\\n    function removeImplementation(address implementation_) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function getDummyImplementation() external view returns (address);\\n\\n    function getImplementationSigs(\\n        address impl_\\n    ) external view returns (bytes4[] memory);\\n\\n    function getSigsImplementation(bytes4 sig_) external view returns (address);\\n\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n}\\n\\ninterface ILite {\\n    function setAdmin(address newAdmin) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function removeImplementation(address implementation_) external;\\n\\n    function addImplementation(\\n        address implementation_,\\n        bytes4[] calldata sigs_\\n    ) external;\\n\\n    function setDummyImplementation(address newDummyImplementation_) external;\\n\\n    function updateMaxRiskRatio(\\n        uint8[] memory protocolId_,\\n        uint256[] memory newRiskRatio_\\n    ) external;\\n\\n    function updateAggrMaxVaultRatio(uint256 newAggrMaxVaultRatio_) external;\\n}\\n\\ninterface IDSAV2 {\\n    function cast(\\n        string[] memory _targetNames,\\n        bytes[] memory _datas,\\n        address _origin\\n    ) external payable returns (bytes32);\\n\\n    function isAuth(address user) external view returns (bool);\\n}\\n\\ninterface IFluidVaultT1Factory {\\n    function deployVault(\\n        address vaultDeploymentLogic_,\\n        bytes calldata vaultDeploymentData_\\n    ) external returns (address vault_);\\n\\n    function setVaultAuth(\\n        address vault_,\\n        address vaultAuth_,\\n        bool allowed_\\n    ) external;\\n\\n    function getVaultAddress(\\n        uint256 vaultId_\\n    ) external view returns (address vault_);\\n\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n}\\n\\ninterface IFluidReserveContract {\\n    function isRebalancer(address user) external returns (bool);\\n\\n    function rebalanceFToken(address protocol_) external;\\n\\n    function rebalanceVault(address protocol_) external;\\n\\n    function transferFunds(address token_) external;\\n\\n    function getProtocolTokens(address protocol_) external;\\n\\n    function updateAuth(address auth_, bool isAuth_) external;\\n\\n    function updateRebalancer(address rebalancer_, bool isRebalancer_) external;\\n\\n    function approve(\\n        address[] memory protocols_,\\n        address[] memory tokens_,\\n        uint256[] memory amounts_\\n    ) external;\\n\\n    function revoke(\\n        address[] memory protocols_,\\n        address[] memory tokens_\\n    ) external;\\n}\\n\\ninterface IERC20 {\\n    function allowance(\\n        address spender,\\n        address caller\\n    ) external view returns (uint256);\\n}\\n\\ninterface IFluidLiquidityAdmin {\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n\\n    /// @notice adds/removes auths. Auths generally could be contracts which can have restricted actions defined on contract.\\n    ///         auths can be helpful in reducing governance overhead where it's not needed.\\n    /// @param authsStatus_ array of structs setting allowed status for an address.\\n    ///                     status true => add auth, false => remove auth\\n    function updateAuths(\\n        AdminModuleStructs.AddressBool[] calldata authsStatus_\\n    ) external;\\n\\n    /// @notice adds/removes guardians. Only callable by Governance.\\n    /// @param guardiansStatus_ array of structs setting allowed status for an address.\\n    ///                         status true => add guardian, false => remove guardian\\n    function updateGuardians(\\n        AdminModuleStructs.AddressBool[] calldata guardiansStatus_\\n    ) external;\\n\\n    /// @notice changes the revenue collector address (contract that is sent revenue). Only callable by Governance.\\n    /// @param revenueCollector_  new revenue collector address\\n    function updateRevenueCollector(address revenueCollector_) external;\\n\\n    /// @notice changes current status, e.g. for pausing or unpausing all user operations. Only callable by Auths.\\n    /// @param newStatus_ new status\\n    ///        status = 2 -> pause, status = 1 -> resume.\\n    function changeStatus(uint256 newStatus_) external;\\n\\n    /// @notice                  update tokens rate data version 1. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV1Params with rate data to set for each token\\n    function updateRateDataV1s(\\n        AdminModuleStructs.RateDataV1Params[] calldata tokensRateData_\\n    ) external;\\n\\n    /// @notice                  update tokens rate data version 2. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV2Params with rate data to set for each token\\n    function updateRateDataV2s(\\n        AdminModuleStructs.RateDataV2Params[] calldata tokensRateData_\\n    ) external;\\n\\n    /// @notice updates token configs: fee charge on borrowers interest & storage update utilization threshold.\\n    ///         Only callable by Auths.\\n    /// @param tokenConfigs_ contains token address, fee & utilization threshold\\n    function updateTokenConfigs(\\n        AdminModuleStructs.TokenConfig[] calldata tokenConfigs_\\n    ) external;\\n\\n    /// @notice updates user classes: 0 is for new protocols, 1 is for established protocols.\\n    ///         Only callable by Auths.\\n    /// @param userClasses_ struct array of uint256 value to assign for each user address\\n    function updateUserClasses(\\n        AdminModuleStructs.AddressUint256[] calldata userClasses_\\n    ) external;\\n\\n    /// @notice sets user supply configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userSupplyConfigs_ struct array containing user supply config, see `UserSupplyConfig` struct for more info\\n    function updateUserSupplyConfigs(\\n        AdminModuleStructs.UserSupplyConfig[] memory userSupplyConfigs_\\n    ) external;\\n\\n    /// @notice setting user borrow configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userBorrowConfigs_ struct array containing user borrow config, see `UserBorrowConfig` struct for more info\\n    function updateUserBorrowConfigs(\\n        AdminModuleStructs.UserBorrowConfig[] memory userBorrowConfigs_\\n    ) external;\\n\\n    /// @notice pause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to pause operations for\\n    /// @param supplyTokens_  token addresses to pause withdrawals for\\n    /// @param borrowTokens_  token addresses to pause borrowings for\\n    function pauseUser(\\n        address user_,\\n        address[] calldata supplyTokens_,\\n        address[] calldata borrowTokens_\\n    ) external;\\n\\n    /// @notice unpause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to unpause operations for\\n    /// @param supplyTokens_  token addresses to unpause withdrawals for\\n    /// @param borrowTokens_  token addresses to unpause borrowings for\\n    function unpauseUser(\\n        address user_,\\n        address[] calldata supplyTokens_,\\n        address[] calldata borrowTokens_\\n    ) external;\\n\\n    /// @notice         collects revenue for tokens to configured revenueCollector address.\\n    /// @param tokens_  array of tokens to collect revenue for\\n    /// @dev            Note that this can revert if token balance is < revenueAmount (utilization > 100%)\\n    function collectRevenue(address[] calldata tokens_) external;\\n\\n    /// @notice gets the current updated exchange prices for n tokens and updates all prices, rates related data in storage.\\n    /// @param tokens_ tokens to update exchange prices for\\n    /// @return supplyExchangePrices_ new supply rates of overall system for each token\\n    /// @return borrowExchangePrices_ new borrow rates of overall system for each token\\n    function updateExchangePrices(\\n        address[] calldata tokens_\\n    )\\n        external\\n        returns (\\n            uint256[] memory supplyExchangePrices_,\\n            uint256[] memory borrowExchangePrices_\\n        );\\n}\\n\\ninterface IFTokenAdmin {\\n    /// @notice updates the rewards rate model contract.\\n    ///         Only callable by LendingFactory auths.\\n    /// @param rewardsRateModel_  the new rewards rate model contract address.\\n    ///                           can be set to address(0) to set no rewards (to save gas)\\n    function updateRewards(address rewardsRateModel_) external;\\n\\n    /// @notice Balances out the difference between fToken supply at Liquidity vs totalAssets().\\n    ///         Deposits underlying from rebalancer address into Liquidity but doesn't mint any shares\\n    ///         -> thus making deposit available as rewards.\\n    ///         Only callable by rebalancer.\\n    /// @return assets_ amount deposited to Liquidity\\n    function rebalance() external payable returns (uint256 assets_);\\n\\n    /// @notice gets the liquidity exchange price of the underlying asset, calculates the updated exchange price (with reward rates)\\n    ///         and writes those values to storage.\\n    ///         Callable by anyone.\\n    /// @return tokenExchangePrice_ exchange price of fToken share to underlying asset\\n    /// @return liquidityExchangePrice_ exchange price at Liquidity for the underlying asset\\n    function updateRates()\\n        external\\n        returns (uint256 tokenExchangePrice_, uint256 liquidityExchangePrice_);\\n\\n    /// @notice sends any potentially stuck funds to Liquidity contract. Only callable by LendingFactory auths.\\n    function rescueFunds(address token_) external;\\n\\n    /// @notice Updates the rebalancer address (ReserveContract). Only callable by LendingFactory auths.\\n    function updateRebalancer(address rebalancer_) external;\\n}\\n\\ncontract PayloadIGP35 {\\n    uint256 public constant PROPOSAL_ID = 35;\\n\\n    address public constant PROPOSER =\\n        0xA45f7bD6A5Ff45D31aaCE6bCD3d426D9328cea01;\\n\\n    address public constant PROPOSER_AVO_MULTISIG =\\n        0x059A94A72951c0ae1cc1CE3BF0dB52421bbE8210;\\n\\n    address public constant PROPOSER_AVO_MULTISIG_2 =\\n        0x9efdE135CA4832AbF0408c44c6f5f370eB0f35e8;\\n\\n    address public constant PROPOSER_AVO_MULTISIG_3 =\\n        0x5C43AAC965ff230AC1cF63e924D0153291D78BaD;\\n\\n    IGovernorBravo public constant GOVERNOR =\\n        IGovernorBravo(0x0204Cd037B2ec03605CFdFe482D8e257C765fA1B);\\n    ITimelock public immutable TIMELOCK =\\n        ITimelock(0x2386DC45AdDed673317eF068992F19421B481F4c);\\n\\n    IFluidLiquidityAdmin public constant LIQUIDITY =\\n        IFluidLiquidityAdmin(0x52Aa899454998Be5b000Ad077a46Bbe360F4e497);\\n    IFluidVaultT1Factory public constant VAULT_T1_FACTORY =\\n        IFluidVaultT1Factory(0x324c5Dc1fC42c7a4D43d92df1eBA58a54d13Bf2d);\\n    IFluidReserveContract public constant FLUID_RESERVE =\\n        IFluidReserveContract(0x264786EF916af64a1DB19F513F24a3681734ce92);\\n\\n    IDSAV2 public constant TREASURY =\\n        IDSAV2(0x28849D2b63fA8D361e5fc15cB8aBB13019884d09);\\n\\n    address public immutable ADDRESS_THIS;\\n\\n    address public constant TEAM_MULTISIG =\\n        0x4F6F977aCDD1177DCD81aB83074855EcB9C2D49e;\\n\\n    address public constant ETH_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public constant wstETH_ADDRESS =\\n        0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\n    address public constant weETH_ADDRESS =\\n        0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee;\\n    address public constant stETH_ADDRESS =\\n        0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n\\n    address public constant wBTC_ADDRESS =\\n        0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n\\n    address public constant USDC_ADDRESS =\\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address public constant USDT_ADDRESS =\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    address public constant F_USDT = 0x5C20B550819128074FD538Edf79791733ccEdd18;\\n    address public constant F_USDC = 0x9Fb7b4477576Fe5B32be4C1843aFB1e55F251B33;\\n\\n    constructor() {\\n        ADDRESS_THIS = address(this);\\n    }\\n\\n    function propose(string memory description) external {\\n        require(\\n            msg.sender == PROPOSER ||\\n                msg.sender == TEAM_MULTISIG ||\\n                address(this) == PROPOSER_AVO_MULTISIG ||\\n                address(this) == PROPOSER_AVO_MULTISIG_2 ||\\n                address(PROPOSER_AVO_MULTISIG_3) == PROPOSER_AVO_MULTISIG_3,\\n            \\\"msg.sender-not-allowed\\\"\\n        );\\n\\n        uint256 totalActions = 1;\\n        address[] memory targets = new address[](totalActions);\\n        uint256[] memory values = new uint256[](totalActions);\\n        string[] memory signatures = new string[](totalActions);\\n        bytes[] memory calldatas = new bytes[](totalActions);\\n\\n        // Action 1: call executePayload on timelock contract to execute payload related to Lite & Fluid\\n        targets[0] = address(TIMELOCK);\\n        values[0] = 0;\\n        signatures[0] = \\\"executePayload(address,string,bytes)\\\";\\n        calldatas[0] = abi.encode(ADDRESS_THIS, \\\"execute()\\\", abi.encode());\\n\\n        uint256 proposedId = GOVERNOR.propose(\\n            targets,\\n            values,\\n            signatures,\\n            calldatas,\\n            description\\n        );\\n\\n        require(proposedId == PROPOSAL_ID, \\\"PROPOSAL_IS_NOT_SAME\\\");\\n    }\\n\\n    function execute() external {\\n        require(address(this) == address(TIMELOCK), \\\"not-valid-caller\\\");\\n\\n        // Action 1: Update WBTC Vaults config\\n        action1();\\n\\n        // Action 2: Remove WBTC/USDC and WBTC/USDT rewards\\n        action2();\\n\\n        // Action 3: Set ListTokenAuth as auth on Liquidity\\n        action3();\\n\\n        // Action 4: Set CollectRevenueAuth as auth on Liquidity\\n        action4();\\n\\n        // Action 5: Collect revenue from Liquditiy Layer\\n        action5();\\n\\n        // Action 6: Remove sUSDe handlers from sUSDe vaults\\n        action6();\\n\\n        // Action 7: Make sUSDe Vaults borrow rate magnifier 1x\\n        action7();\\n\\n        // Action 8: Transfer stETH from Treasury to Team Multisig\\n        action8();\\n\\n        // Action 9: Add new LendingRewards contracts\\n        action9();\\n    }\\n\\n    function verifyProposal() external view {}\\n\\n    /***********************************|\\n    |     Proposal Payload Actions      |\\n    |__________________________________*/\\n\\n    /// @notice Action 1: Update WBTC Vaults config\\n    function action1() internal {\\n        VaultConfig[] memory configs_ = new VaultConfig[](3);\\n\\n        uint256 i;\\n\\n        // WBTC_USDC\\n        {\\n            configs_[i++] = VaultConfig({\\n                vaultId: 21,\\n                collateralFactor: 85 * 1e2,\\n                liquidationThreshold: 88 * 1e2,\\n                liquidationMaxLimit: 92.5 * 1e2\\n            });\\n        }\\n\\n        // WBTC_USDT\\n        {\\n            configs_[i++] = VaultConfig({\\n                vaultId: 22,\\n                collateralFactor: 85 * 1e2,\\n                liquidationThreshold: 88 * 1e2,\\n                liquidationMaxLimit: 92.5 * 1e2\\n            });\\n        }\\n\\n        // WBTC_ETH\\n        {\\n            configs_[i++] = VaultConfig({\\n                vaultId: 23,\\n                collateralFactor: 90 * 1e2,\\n                liquidationThreshold: 93 * 1e2,\\n                liquidationMaxLimit: 95 * 1e2\\n            });\\n        }\\n\\n        _updateVaultConfig(configs_);\\n    }\\n\\n    /// @notice Action 2: remove WBTC/USDC and WBTC/USDT rewards\\n    function action2() internal {\\n        // WBTC/USDC\\n        VAULT_T1_FACTORY.setVaultAuth(\\n            getVaultAddress(21),\\n            0xF561347c306E3Ccf213b73Ce2353D6ed79f92408,\\n            false\\n        );\\n\\n        // WBTC/USDT\\n        VAULT_T1_FACTORY.setVaultAuth(\\n            getVaultAddress(22),\\n            0x36C677a6AbDa7D6409fB74d1136A65aF1415F539,\\n            false\\n        );\\n    }\\n\\n    /// @notice Action 3: Set ListTokenAuth as auth on Liquidity\\n    function action3() internal {\\n        AdminModuleStructs.AddressBool[] memory addrBools_ = new AdminModuleStructs.AddressBool[](1);\\n\\n        // ListTokenAuth\\n        addrBools_[0] = AdminModuleStructs.AddressBool({\\n            addr: 0xb2875c793CE2277dE813953D7306506E87842b76,\\n            value: true\\n        });\\n\\n        LIQUIDITY.updateAuths(addrBools_);\\n    }\\n\\n    /// @notice Action 4: Set CollectRevenueAuth as auth on Liquidity\\n     function action4() internal {\\n        AdminModuleStructs.AddressBool[] memory addrBools_ = new AdminModuleStructs.AddressBool[](1);\\n\\n        // CollectRevenueAuth\\n        addrBools_[0] = AdminModuleStructs.AddressBool({\\n            addr: 0x7f14c42F84cb940F2619DD2698EDdB1C3fFC514E,\\n            value: true\\n        });\\n\\n        LIQUIDITY.updateAuths(addrBools_);\\n    }\\n\\n    /// @notice Action 5: Collect revenue from Liquditiy Layer\\n    function action5() internal {\\n        address[] memory tokens = new address[](5);\\n\\n        tokens[0] = ETH_ADDRESS;\\n        tokens[1] = wstETH_ADDRESS;\\n        tokens[2] = USDC_ADDRESS;\\n        tokens[3] = USDT_ADDRESS;\\n        tokens[4] = wBTC_ADDRESS;\\n\\n        LIQUIDITY.collectRevenue(tokens);\\n    }\\n\\n    /// @notice Action 6: Remove sUSDe handlers from sUSDe vaults\\n    function action6() internal {\\n        VAULT_T1_FACTORY.setVaultAuth(\\n            getVaultAddress(7),\\n            0x36639DAd77eC858574aaF07a68bBa62b7db19FfA, // Vault_SUSDE_USDC\\n            false\\n        );\\n\\n        VAULT_T1_FACTORY.setVaultAuth(\\n            getVaultAddress(8),\\n            0xafE3974f4916140a093F1de7Fc064A3Da220DD41, // Vault_SUSDE_USDT\\n            false\\n        );\\n\\n        VAULT_T1_FACTORY.setVaultAuth(\\n            getVaultAddress(17),\\n            0xa7C805988f04f0e841504761E5aa8387600e430b, // Vault_SUSDE_USDC\\n            false\\n        );\\n\\n        VAULT_T1_FACTORY.setVaultAuth(\\n            getVaultAddress(18),\\n            0x7607968F40d7Ac4Ef39E809F29fADDe34C00A0A6, // Vault_SUSDE_USDT\\n            false\\n        );\\n    }\\n\\n    /// @notice Action 7: Make sUSDe Vaults borrow rate magnifier 1x\\n    function action7() internal {\\n        IFluidVaultT1(getVaultAddress(7)).updateBorrowRateMagnifier(100 * 1e2);\\n        IFluidVaultT1(getVaultAddress(8)).updateBorrowRateMagnifier(100 * 1e2);\\n        IFluidVaultT1(getVaultAddress(17)).updateBorrowRateMagnifier(100 * 1e2);\\n        IFluidVaultT1(getVaultAddress(18)).updateBorrowRateMagnifier(100 * 1e2);\\n    }\\n\\n    /// @notice Action 8: Transfer stETH from Treasury to Team Multisig\\n    function action8() internal {\\n        string[] memory targets = new string[](1);\\n        bytes[] memory encodedSpells = new bytes[](1);\\n\\n        string memory withdrawSignature = \\\"withdraw(address,uint256,address,uint256,uint256)\\\";\\n\\n        // Spell 1: Transfer stETH\\n        {\\n            uint256 stETH_AMOUNT = 300 * 1e18; // 300 stETH\\n            targets[0] = \\\"BASIC-A\\\";\\n            encodedSpells[0] = abi.encodeWithSignature(\\n                withdrawSignature,\\n                stETH_ADDRESS,\\n                stETH_AMOUNT,\\n                TEAM_MULTISIG,\\n                0,\\n                0\\n            );\\n        }\\n\\n        IDSAV2(TREASURY).cast(targets, encodedSpells, address(this));\\n    }\\n\\n    /// @notice Action 9: Add new LendingRewards contracts\\n    function action9() internal {\\n        address[] memory protocols = new address[](2);\\n        address[] memory tokens = new address[](2);\\n        uint256[] memory amounts = new uint256[](2);\\n\\n        { /// fUSDC\\n            IFTokenAdmin(F_USDC).updateRewards(\\n                0x99c1515fa3327B048FCB46483ac0fceB0ED8d471\\n            );\\n\\n            uint256 allowance = IERC20(USDC_ADDRESS).allowance(\\n                address(FLUID_RESERVE),\\n                F_USDC\\n            );\\n\\n            protocols[0] = F_USDC;\\n            tokens[0] = USDC_ADDRESS;\\n            amounts[0] = allowance + (205_000 * 1e6);\\n        }\\n\\n        { /// fUSDT\\n            IFTokenAdmin(F_USDT).updateRewards(\\n                0x99c1515fa3327B048FCB46483ac0fceB0ED8d471\\n            );\\n\\n            uint256 allowance = IERC20(USDT_ADDRESS).allowance(\\n                address(FLUID_RESERVE),\\n                F_USDT\\n            );\\n\\n            protocols[1] = F_USDT;\\n            tokens[1] = USDT_ADDRESS;\\n            amounts[1] = allowance + (205_000 * 1e6);\\n        }\\n\\n        FLUID_RESERVE.approve(protocols, tokens, amounts);\\n    }\\n    \\n\\n    /// Helpers ///\\n    struct VaultConfig {\\n        uint256 vaultId;\\n        uint256 collateralFactor;\\n        uint256 liquidationThreshold;\\n        uint256 liquidationMaxLimit;\\n    }\\n\\n    function getVaultAddress(uint256 id) internal view returns(address) {\\n        return VAULT_T1_FACTORY.getVaultAddress(id);\\n    } \\n\\n    function _updateVaultConfig(VaultConfig[] memory configs_) internal {\\n        for (uint i = 0; i < configs_.length; i++) {\\n            VaultConfig memory config_ = configs_[i];\\n\\n            IFluidVaultT1 vault_ = IFluidVaultT1(\\n                VAULT_T1_FACTORY.getVaultAddress(config_.vaultId)\\n            );\\n            vault_.updateLiquidationMaxLimit(config_.liquidationMaxLimit);\\n            vault_.updateLiquidationThreshold(config_.liquidationThreshold);\\n            vault_.updateCollateralFactor(config_.collateralFactor);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.0\"}}}","address":"0xC00466951EE42a09883F3FEA97CC2282EedB3A3B","bytecode":"0x60c0604052732386dc45added673317ef068992f19421b481f4c60805234801561002857600080fd5b503060a05260805160a051611f81610067600039600081816103da015261075f01526000818161025c01528181610422015261069e0152611f816000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80638a1c7364116100de578063b696649511610097578063bffa7f0f11610071578063bffa7f0f1461039f578063c1892058146103ba578063cc025f7c146103d5578063d45f9d95146103fc57600080fd5b8063b69664951461034e578063b788f3a114610369578063bb09d9b71461038457600080fd5b80638a1c7364146102b4578063a4485598146102cf578063a734f06e146102ea578063aa98df3914610305578063aae7ae0714610318578063aaff04931461033357600080fd5b80636146195411610130578063614619541461023257806366760d7d1461023a5780636dc0ae221461023c5780637aadef8b146102575780637e2f35fa1461027e57806383ba27d81461029957600080fd5b80630bc9136e1461017857806325ad7f4d146101935780632861c7d1146101c65780632d2c5565146101e1578063308baf33146101fc578063588c77e614610217575b600080fd5b610180602381565b6040519081526020015b60405180910390f35b6101ae739efde135ca4832abf0408c44c6f5f370eb0f35e881565b6040516001600160a01b03909116815260200161018a565b6101ae7352aa899454998be5b000ad077a46bbe360f4e49781565b6101ae7328849d2b63fa8d361e5fc15cb8abb13019884d0981565b6101ae73ae7ab96520de3a18e5e111b5eaab095312d7fe8481565b6101ae735c43aac965ff230ac1cf63e924d0153291d78bad81565b61023a610417565b005b6101ae730204cd037b2ec03605cfdfe482d8e257c765fa1b81565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b6101ae73059a94a72951c0ae1cc1ce3bf0db52421bbe821081565b6101ae739fb7b4477576fe5b32be4c1843afb1e55f251b3381565b6101ae73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d81565b6101ae737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b6101ae73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61023a610313366004611ab4565b6104d1565b6101ae735c20b550819128074fd538edf79791733ccedd1881565b6101ae73cd5fe23c85820f7b72d0926fc9b05b43e359b7ee81565b6101ae73264786ef916af64a1db19f513f24a3681734ce9281565b6101ae734f6f977acdd1177dcd81ab83074855ecb9c2d49e81565b6101ae73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b6101ae73a45f7bd6a5ff45d31aace6bcd3d426d9328cea0181565b6101ae73dac17f958d2ee523a2206206994597c13d831ec781565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b6101ae732260fac5e5542a773aa44fbcfedf7c193bc2c59981565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104875760405162461bcd60e51b815260206004820152601060248201526f3737ba16bb30b634b216b1b0b63632b960811b60448201526064015b60405180910390fd5b61048f61088a565b6104976109e4565b61049f610b05565b6104a7610bf8565b6104af610c74565b6104b7610e2e565b6104bf611043565b6104c76111b2565b6104cf6113ac565b565b3373a45f7bd6a5ff45d31aace6bcd3d426d9328cea011480610506575033734f6f977acdd1177dcd81ab83074855ecb9c2d49e145b8061052457503073059a94a72951c0ae1cc1ce3bf0db52421bbe8210145b80610542575030739efde135ca4832abf0408c44c6f5f370eb0f35e8145b8061054b575060015b6105905760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c8b5b9bdd0b585b1b1bddd95960521b604482015260640161047e565b604080516001808252818301909252600090826020808301908036833701905050905060008267ffffffffffffffff8111156105ce576105ce611a9e565b6040519080825280602002602001820160405280156105f7578160200160208202803683370190505b50905060008367ffffffffffffffff81111561061557610615611a9e565b60405190808252806020026020018201604052801561064857816020015b60608152602001906001900390816106335790505b50905060008467ffffffffffffffff81111561066657610666611a9e565b60405190808252806020026020018201604052801561069957816020015b60608152602001906001900390816106845790505b5090507f0000000000000000000000000000000000000000000000000000000000000000846000815181106106d0576106d0611b65565b60200260200101906001600160a01b031690816001600160a01b03168152505060008360008151811061070557610705611b65565b602002602001018181525050604051806060016040528060248152602001611f28602491398260008151811061073d5761073d611b65565b60209081029190910181019190915260408051600081529182018152610786917f0000000000000000000000000000000000000000000000000000000000000000918101611bcb565b604051602081830303815290604052816000815181106107a8576107a8611b65565b6020908102919091010152604051636d4ab48d60e11b8152600090730204cd037b2ec03605cfdfe482d8e257c765fa1b9063da95691a906107f59088908890889088908e90600401611cdd565b6020604051808303816000875af1158015610814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108389190611d4a565b9050602381146108815760405162461bcd60e51b815260206004820152601460248201527350524f504f53414c5f49535f4e4f545f53414d4560601b604482015260640161047e565b50505050505050565b60408051600380825260808201909252600091816020015b6108cd6040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816108a257905050905060006040518060800160405280601581526020016121348152602001612260815260200161242281525082828061091890611d79565b93508151811061092a5761092a611b65565b60200260200101819052506040518060800160405280601681526020016121348152602001612260815260200161242281525082828061096990611d79565b93508151811061097b5761097b611b65565b60200260200101819052506040518060800160405280601781526020016123288152602001612454815260200161251c8152508282806109ba90611d79565b9350815181106109cc576109cc611b65565b60200260200101819052506109e082611827565b5050565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d21610a086015611a21565b73f561347c306e3ccf213b73ce2353d6ed79f9240860006040518463ffffffff1660e01b8152600401610a3d93929190611d92565b600060405180830381600087803b158015610a5757600080fd5b505af1158015610a6b573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d21610a9c6016611a21565b7336c677a6abda7d6409fb74d1136a65af1415f53960006040518463ffffffff1660e01b8152600401610ad193929190611d92565b600060405180830381600087803b158015610aeb57600080fd5b505af1158015610aff573d6000803e3d6000fd5b50505050565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610b1c5750506040805180820190915273b2875c793ce2277de813953d7306506e87842b768152600160208201528151919250908290600090610b8157610b81611b65565b6020908102919091010152604051633f66feff60e01b81527352aa899454998be5b000ad077a46bbe360f4e49790633f66feff90610bc3908490600401611db6565b600060405180830381600087803b158015610bdd57600080fd5b505af1158015610bf1573d6000803e3d6000fd5b5050505050565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610c0f57505060408051808201909152737f14c42f84cb940f2619dd2698eddb1c3ffc514e8152600160208201528151919250908290600090610b8157610b81611b65565b60408051600580825260c082019092526000916020820160a08036833701905050905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81600081518110610cbf57610cbf611b65565b60200260200101906001600160a01b031690816001600160a01b031681525050737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081600181518110610d0757610d07611b65565b60200260200101906001600160a01b031690816001600160a01b03168152505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881600281518110610d4f57610d4f611b65565b60200260200101906001600160a01b031690816001600160a01b03168152505073dac17f958d2ee523a2206206994597c13d831ec781600381518110610d9757610d97611b65565b60200260200101906001600160a01b031690816001600160a01b031681525050732260fac5e5542a773aa44fbcfedf7c193bc2c59981600481518110610ddf57610ddf611b65565b6001600160a01b039092166020928302919091019091015260405163564315fd60e11b81527352aa899454998be5b000ad077a46bbe360f4e4979063ac862bfa90610bc3908490600401611e03565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d21610e526007611a21565b7336639dad77ec858574aaf07a68bba62b7db19ffa60006040518463ffffffff1660e01b8152600401610e8793929190611d92565b600060405180830381600087803b158015610ea157600080fd5b505af1158015610eb5573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d21610ee66008611a21565b73afe3974f4916140a093f1de7fc064a3da220dd4160006040518463ffffffff1660e01b8152600401610f1b93929190611d92565b600060405180830381600087803b158015610f3557600080fd5b505af1158015610f49573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d21610f7a6011611a21565b73a7c805988f04f0e841504761e5aa8387600e430b60006040518463ffffffff1660e01b8152600401610faf93929190611d92565b600060405180830381600087803b158015610fc957600080fd5b505af1158015610fdd573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d2161100e6012611a21565b737607968f40d7ac4ef39e809f29fadde34c00a0a660006040518463ffffffff1660e01b8152600401610ad193929190611d92565b61104d6007611a21565b6040516307bd053f60e51b815261271060048201526001600160a01b03919091169063f7a0a7e090602401600060405180830381600087803b15801561109257600080fd5b505af11580156110a6573d6000803e3d6000fd5b505050506110b46008611a21565b6040516307bd053f60e51b815261271060048201526001600160a01b03919091169063f7a0a7e090602401600060405180830381600087803b1580156110f957600080fd5b505af115801561110d573d6000803e3d6000fd5b5050505061111b6011611a21565b6040516307bd053f60e51b815261271060048201526001600160a01b03919091169063f7a0a7e090602401600060405180830381600087803b15801561116057600080fd5b505af1158015611174573d6000803e3d6000fd5b505050506111826012611a21565b6040516307bd053f60e51b815261271060048201526001600160a01b03919091169063f7a0a7e090602401610ad1565b604080516001808252818301909252600091816020015b60608152602001906001900390816111c957505060408051600180825281830190925291925060009190602082015b60608152602001906001900390816111f85790505090506000604051806060016040528060318152602001611ef76031913990506000681043561a882930000090506040518060400160405280600781526020016642415349432d4160c81b8152508460008151811061126d5761126d611b65565b602090810291909101015260405173ae7ab96520de3a18e5e111b5eaab095312d7fe84602482015260448101829052734f6f977acdd1177dcd81ab83074855ecb9c2d49e606482015260006084820181905260a4820152829060c40160408051601f1981840301815290829052916112e491611e1d565b60405180910390206001600160e01b0319166020820180516001600160e01b0383818316178352505050508360008151811061132257611322611b65565b6020908102919091010152506040516324c1324d60e21b81527328849d2b63fa8d361e5fc15cb8abb13019884d0990639304c9349061136990869086903090600401611e39565b6020604051808303816000875af1158015611388573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aff9190611d4a565b60408051600280825260608201835260009260208301908036833750506040805160028082526060820183529394506000939092509060208301908036833750506040805160028082526060820183529394506000939092509060208301908036833701905050604051635fd6196560e01b81527399c1515fa3327b048fcb46483ac0fceb0ed8d4716004820152909150739fb7b4477576fe5b32be4c1843afb1e55f251b3390635fd6196590602401600060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b5050604051636eb1769f60e11b815273264786ef916af64a1db19f513f24a3681734ce926004820152739fb7b4477576fe5b32be4c1843afb1e55f251b3360248201526000925073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48915063dd62ed3e90604401602060405180830381865afa15801561150e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115329190611d4a565b9050739fb7b4477576fe5b32be4c1843afb1e55f251b338460008151811061155c5761155c611b65565b60200260200101906001600160a01b031690816001600160a01b03168152505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48836000815181106115a4576115a4611b65565b6001600160a01b03909216602092830291909101909101526115cb81642fbaf3c200611e77565b826000815181106115de576115de611b65565b602090810291909101015250604051635fd6196560e01b81527399c1515fa3327b048fcb46483ac0fceb0ed8d4716004820152735c20b550819128074fd538edf79791733ccedd1890635fd6196590602401600060405180830381600087803b15801561164a57600080fd5b505af115801561165e573d6000803e3d6000fd5b5050604051636eb1769f60e11b815273264786ef916af64a1db19f513f24a3681734ce926004820152735c20b550819128074fd538edf79791733ccedd1860248201526000925073dac17f958d2ee523a2206206994597c13d831ec7915063dd62ed3e90604401602060405180830381865afa1580156116e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117069190611d4a565b9050735c20b550819128074fd538edf79791733ccedd188460018151811061173057611730611b65565b60200260200101906001600160a01b031690816001600160a01b03168152505073dac17f958d2ee523a2206206994597c13d831ec78360018151811061177857611778611b65565b6001600160a01b039092166020928302919091019091015261179f81642fbaf3c200611e77565b826001815181106117b2576117b2611b65565b6020908102919091010152506040516303e8046160e01b815273264786ef916af64a1db19f513f24a3681734ce92906303e80461906117f990869086908690600401611e8a565b600060405180830381600087803b15801561181357600080fd5b505af1158015610881573d6000803e3d6000fd5b60005b81518110156109e057600082828151811061184757611847611b65565b60200260200101519050600073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b031663e6bd26a283600001516040518263ffffffff1660e01b815260040161189991815260200190565b602060405180830381865afa1580156118b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118da9190611ecd565b6060830151604051631131d2c560e31b81529192506001600160a01b0383169163898e9628916119109160040190815260200190565b600060405180830381600087803b15801561192a57600080fd5b505af115801561193e573d6000803e3d6000fd5b50505060408084015190516369dadf0d60e11b81526001600160a01b038416925063d3b5be1a916119759160040190815260200190565b600060405180830381600087803b15801561198f57600080fd5b505af11580156119a3573d6000803e3d6000fd5b5050506020830151604051631427086960e21b81526001600160a01b038416925063509c21a4916119da9160040190815260200190565b600060405180830381600087803b1580156119f457600080fd5b505af1158015611a08573d6000803e3d6000fd5b5050505050508080611a1990611d79565b91505061182a565b60405163735e935160e11b81526004810182905260009073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a290602401602060405180830381865afa158015611a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a989190611ecd565b92915050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611ac657600080fd5b813567ffffffffffffffff80821115611ade57600080fd5b818401915084601f830112611af257600080fd5b813581811115611b0457611b04611a9e565b604051601f8201601f19908116603f01168101908382118183101715611b2c57611b2c611a9e565b81604052828152876020848701011115611b4557600080fd5b826020860160208301376000928101602001929092525095945050505050565b634e487b7160e01b600052603260045260246000fd5b60005b83811015611b96578181015183820152602001611b7e565b50506000910152565b60008151808452611bb7816020860160208601611b7b565b601f01601f19169290920160200192915050565b60018060a01b038316815260606020820152600960608201526865786563757465282960b81b608082015260a060408201526000611c0c60a0830184611b9f565b949350505050565b600081518084526020808501945080840160005b83811015611c4d5781516001600160a01b031687529582019590820190600101611c28565b509495945050505050565b600081518084526020808501945080840160005b83811015611c4d57815187529582019590820190600101611c6c565b600081518084526020808501808196508360051b8101915082860160005b85811015611cd0578284038952611cbe848351611b9f565b98850198935090840190600101611ca6565b5091979650505050505050565b60a081526000611cf060a0830188611c14565b8281036020840152611d028188611c58565b90508281036040840152611d168187611c88565b90508281036060840152611d2a8186611c88565b90508281036080840152611d3e8185611b9f565b98975050505050505050565b600060208284031215611d5c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060018201611d8b57611d8b611d63565b5060010190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b602080825282518282018190526000919060409081850190868401855b82811015611cd057815180516001600160a01b031685528601511515868501529284019290850190600101611dd3565b602081526000611e166020830184611c14565b9392505050565b60008251611e2f818460208701611b7b565b9190910192915050565b606081526000611e4c6060830186611c88565b8281036020840152611e5e8186611c88565b91505060018060a01b0383166040830152949350505050565b80820180821115611a9857611a98611d63565b606081526000611e9d6060830186611c14565b8281036020840152611eaf8186611c14565b90508281036040840152611ec38185611c58565b9695505050505050565b600060208284031215611edf57600080fd5b81516001600160a01b0381168114611e1657600080fdfe776974686472617728616464726573732c75696e743235362c616464726573732c75696e743235362c75696e7432353629657865637574655061796c6f616428616464726573732c737472696e672c627974657329a2646970667358221220220b1387fb0002b22d7ddae34ff9f1eff59e9429c51c5b0069bf70c10d56a70364736f6c63430008150033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101735760003560e01c80638a1c7364116100de578063b696649511610097578063bffa7f0f11610071578063bffa7f0f1461039f578063c1892058146103ba578063cc025f7c146103d5578063d45f9d95146103fc57600080fd5b8063b69664951461034e578063b788f3a114610369578063bb09d9b71461038457600080fd5b80638a1c7364146102b4578063a4485598146102cf578063a734f06e146102ea578063aa98df3914610305578063aae7ae0714610318578063aaff04931461033357600080fd5b80636146195411610130578063614619541461023257806366760d7d1461023a5780636dc0ae221461023c5780637aadef8b146102575780637e2f35fa1461027e57806383ba27d81461029957600080fd5b80630bc9136e1461017857806325ad7f4d146101935780632861c7d1146101c65780632d2c5565146101e1578063308baf33146101fc578063588c77e614610217575b600080fd5b610180602381565b6040519081526020015b60405180910390f35b6101ae739efde135ca4832abf0408c44c6f5f370eb0f35e881565b6040516001600160a01b03909116815260200161018a565b6101ae7352aa899454998be5b000ad077a46bbe360f4e49781565b6101ae7328849d2b63fa8d361e5fc15cb8abb13019884d0981565b6101ae73ae7ab96520de3a18e5e111b5eaab095312d7fe8481565b6101ae735c43aac965ff230ac1cf63e924d0153291d78bad81565b61023a610417565b005b6101ae730204cd037b2ec03605cfdfe482d8e257c765fa1b81565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b6101ae73059a94a72951c0ae1cc1ce3bf0db52421bbe821081565b6101ae739fb7b4477576fe5b32be4c1843afb1e55f251b3381565b6101ae73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d81565b6101ae737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b6101ae73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61023a610313366004611ab4565b6104d1565b6101ae735c20b550819128074fd538edf79791733ccedd1881565b6101ae73cd5fe23c85820f7b72d0926fc9b05b43e359b7ee81565b6101ae73264786ef916af64a1db19f513f24a3681734ce9281565b6101ae734f6f977acdd1177dcd81ab83074855ecb9c2d49e81565b6101ae73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b6101ae73a45f7bd6a5ff45d31aace6bcd3d426d9328cea0181565b6101ae73dac17f958d2ee523a2206206994597c13d831ec781565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b6101ae732260fac5e5542a773aa44fbcfedf7c193bc2c59981565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104875760405162461bcd60e51b815260206004820152601060248201526f3737ba16bb30b634b216b1b0b63632b960811b60448201526064015b60405180910390fd5b61048f61088a565b6104976109e4565b61049f610b05565b6104a7610bf8565b6104af610c74565b6104b7610e2e565b6104bf611043565b6104c76111b2565b6104cf6113ac565b565b3373a45f7bd6a5ff45d31aace6bcd3d426d9328cea011480610506575033734f6f977acdd1177dcd81ab83074855ecb9c2d49e145b8061052457503073059a94a72951c0ae1cc1ce3bf0db52421bbe8210145b80610542575030739efde135ca4832abf0408c44c6f5f370eb0f35e8145b8061054b575060015b6105905760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c8b5b9bdd0b585b1b1bddd95960521b604482015260640161047e565b604080516001808252818301909252600090826020808301908036833701905050905060008267ffffffffffffffff8111156105ce576105ce611a9e565b6040519080825280602002602001820160405280156105f7578160200160208202803683370190505b50905060008367ffffffffffffffff81111561061557610615611a9e565b60405190808252806020026020018201604052801561064857816020015b60608152602001906001900390816106335790505b50905060008467ffffffffffffffff81111561066657610666611a9e565b60405190808252806020026020018201604052801561069957816020015b60608152602001906001900390816106845790505b5090507f0000000000000000000000000000000000000000000000000000000000000000846000815181106106d0576106d0611b65565b60200260200101906001600160a01b031690816001600160a01b03168152505060008360008151811061070557610705611b65565b602002602001018181525050604051806060016040528060248152602001611f28602491398260008151811061073d5761073d611b65565b60209081029190910181019190915260408051600081529182018152610786917f0000000000000000000000000000000000000000000000000000000000000000918101611bcb565b604051602081830303815290604052816000815181106107a8576107a8611b65565b6020908102919091010152604051636d4ab48d60e11b8152600090730204cd037b2ec03605cfdfe482d8e257c765fa1b9063da95691a906107f59088908890889088908e90600401611cdd565b6020604051808303816000875af1158015610814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108389190611d4a565b9050602381146108815760405162461bcd60e51b815260206004820152601460248201527350524f504f53414c5f49535f4e4f545f53414d4560601b604482015260640161047e565b50505050505050565b60408051600380825260808201909252600091816020015b6108cd6040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816108a257905050905060006040518060800160405280601581526020016121348152602001612260815260200161242281525082828061091890611d79565b93508151811061092a5761092a611b65565b60200260200101819052506040518060800160405280601681526020016121348152602001612260815260200161242281525082828061096990611d79565b93508151811061097b5761097b611b65565b60200260200101819052506040518060800160405280601781526020016123288152602001612454815260200161251c8152508282806109ba90611d79565b9350815181106109cc576109cc611b65565b60200260200101819052506109e082611827565b5050565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d21610a086015611a21565b73f561347c306e3ccf213b73ce2353d6ed79f9240860006040518463ffffffff1660e01b8152600401610a3d93929190611d92565b600060405180830381600087803b158015610a5757600080fd5b505af1158015610a6b573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d21610a9c6016611a21565b7336c677a6abda7d6409fb74d1136a65af1415f53960006040518463ffffffff1660e01b8152600401610ad193929190611d92565b600060405180830381600087803b158015610aeb57600080fd5b505af1158015610aff573d6000803e3d6000fd5b50505050565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610b1c5750506040805180820190915273b2875c793ce2277de813953d7306506e87842b768152600160208201528151919250908290600090610b8157610b81611b65565b6020908102919091010152604051633f66feff60e01b81527352aa899454998be5b000ad077a46bbe360f4e49790633f66feff90610bc3908490600401611db6565b600060405180830381600087803b158015610bdd57600080fd5b505af1158015610bf1573d6000803e3d6000fd5b5050505050565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610c0f57505060408051808201909152737f14c42f84cb940f2619dd2698eddb1c3ffc514e8152600160208201528151919250908290600090610b8157610b81611b65565b60408051600580825260c082019092526000916020820160a08036833701905050905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81600081518110610cbf57610cbf611b65565b60200260200101906001600160a01b031690816001600160a01b031681525050737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081600181518110610d0757610d07611b65565b60200260200101906001600160a01b031690816001600160a01b03168152505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881600281518110610d4f57610d4f611b65565b60200260200101906001600160a01b031690816001600160a01b03168152505073dac17f958d2ee523a2206206994597c13d831ec781600381518110610d9757610d97611b65565b60200260200101906001600160a01b031690816001600160a01b031681525050732260fac5e5542a773aa44fbcfedf7c193bc2c59981600481518110610ddf57610ddf611b65565b6001600160a01b039092166020928302919091019091015260405163564315fd60e11b81527352aa899454998be5b000ad077a46bbe360f4e4979063ac862bfa90610bc3908490600401611e03565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d21610e526007611a21565b7336639dad77ec858574aaf07a68bba62b7db19ffa60006040518463ffffffff1660e01b8152600401610e8793929190611d92565b600060405180830381600087803b158015610ea157600080fd5b505af1158015610eb5573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d21610ee66008611a21565b73afe3974f4916140a093f1de7fc064a3da220dd4160006040518463ffffffff1660e01b8152600401610f1b93929190611d92565b600060405180830381600087803b158015610f3557600080fd5b505af1158015610f49573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d21610f7a6011611a21565b73a7c805988f04f0e841504761e5aa8387600e430b60006040518463ffffffff1660e01b8152600401610faf93929190611d92565b600060405180830381600087803b158015610fc957600080fd5b505af1158015610fdd573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d2161100e6012611a21565b737607968f40d7ac4ef39e809f29fadde34c00a0a660006040518463ffffffff1660e01b8152600401610ad193929190611d92565b61104d6007611a21565b6040516307bd053f60e51b815261271060048201526001600160a01b03919091169063f7a0a7e090602401600060405180830381600087803b15801561109257600080fd5b505af11580156110a6573d6000803e3d6000fd5b505050506110b46008611a21565b6040516307bd053f60e51b815261271060048201526001600160a01b03919091169063f7a0a7e090602401600060405180830381600087803b1580156110f957600080fd5b505af115801561110d573d6000803e3d6000fd5b5050505061111b6011611a21565b6040516307bd053f60e51b815261271060048201526001600160a01b03919091169063f7a0a7e090602401600060405180830381600087803b15801561116057600080fd5b505af1158015611174573d6000803e3d6000fd5b505050506111826012611a21565b6040516307bd053f60e51b815261271060048201526001600160a01b03919091169063f7a0a7e090602401610ad1565b604080516001808252818301909252600091816020015b60608152602001906001900390816111c957505060408051600180825281830190925291925060009190602082015b60608152602001906001900390816111f85790505090506000604051806060016040528060318152602001611ef76031913990506000681043561a882930000090506040518060400160405280600781526020016642415349432d4160c81b8152508460008151811061126d5761126d611b65565b602090810291909101015260405173ae7ab96520de3a18e5e111b5eaab095312d7fe84602482015260448101829052734f6f977acdd1177dcd81ab83074855ecb9c2d49e606482015260006084820181905260a4820152829060c40160408051601f1981840301815290829052916112e491611e1d565b60405180910390206001600160e01b0319166020820180516001600160e01b0383818316178352505050508360008151811061132257611322611b65565b6020908102919091010152506040516324c1324d60e21b81527328849d2b63fa8d361e5fc15cb8abb13019884d0990639304c9349061136990869086903090600401611e39565b6020604051808303816000875af1158015611388573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aff9190611d4a565b60408051600280825260608201835260009260208301908036833750506040805160028082526060820183529394506000939092509060208301908036833750506040805160028082526060820183529394506000939092509060208301908036833701905050604051635fd6196560e01b81527399c1515fa3327b048fcb46483ac0fceb0ed8d4716004820152909150739fb7b4477576fe5b32be4c1843afb1e55f251b3390635fd6196590602401600060405180830381600087803b15801561147657600080fd5b505af115801561148a573d6000803e3d6000fd5b5050604051636eb1769f60e11b815273264786ef916af64a1db19f513f24a3681734ce926004820152739fb7b4477576fe5b32be4c1843afb1e55f251b3360248201526000925073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48915063dd62ed3e90604401602060405180830381865afa15801561150e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115329190611d4a565b9050739fb7b4477576fe5b32be4c1843afb1e55f251b338460008151811061155c5761155c611b65565b60200260200101906001600160a01b031690816001600160a01b03168152505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48836000815181106115a4576115a4611b65565b6001600160a01b03909216602092830291909101909101526115cb81642fbaf3c200611e77565b826000815181106115de576115de611b65565b602090810291909101015250604051635fd6196560e01b81527399c1515fa3327b048fcb46483ac0fceb0ed8d4716004820152735c20b550819128074fd538edf79791733ccedd1890635fd6196590602401600060405180830381600087803b15801561164a57600080fd5b505af115801561165e573d6000803e3d6000fd5b5050604051636eb1769f60e11b815273264786ef916af64a1db19f513f24a3681734ce926004820152735c20b550819128074fd538edf79791733ccedd1860248201526000925073dac17f958d2ee523a2206206994597c13d831ec7915063dd62ed3e90604401602060405180830381865afa1580156116e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117069190611d4a565b9050735c20b550819128074fd538edf79791733ccedd188460018151811061173057611730611b65565b60200260200101906001600160a01b031690816001600160a01b03168152505073dac17f958d2ee523a2206206994597c13d831ec78360018151811061177857611778611b65565b6001600160a01b039092166020928302919091019091015261179f81642fbaf3c200611e77565b826001815181106117b2576117b2611b65565b6020908102919091010152506040516303e8046160e01b815273264786ef916af64a1db19f513f24a3681734ce92906303e80461906117f990869086908690600401611e8a565b600060405180830381600087803b15801561181357600080fd5b505af1158015610881573d6000803e3d6000fd5b60005b81518110156109e057600082828151811061184757611847611b65565b60200260200101519050600073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b031663e6bd26a283600001516040518263ffffffff1660e01b815260040161189991815260200190565b602060405180830381865afa1580156118b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118da9190611ecd565b6060830151604051631131d2c560e31b81529192506001600160a01b0383169163898e9628916119109160040190815260200190565b600060405180830381600087803b15801561192a57600080fd5b505af115801561193e573d6000803e3d6000fd5b50505060408084015190516369dadf0d60e11b81526001600160a01b038416925063d3b5be1a916119759160040190815260200190565b600060405180830381600087803b15801561198f57600080fd5b505af11580156119a3573d6000803e3d6000fd5b5050506020830151604051631427086960e21b81526001600160a01b038416925063509c21a4916119da9160040190815260200190565b600060405180830381600087803b1580156119f457600080fd5b505af1158015611a08573d6000803e3d6000fd5b5050505050508080611a1990611d79565b91505061182a565b60405163735e935160e11b81526004810182905260009073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a290602401602060405180830381865afa158015611a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a989190611ecd565b92915050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611ac657600080fd5b813567ffffffffffffffff80821115611ade57600080fd5b818401915084601f830112611af257600080fd5b813581811115611b0457611b04611a9e565b604051601f8201601f19908116603f01168101908382118183101715611b2c57611b2c611a9e565b81604052828152876020848701011115611b4557600080fd5b826020860160208301376000928101602001929092525095945050505050565b634e487b7160e01b600052603260045260246000fd5b60005b83811015611b96578181015183820152602001611b7e565b50506000910152565b60008151808452611bb7816020860160208601611b7b565b601f01601f19169290920160200192915050565b60018060a01b038316815260606020820152600960608201526865786563757465282960b81b608082015260a060408201526000611c0c60a0830184611b9f565b949350505050565b600081518084526020808501945080840160005b83811015611c4d5781516001600160a01b031687529582019590820190600101611c28565b509495945050505050565b600081518084526020808501945080840160005b83811015611c4d57815187529582019590820190600101611c6c565b600081518084526020808501808196508360051b8101915082860160005b85811015611cd0578284038952611cbe848351611b9f565b98850198935090840190600101611ca6565b5091979650505050505050565b60a081526000611cf060a0830188611c14565b8281036020840152611d028188611c58565b90508281036040840152611d168187611c88565b90508281036060840152611d2a8186611c88565b90508281036080840152611d3e8185611b9f565b98975050505050505050565b600060208284031215611d5c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060018201611d8b57611d8b611d63565b5060010190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b602080825282518282018190526000919060409081850190868401855b82811015611cd057815180516001600160a01b031685528601511515868501529284019290850190600101611dd3565b602081526000611e166020830184611c14565b9392505050565b60008251611e2f818460208701611b7b565b9190910192915050565b606081526000611e4c6060830186611c88565b8281036020840152611e5e8186611c88565b91505060018060a01b0383166040830152949350505050565b80820180821115611a9857611a98611d63565b606081526000611e9d6060830186611c14565b8281036020840152611eaf8186611c14565b90508281036040840152611ec38185611c58565b9695505050505050565b600060208284031215611edf57600080fd5b81516001600160a01b0381168114611e1657600080fdfe776974686472617728616464726573732c75696e743235362c616464726573732c75696e743235362c75696e7432353629657865637574655061796c6f616428616464726573732c737472696e672c627974657329a2646970667358221220220b1387fb0002b22d7ddae34ff9f1eff59e9429c51c5b0069bf70c10d56a70364736f6c63430008150033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ADDRESS_THIS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FLUID_RESERVE","outputs":[{"internalType":"contract IFluidReserveContract","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"F_USDC","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"F_USDT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GOVERNOR","outputs":[{"internalType":"contract IGovernorBravo","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LIQUIDITY","outputs":[{"internalType":"contract IFluidLiquidityAdmin","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSAL_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG_2","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG_3","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TEAM_MULTISIG","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TIMELOCK","outputs":[{"internalType":"contract ITimelock","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TREASURY","outputs":[{"internalType":"contract IDSAV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"USDC_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"USDT_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VAULT_T1_FACTORY","outputs":[{"internalType":"contract IFluidVaultT1Factory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"execute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"description","type":"string"}],"name":"propose","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"stETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"verifyProposal","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wBTC_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"weETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wstETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}