{"metadata":"{\"defaultCompiler\":{\"version\":\"0.7.3\"},\"sources\":{\"contracts/payloads/IGP42/PayloadIGP42.sol\":{\"content\":\"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernorBravo {\\n    function _acceptAdmin() external;\\n\\n    function _setVotingDelay(uint256 newVotingDelay) external;\\n\\n    function _setVotingPeriod(uint256 newVotingPeriod) external;\\n\\n    function _acceptAdminOnTimelock() external;\\n\\n    function _setImplementation(address implementation_) external;\\n\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) external returns (uint256);\\n\\n    function admin() external view returns (address);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function timelock() external view returns (address);\\n\\n    function votingDelay() external view returns (uint256);\\n\\n    function votingPeriod() external view returns (uint256);\\n}\\n\\ninterface ITimelock {\\n    function acceptAdmin() external;\\n\\n    function setDelay(uint256 delay_) external;\\n\\n    function setPendingAdmin(address pendingAdmin_) external;\\n\\n    function queueTransaction(address target, uint256 value, string memory signature, bytes memory data, uint256 eta)\\n        external\\n        returns (bytes32);\\n\\n    function executeTransaction(address target, uint256 value, string memory signature, bytes memory data, uint256 eta)\\n        external\\n        payable\\n        returns (bytes memory);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function delay() external view returns (uint256);\\n}\\n\\ninterface AdminModuleStructs {\\n    struct AddressBool {\\n        address addr;\\n        bool value;\\n    }\\n\\n    struct AddressUint256 {\\n        address addr;\\n        uint256 value;\\n    }\\n\\n    struct RateDataV1Params {\\n        address token;\\n        uint256 kink;\\n        uint256 rateAtUtilizationZero;\\n        uint256 rateAtUtilizationKink;\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    struct RateDataV2Params {\\n        address token;\\n        uint256 kink1;\\n        uint256 kink2;\\n        uint256 rateAtUtilizationZero;\\n        uint256 rateAtUtilizationKink1;\\n        uint256 rateAtUtilizationKink2;\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    struct TokenConfig {\\n        address token;\\n        uint256 fee;\\n        uint256 threshold;\\n    }\\n\\n    struct UserSupplyConfig {\\n        address user;\\n        address token;\\n        uint8 mode;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseWithdrawalLimit;\\n    }\\n\\n    struct UserBorrowConfig {\\n        address user;\\n        address token;\\n        uint8 mode;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseDebtCeiling;\\n        uint256 maxDebtCeiling;\\n    }\\n}\\n\\ninterface IFluidLiquidityAdmin {\\n    /// @notice adds/removes auths. Auths generally could be contracts which can have restricted actions defined on contract.\\n    ///         auths can be helpful in reducing governance overhead where it's not needed.\\n    /// @param authsStatus_ array of structs setting allowed status for an address.\\n    ///                     status true => add auth, false => remove auth\\n    function updateAuths(AdminModuleStructs.AddressBool[] calldata authsStatus_) external;\\n\\n    /// @notice adds/removes guardians. Only callable by Governance.\\n    /// @param guardiansStatus_ array of structs setting allowed status for an address.\\n    ///                         status true => add guardian, false => remove guardian\\n    function updateGuardians(AdminModuleStructs.AddressBool[] calldata guardiansStatus_) external;\\n\\n    /// @notice changes the revenue collector address (contract that is sent revenue). Only callable by Governance.\\n    /// @param revenueCollector_  new revenue collector address\\n    function updateRevenueCollector(address revenueCollector_) external;\\n\\n    /// @notice changes current status, e.g. for pausing or unpausing all user operations. Only callable by Auths.\\n    /// @param newStatus_ new status\\n    ///        status = 2 -> pause, status = 1 -> resume.\\n    function changeStatus(uint256 newStatus_) external;\\n\\n    /// @notice                  update tokens rate data version 1. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV1Params with rate data to set for each token\\n    function updateRateDataV1s(AdminModuleStructs.RateDataV1Params[] calldata tokensRateData_) external;\\n\\n    /// @notice                  update tokens rate data version 2. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV2Params with rate data to set for each token\\n    function updateRateDataV2s(AdminModuleStructs.RateDataV2Params[] calldata tokensRateData_) external;\\n\\n    /// @notice updates token configs: fee charge on borrowers interest & storage update utilization threshold.\\n    ///         Only callable by Auths.\\n    /// @param tokenConfigs_ contains token address, fee & utilization threshold\\n    function updateTokenConfigs(AdminModuleStructs.TokenConfig[] calldata tokenConfigs_) external;\\n\\n    /// @notice updates user classes: 0 is for new protocols, 1 is for established protocols.\\n    ///         Only callable by Auths.\\n    /// @param userClasses_ struct array of uint256 value to assign for each user address\\n    function updateUserClasses(AdminModuleStructs.AddressUint256[] calldata userClasses_) external;\\n\\n    /// @notice sets user supply configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userSupplyConfigs_ struct array containing user supply config, see `UserSupplyConfig` struct for more info\\n    function updateUserSupplyConfigs(AdminModuleStructs.UserSupplyConfig[] memory userSupplyConfigs_) external;\\n\\n    /// @notice setting user borrow configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userBorrowConfigs_ struct array containing user borrow config, see `UserBorrowConfig` struct for more info\\n    function updateUserBorrowConfigs(AdminModuleStructs.UserBorrowConfig[] memory userBorrowConfigs_) external;\\n\\n    /// @notice pause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to pause operations for\\n    /// @param supplyTokens_  token addresses to pause withdrawals for\\n    /// @param borrowTokens_  token addresses to pause borrowings for\\n    function pauseUser(address user_, address[] calldata supplyTokens_, address[] calldata borrowTokens_) external;\\n\\n    /// @notice unpause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to unpause operations for\\n    /// @param supplyTokens_  token addresses to unpause withdrawals for\\n    /// @param borrowTokens_  token addresses to unpause borrowings for\\n    function unpauseUser(address user_, address[] calldata supplyTokens_, address[] calldata borrowTokens_) external;\\n\\n    /// @notice         collects revenue for tokens to configured revenueCollector address.\\n    /// @param tokens_  array of tokens to collect revenue for\\n    /// @dev            Note that this can revert if token balance is < revenueAmount (utilization > 100%)\\n    function collectRevenue(address[] calldata tokens_) external;\\n\\n    /// @notice gets the current updated exchange prices for n tokens and updates all prices, rates related data in storage.\\n    /// @param tokens_ tokens to update exchange prices for\\n    /// @return supplyExchangePrices_ new supply rates of overall system for each token\\n    /// @return borrowExchangePrices_ new borrow rates of overall system for each token\\n    function updateExchangePrices(address[] calldata tokens_)\\n        external\\n        returns (uint256[] memory supplyExchangePrices_, uint256[] memory borrowExchangePrices_);\\n}\\n\\ninterface FluidVaultFactory {\\n    /// @notice                         Sets an address as allowed vault deployment logic (`deploymentLogic_`) contract or not.\\n    ///                                 This function can only be called by the owner.\\n    /// @param deploymentLogic_         The address of the vault deployment logic contract to be set.\\n    /// @param allowed_                 A boolean indicating whether the specified address is allowed to deploy new type of vault.\\n    function setVaultDeploymentLogic(address deploymentLogic_, bool allowed_) external;\\n\\n    function setVaultAuth(\\n        address vault_,\\n        address vaultAuth_,\\n        bool allowed_\\n    ) external;\\n\\n    /// @notice                         Computes the address of a vault based on its given ID (`vaultId_`).\\n    /// @param vaultId_                 The ID of the vault.\\n    /// @return vault_                  Returns the computed address of the vault.\\n    function getVaultAddress(\\n        uint256 vaultId_\\n    ) external view returns (address vault_);\\n}\\n\\ncontract PayloadIGP42 {\\n   uint256 public constant PROPOSAL_ID = 42;\\n\\n    address public constant PROPOSER =\\n        0xA45f7bD6A5Ff45D31aaCE6bCD3d426D9328cea01;\\n\\n    address public constant PROPOSER_AVO_MULTISIG =\\n        0x059a94a72451c0ae1Cc1cE4bf0Db52421Bbe8210;\\n\\n    address public constant PROPOSER_AVO_MULTISIG_2 =\\n        0x9efdE135CA4832AbF0408c44c6f5f370eB0f35e8;\\n\\n    address public constant PROPOSER_AVO_MULTISIG_3 =\\n        0x5C43AAC965ff230AC1cF63e924D0153291D78BaD;\\n\\n    IGovernorBravo public constant GOVERNOR = IGovernorBravo(0x0204Cd037B2ec03605CFdFe482D8e257C765fA1B);\\n    ITimelock public constant TIMELOCK = ITimelock(0x2386DC45AdDed673317eF068992F19421B481F4c);\\n\\n    address public constant TEAM_MULTISIG = 0x4F6F977aCDD1177DCD81aB83074855EcB9C2D49e;\\n\\n    address public immutable ADDRESS_THIS;\\n\\n    IFluidLiquidityAdmin public constant LIQUIDITY = IFluidLiquidityAdmin(0x52Aa899454998Be5b000Ad077a46Bbe360F4e497);\\n\\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    FluidVaultFactory public constant VAULT_FACTORY = FluidVaultFactory(0x324c5Dc1fC42c7a4D43d92df1eBA58a54d13Bf2d);\\n\\n    constructor() {\\n        ADDRESS_THIS = address(this);\\n    }\\n\\n    function propose(string memory description) external {\\n        require(\\n            msg.sender == PROPOSER ||\\n                msg.sender == TEAM_MULTISIG ||\\n                address(this) == PROPOSER_AVO_MULTISIG ||\\n                address(this) == PROPOSER_AVO_MULTISIG_2 ||\\n                address(PROPOSER_AVO_MULTISIG_3) == PROPOSER_AVO_MULTISIG_3,\\n            \\\"msg.sender-not-allowed\\\"\\n        );\\n\\n        uint256 totalActions = 1;\\n        address[] memory targets = new address[](totalActions);\\n        uint256[] memory values = new uint256[](totalActions);\\n        string[] memory signatures = new string[](totalActions);\\n        bytes[] memory calldatas = new bytes[](totalActions);\\n\\n        // Action 1: call executePayload on timelock contract to execute payload related to Fluid\\n        targets[0] = address(TIMELOCK);\\n        values[0] = 0;\\n        signatures[0] = \\\"executePayload(address,string,bytes)\\\";\\n        calldatas[0] = abi.encode(ADDRESS_THIS, \\\"execute()\\\", abi.encode());\\n\\n        uint256 proposedId = GOVERNOR.propose(targets, values, signatures, calldatas, description);\\n\\n        require(proposedId == PROPOSAL_ID, \\\"PROPOSAL_IS_NOT_SAME\\\");\\n    }\\n\\n    function execute() external {\\n        require(address(this) == address(TIMELOCK), \\\"not-valid-caller\\\");\\n\\n        // Action 1: List new vault deployment logic of vault type T2, T3 & T4\\n        action1();\\n\\n        // Action 2: Set wBTC and cbBTC rewards auth\\n        action2();\\n    }\\n\\n    function verifyProposal() external view {}\\n\\n    /**\\n     * |\\n     * |     Proposal Payload Actions      |\\n     * |__________________________________\\n     */\\n\\n    /// @notice Action 1: List new vault deployment logic of vault type T2, T3 & T4\\n    function action1() internal {\\n        VAULT_FACTORY.setVaultDeploymentLogic(0xD4d748356D1C82A5565a15a1670D13FB505b018E, true); // T2\\n        VAULT_FACTORY.setVaultDeploymentLogic(0x84b2A41339ef51FFAc89Ffe69cAd53CD92b82A28, true); // T3\\n        VAULT_FACTORY.setVaultDeploymentLogic(0x13472F00A43B59b644B301fEd48651c0C889bdB4, true); // T4\\n    }\\n\\n    /// @notice Action 2: Set wBTC and cbBTC rewards auth\\n    function action2() internal {\\n        VAULT_FACTORY.setVaultAuth(\\n            getVaultAddress(21), // VAULT_WBTC_USDC\\n            0x5E5768B6b42c12dA8e75eb0AA6fD47Be33a5b24e, // Rewards_WBTC_USDC\\n            true\\n        );\\n\\n        VAULT_FACTORY.setVaultAuth(\\n            getVaultAddress(22), // VAULT_WBTC_USDT\\n            0x6D90d460929b921f6C74838a9d25CC69B486D605, // Rewards_WBTC_USDT\\n            true\\n        );\\n\\n         VAULT_FACTORY.setVaultAuth(\\n            getVaultAddress(29), // VAULT_cbBTC_USDC\\n            0x7110cED08f0E26c14a2eF7A980c4F17C70aBa7c0, // Rewards_cbBTC_USDC\\n            true\\n        );\\n\\n        VAULT_FACTORY.setVaultAuth(\\n            getVaultAddress(30), // VAULT_cbBTC_USDT\\n            0xf5fD6c6f936689018215CB10d7a5b99A43a39D28, // Rewards_cbBTC_USDT\\n            true\\n        );\\n    }\\n\\n    // Helpers\\n    function getVaultAddress(uint256 vaultId_) public view returns (address) {\\n        return VAULT_FACTORY.getVaultAddress(vaultId_);\\n    }\\n}\\n\",\"versionPragma\":\"^0.7.0\"}}}","address":"0x2BE66Cf6E7f28f18Afc5fA45928869525f652D06","bytecode":"0x60a060405234801561001057600080fd5b5030606081901b608052610edc6100366000398061051752806106565250610edc6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637aadef8b11610097578063b788f3a111610066578063b788f3a114610195578063bffa7f0f1461019d578063cc025f7c146101a5578063e6bd26a2146101ad57610100565b80637aadef8b1461016a5780637e2f35fa14610172578063a734f06e1461017a578063aa98df391461018257610100565b8063588c77e6116100d3578063588c77e614610148578063614619541461015057806366760d7d1461015a5780636dc0ae221461016257610100565b80630bc9136e14610105578063103f29071461012357806325ad7f4d146101385780632861c7d114610140575b600080fd5b61010d6101c0565b60405161011a9190610e79565b60405180910390f35b61012b6101c5565b60405161011a9190610cb6565b61012b6101dd565b61012b6101f5565b61012b61020d565b610158610225565b005b610158610271565b61012b610273565b61012b61028b565b61012b6102a3565b61012b6102bb565b610158610190366004610acd565b6102d3565b61012b610624565b61012b61063c565b61012b610654565b61012b6101bb366004610b62565b610678565b602a81565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d81565b739efde135ca4832abf0408c44c6f5f370eb0f35e881565b7352aa899454998be5b000ad077a46bbe360f4e49781565b735c43aac965ff230ac1cf63e924d0153291d78bad81565b30732386dc45added673317ef068992f19421b481f4c146102615760405162461bcd60e51b815260040161025890610e4f565b60405180910390fd5b610269610708565b61027161088a565b565b730204cd037b2ec03605cfdfe482d8e257c765fa1b81565b732386dc45added673317ef068992f19421b481f4c81565b73059a94a72451c0ae1cc1ce4bf0db52421bbe821081565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b3373a45f7bd6a5ff45d31aace6bcd3d426d9328cea011480610308575033734f6f977acdd1177dcd81ab83074855ecb9c2d49e145b8061032657503073059a94a72451c0ae1cc1ce4bf0db52421bbe8210145b80610344575030739efde135ca4832abf0408c44c6f5f370eb0f35e8145b8061034d575060015b6103695760405162461bcd60e51b815260040161025890610df1565b604080516001808252818301909252606090826020808301908036833701905050905060608267ffffffffffffffff811180156103a557600080fd5b506040519080825280602002602001820160405280156103cf578160200160208202803683370190505b50905060608367ffffffffffffffff811180156103eb57600080fd5b5060405190808252806020026020018201604052801561041f57816020015b606081526020019060019003908161040a5790505b50905060608467ffffffffffffffff8111801561043b57600080fd5b5060405190808252806020026020018201604052801561046f57816020015b606081526020019060019003908161045a5790505b509050732386dc45added673317ef068992f19421b481f4c8460008151811061049457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000836000815181106104c357fe5b602002602001018181525050604051806060016040528060248152602001610e8360249139826000815181106104f557fe5b6020908102919091018101919091526040805160008152918201815261053e917f0000000000000000000000000000000000000000000000000000000000000000918101610d09565b6040516020818303038152906040528160008151811061055a57fe5b6020908102919091010152604051636d4ab48d60e11b8152600090730204cd037b2ec03605cfdfe482d8e257c765fa1b9063da95691a906105a79088908890889088908e90600401610d52565b602060405180830381600087803b1580156105c157600080fd5b505af11580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f99190610b7a565b9050602a811461061b5760405162461bcd60e51b815260040161025890610e21565b50505050505050565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e81565b73a45f7bd6a5ff45d31aace6bcd3d426d9328cea0181565b7f000000000000000000000000000000000000000000000000000000000000000081565b60405163735e935160e11b815260009073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a2906106b2908590600401610e79565b60206040518083038186803b1580156106ca57600080fd5b505afa1580156106de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107029190610a9f565b92915050565b6040516308a892d960e01b815273324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d906308a892d9906107569073d4d748356d1c82a5565a15a1670d13fb505b018e90600190600401610cca565b600060405180830381600087803b15801561077057600080fd5b505af1158015610784573d6000803e3d6000fd5b50506040516308a892d960e01b815273324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d92506308a892d991506107d6907384b2a41339ef51ffac89ffe69cad53cd92b82a2890600190600401610cca565b600060405180830381600087803b1580156107f057600080fd5b505af1158015610804573d6000803e3d6000fd5b50506040516308a892d960e01b815273324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d92506308a892d99150610856907313472f00a43b59b644b301fed48651c0c889bdb490600190600401610cca565b600060405180830381600087803b15801561087057600080fd5b505af1158015610884573d6000803e3d6000fd5b50505050565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d216108ae6015610678565b735e5768b6b42c12da8e75eb0aa6fd47be33a5b24e60016040518463ffffffff1660e01b81526004016108e393929190610ce5565b600060405180830381600087803b1580156108fd57600080fd5b505af1158015610911573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d216109426016610678565b736d90d460929b921f6c74838a9d25cc69b486d60560016040518463ffffffff1660e01b815260040161097793929190610ce5565b600060405180830381600087803b15801561099157600080fd5b505af11580156109a5573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d216109d6601d610678565b737110ced08f0e26c14a2ef7a980c4f17c70aba7c060016040518463ffffffff1660e01b8152600401610a0b93929190610ce5565b600060405180830381600087803b158015610a2557600080fd5b505af1158015610a39573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d21610a6a601e610678565b73f5fd6c6f936689018215cb10d7a5b99a43a39d2860016040518463ffffffff1660e01b815260040161085693929190610ce5565b600060208284031215610ab0578081fd5b81516001600160a01b0381168114610ac6578182fd5b9392505050565b60006020808385031215610adf578182fd5b823567ffffffffffffffff80821115610af6578384fd5b818501915085601f830112610b09578384fd5b813581811115610b1557fe5b604051601f8201601f1916810185018381118282101715610b3257fe5b6040528181528382018501881015610b48578586fd5b818585018683013790810190930193909352509392505050565b600060208284031215610b73578081fd5b5035919050565b600060208284031215610b8b578081fd5b5051919050565b60008282518085526020808601955080818302840101818601855b84811015610bdb57601f19868403018952610bc9838351610c6b565b98840198925090830190600101610bad565b5090979650505050505050565b60008282518085526020808601955080818302840101818601855b84811015610bdb57601f19868403018952610c1f838351610c6b565b98840198925090830190600101610c03565b6000815180845260208085019450808401835b83811015610c6057815187529582019590820190600101610c44565b509495945050505050565b60008151808452815b81811015610c9057602081850181015186830182015201610c74565b81811115610ca15782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b600060018060a01b038416825260606020830152600960608301526865786563757465282960b81b608083015260a06040830152610d4a60a0830184610c6b565b949350505050565b60a0808252865190820181905260009060209060c0840190828a01845b82811015610d945781516001600160a01b031684529284019290840190600101610d6f565b50505083810382850152610da88189610c31565b9150508281036040840152610dbd8187610be8565b90508281036060840152610dd18186610b92565b90508281036080840152610de58185610c6b565b98975050505050505050565b6020808252601690820152751b5cd9cb9cd95b99195c8b5b9bdd0b585b1b1bddd95960521b604082015260600190565b60208082526014908201527350524f504f53414c5f49535f4e4f545f53414d4560601b604082015260600190565b60208082526010908201526f3737ba16bb30b634b216b1b0b63632b960811b604082015260600190565b9081526020019056fe657865637574655061796c6f616428616464726573732c737472696e672c627974657329a2646970667358221220cc5a74e22434c3f73f20bb1213770182a71d92fdbbf9238182dc5aafe01cbcd164736f6c63430007030033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101005760003560e01c80637aadef8b11610097578063b788f3a111610066578063b788f3a114610195578063bffa7f0f1461019d578063cc025f7c146101a5578063e6bd26a2146101ad57610100565b80637aadef8b1461016a5780637e2f35fa14610172578063a734f06e1461017a578063aa98df391461018257610100565b8063588c77e6116100d3578063588c77e614610148578063614619541461015057806366760d7d1461015a5780636dc0ae221461016257610100565b80630bc9136e14610105578063103f29071461012357806325ad7f4d146101385780632861c7d114610140575b600080fd5b61010d6101c0565b60405161011a9190610e79565b60405180910390f35b61012b6101c5565b60405161011a9190610cb6565b61012b6101dd565b61012b6101f5565b61012b61020d565b610158610225565b005b610158610271565b61012b610273565b61012b61028b565b61012b6102a3565b61012b6102bb565b610158610190366004610acd565b6102d3565b61012b610624565b61012b61063c565b61012b610654565b61012b6101bb366004610b62565b610678565b602a81565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d81565b739efde135ca4832abf0408c44c6f5f370eb0f35e881565b7352aa899454998be5b000ad077a46bbe360f4e49781565b735c43aac965ff230ac1cf63e924d0153291d78bad81565b30732386dc45added673317ef068992f19421b481f4c146102615760405162461bcd60e51b815260040161025890610e4f565b60405180910390fd5b610269610708565b61027161088a565b565b730204cd037b2ec03605cfdfe482d8e257c765fa1b81565b732386dc45added673317ef068992f19421b481f4c81565b73059a94a72451c0ae1cc1ce4bf0db52421bbe821081565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b3373a45f7bd6a5ff45d31aace6bcd3d426d9328cea011480610308575033734f6f977acdd1177dcd81ab83074855ecb9c2d49e145b8061032657503073059a94a72451c0ae1cc1ce4bf0db52421bbe8210145b80610344575030739efde135ca4832abf0408c44c6f5f370eb0f35e8145b8061034d575060015b6103695760405162461bcd60e51b815260040161025890610df1565b604080516001808252818301909252606090826020808301908036833701905050905060608267ffffffffffffffff811180156103a557600080fd5b506040519080825280602002602001820160405280156103cf578160200160208202803683370190505b50905060608367ffffffffffffffff811180156103eb57600080fd5b5060405190808252806020026020018201604052801561041f57816020015b606081526020019060019003908161040a5790505b50905060608467ffffffffffffffff8111801561043b57600080fd5b5060405190808252806020026020018201604052801561046f57816020015b606081526020019060019003908161045a5790505b509050732386dc45added673317ef068992f19421b481f4c8460008151811061049457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000836000815181106104c357fe5b602002602001018181525050604051806060016040528060248152602001610e8360249139826000815181106104f557fe5b6020908102919091018101919091526040805160008152918201815261053e917f0000000000000000000000000000000000000000000000000000000000000000918101610d09565b6040516020818303038152906040528160008151811061055a57fe5b6020908102919091010152604051636d4ab48d60e11b8152600090730204cd037b2ec03605cfdfe482d8e257c765fa1b9063da95691a906105a79088908890889088908e90600401610d52565b602060405180830381600087803b1580156105c157600080fd5b505af11580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f99190610b7a565b9050602a811461061b5760405162461bcd60e51b815260040161025890610e21565b50505050505050565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e81565b73a45f7bd6a5ff45d31aace6bcd3d426d9328cea0181565b7f000000000000000000000000000000000000000000000000000000000000000081565b60405163735e935160e11b815260009073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a2906106b2908590600401610e79565b60206040518083038186803b1580156106ca57600080fd5b505afa1580156106de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107029190610a9f565b92915050565b6040516308a892d960e01b815273324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d906308a892d9906107569073d4d748356d1c82a5565a15a1670d13fb505b018e90600190600401610cca565b600060405180830381600087803b15801561077057600080fd5b505af1158015610784573d6000803e3d6000fd5b50506040516308a892d960e01b815273324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d92506308a892d991506107d6907384b2a41339ef51ffac89ffe69cad53cd92b82a2890600190600401610cca565b600060405180830381600087803b1580156107f057600080fd5b505af1158015610804573d6000803e3d6000fd5b50506040516308a892d960e01b815273324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d92506308a892d99150610856907313472f00a43b59b644b301fed48651c0c889bdb490600190600401610cca565b600060405180830381600087803b15801561087057600080fd5b505af1158015610884573d6000803e3d6000fd5b50505050565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d216108ae6015610678565b735e5768b6b42c12da8e75eb0aa6fd47be33a5b24e60016040518463ffffffff1660e01b81526004016108e393929190610ce5565b600060405180830381600087803b1580156108fd57600080fd5b505af1158015610911573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d216109426016610678565b736d90d460929b921f6c74838a9d25cc69b486d60560016040518463ffffffff1660e01b815260040161097793929190610ce5565b600060405180830381600087803b15801561099157600080fd5b505af11580156109a5573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d216109d6601d610678565b737110ced08f0e26c14a2ef7a980c4f17c70aba7c060016040518463ffffffff1660e01b8152600401610a0b93929190610ce5565b600060405180830381600087803b158015610a2557600080fd5b505af1158015610a39573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d21610a6a601e610678565b73f5fd6c6f936689018215cb10d7a5b99a43a39d2860016040518463ffffffff1660e01b815260040161085693929190610ce5565b600060208284031215610ab0578081fd5b81516001600160a01b0381168114610ac6578182fd5b9392505050565b60006020808385031215610adf578182fd5b823567ffffffffffffffff80821115610af6578384fd5b818501915085601f830112610b09578384fd5b813581811115610b1557fe5b604051601f8201601f1916810185018381118282101715610b3257fe5b6040528181528382018501881015610b48578586fd5b818585018683013790810190930193909352509392505050565b600060208284031215610b73578081fd5b5035919050565b600060208284031215610b8b578081fd5b5051919050565b60008282518085526020808601955080818302840101818601855b84811015610bdb57601f19868403018952610bc9838351610c6b565b98840198925090830190600101610bad565b5090979650505050505050565b60008282518085526020808601955080818302840101818601855b84811015610bdb57601f19868403018952610c1f838351610c6b565b98840198925090830190600101610c03565b6000815180845260208085019450808401835b83811015610c6057815187529582019590820190600101610c44565b509495945050505050565b60008151808452815b81811015610c9057602081850181015186830182015201610c74565b81811115610ca15782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b600060018060a01b038416825260606020830152600960608301526865786563757465282960b81b608083015260a06040830152610d4a60a0830184610c6b565b949350505050565b60a0808252865190820181905260009060209060c0840190828a01845b82811015610d945781516001600160a01b031684529284019290840190600101610d6f565b50505083810382850152610da88189610c31565b9150508281036040840152610dbd8187610be8565b90508281036060840152610dd18186610b92565b90508281036080840152610de58185610c6b565b98975050505050505050565b6020808252601690820152751b5cd9cb9cd95b99195c8b5b9bdd0b585b1b1bddd95960521b604082015260600190565b60208082526014908201527350524f504f53414c5f49535f4e4f545f53414d4560601b604082015260600190565b60208082526010908201526f3737ba16bb30b634b216b1b0b63632b960811b604082015260600190565b9081526020019056fe657865637574655061796c6f616428616464726573732c737472696e672c627974657329a2646970667358221220cc5a74e22434c3f73f20bb1213770182a71d92fdbbf9238182dc5aafe01cbcd164736f6c63430007030033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ADDRESS_THIS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GOVERNOR","outputs":[{"internalType":"contract IGovernorBravo","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LIQUIDITY","outputs":[{"internalType":"contract IFluidLiquidityAdmin","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSAL_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG_2","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG_3","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TEAM_MULTISIG","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TIMELOCK","outputs":[{"internalType":"contract ITimelock","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VAULT_FACTORY","outputs":[{"internalType":"contract FluidVaultFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"execute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"vaultId_","type":"uint256"}],"name":"getVaultAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"description","type":"string"}],"name":"propose","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"verifyProposal","outputs":[],"stateMutability":"view","type":"function"}]}