{"metadata":"{\"defaultCompiler\":{\"version\":\"0.7.3\"},\"sources\":{\"contracts/payloads/IGP67/PayloadIGP67.sol\":{\"content\":\"pragma solidity ^0.8.21;\\npragma experimental ABIEncoderV2;\\n\\nimport {BigMathMinified} from \\\"../libraries/bigMathMinified.sol\\\";\\nimport {LiquidityCalcs} from \\\"../libraries/liquidityCalcs.sol\\\";\\nimport {LiquiditySlotsLink} from \\\"../libraries/liquiditySlotsLink.sol\\\";\\n\\nimport {IGovernorBravo} from \\\"../common/interfaces/IGovernorBravo.sol\\\";\\nimport {ITimelock} from \\\"../common/interfaces/ITimelock.sol\\\";\\n\\nimport {IFluidLiquidityAdmin, AdminModuleStructs as FluidLiquidityAdminStructs} from \\\"../common/interfaces/IFluidLiquidity.sol\\\";\\nimport {IFluidReserveContract} from \\\"../common/interfaces/IFluidReserveContract.sol\\\";\\n\\nimport {IFluidVaultFactory} from \\\"../common/interfaces/IFluidVaultFactory.sol\\\";\\nimport {IFluidDexFactory} from \\\"../common/interfaces/IFluidDexFactory.sol\\\";\\n\\nimport {IFluidDex, IFluidAdminDex, IFluidDexResolver} from \\\"../common/interfaces/IFluidDex.sol\\\";\\n\\nimport {IFluidVault, IFluidVaultT1} from \\\"../common/interfaces/IFluidVault.sol\\\";\\n\\nimport {IFTokenAdmin, ILendingRewards} from \\\"../common/interfaces/IFToken.sol\\\";\\n\\nimport {IDSAV2} from \\\"../common/interfaces/IDSA.sol\\\";\\nimport {IERC20} from \\\"../common/interfaces/IERC20.sol\\\";\\nimport {IProxy} from \\\"../common/interfaces/IProxy.sol\\\";\\nimport {PayloadIGPConstants} from \\\"../common/constants.sol\\\";\\nimport {PayloadIGPHelpers} from \\\"../common/helpers.sol\\\";\\n\\ninterface IStETHRedemptionProtocol {\\n    /// @notice Sets `maxLTV` to `maxLTV_` (in 1e2: 1% = 100, 100% = 10000). Must be > 0 and < 100%.\\n    function setMaxLTV(uint16 maxLTV_) external;\\n}\\n\\ncontract PayloadIGP67 is PayloadIGPConstants, PayloadIGPHelpers {\\n    uint256 public constant PROPOSAL_ID = 67;\\n\\n    // State\\n    uint256 public INST_ETH_VAULT_ID = 0;\\n    uint256 public INST_ETH_DEX_ID = 0;\\n    uint256 public ETH_USDC_DEX_ID = 0;\\n    uint256 public ETH_USDC_VAULT_ID = 0;\\n\\n    uint256 public CBBTC_WBTC_NEW_CENTER_PRICE = 0;\\n\\n    function propose(string memory description) external {\\n        require(\\n            msg.sender == PROPOSER ||\\n                msg.sender == TEAM_MULTISIG ||\\n                address(this) == PROPOSER_AVO_MULTISIG ||\\n                address(this) == PROPOSER_AVO_MULTISIG_2 ||\\n                address(this) == PROPOSER_AVO_MULTISIG_3 ||\\n                address(this) == PROPOSER_AVO_MULTISIG_4 ||\\n                address(this) == PROPOSER_AVO_MULTISIG_5,\\n            \\\"msg.sender-not-allowed\\\"\\n        );\\n\\n        uint256 totalActions = 1;\\n        address[] memory targets = new address[](totalActions);\\n        uint256[] memory values = new uint256[](totalActions);\\n        string[] memory signatures = new string[](totalActions);\\n        bytes[] memory calldatas = new bytes[](totalActions);\\n\\n        targets[0] = address(TIMELOCK);\\n        values[0] = 0;\\n        signatures[0] = \\\"executePayload(address,string,bytes)\\\";\\n        calldatas[0] = abi.encode(ADDRESS_THIS, \\\"execute()\\\", abi.encode());\\n\\n        uint256 proposedId = GOVERNOR.propose(\\n            targets,\\n            values,\\n            signatures,\\n            calldatas,\\n            description\\n        );\\n\\n        require(proposedId == PROPOSAL_ID, \\\"PROPOSAL_IS_NOT_SAME\\\");\\n    }\\n\\n    function execute() external {\\n        require(address(this) == address(TIMELOCK), \\\"not-valid-caller\\\");\\n\\n        // Action 1: Set Dust Allowance to rsETH-ETH and weETHs-ETH dex pools\\n        action1();\\n\\n        // Action 2: Set Dust Allowance to rsETH-ETH<>wstETH, rsETH<>wstETH, weETHs-ETH<>wstETH vaults\\n        action2();\\n\\n        // Action 3: Increase Allowance and LTV of stETH redemption protocol\\n        action3();\\n\\n        // Action 4: Remove Team Multisig as Auth from ETH-USDC and INST-ETH dex and vaults\\n        action4();\\n\\n        // Action 5: Update Fluid Reserve Contract Implementation\\n        action5();\\n\\n        // Action 6: Increase USDC allowance to cbBTC<>USDC and wBTC<>USDC vaults\\n        action6();\\n\\n        // Action 7: Update cbBTC-wBTC Dex Config\\n        action7();\\n    }\\n\\n    function verifyProposal() external view {}\\n\\n    /**\\n     * |\\n     * |     Team Multisig Actions      |\\n     * |__________________________________\\n     */\\n    function setState(\\n        uint256 inst_eth_dex_id,\\n        uint256 inst_eth_vault_id,\\n        uint256 eth_usdc_dex_id,\\n        uint256 eth_usdc_vault_id,\\n        uint256 cbBTC_wBTC_new_center_price\\n    ) external {\\n        if (msg.sender != TEAM_MULTISIG) {\\n            revert(\\\"not-team-multisig\\\");\\n        }\\n\\n        INST_ETH_DEX_ID = inst_eth_dex_id;\\n        INST_ETH_VAULT_ID = inst_eth_vault_id;\\n        ETH_USDC_DEX_ID = eth_usdc_dex_id;\\n        ETH_USDC_VAULT_ID = eth_usdc_vault_id;\\n        CBBTC_WBTC_NEW_CENTER_PRICE = cbBTC_wBTC_new_center_price;\\n    }\\n\\n    /**\\n     * |\\n     * |     Proposal Payload Actions      |\\n     * |__________________________________\\n     */\\n    /// @notice Action 1: Set Dust Allowance to rsETH-ETH & weETHs-ETH dex pools\\n    function action1() internal {\\n        {\\n            // rsETH-ETH\\n            Dex memory DEX_rsETH_ETH = Dex({\\n                dex: getDexAddress(13),\\n                tokenA: rsETH_ADDRESS,\\n                tokenB: ETH_ADDRESS,\\n                smartCollateral: true,\\n                smartDebt: false,\\n                baseWithdrawalLimitInUSD: 50_000, // $50k\\n                baseBorrowLimitInUSD: 0, // $0\\n                maxBorrowLimitInUSD: 0 // $0\\n            });\\n            setDexLimits(DEX_rsETH_ETH); // Smart Collateral\\n\\n            DEX_FACTORY.setDexAuth(getDexAddress(13), TEAM_MULTISIG, true);\\n        }\\n\\n        {\\n            // weETHs-ETH\\n            Dex memory DEX_weETHs_ETH = Dex({\\n                dex: getDexAddress(14),\\n                tokenA: weETHs_ADDRESS,\\n                tokenB: ETH_ADDRESS,\\n                smartCollateral: true,\\n                smartDebt: false,\\n                baseWithdrawalLimitInUSD: 50_000, // $50k\\n                baseBorrowLimitInUSD: 0, // $0\\n                maxBorrowLimitInUSD: 0 // $0\\n            });\\n            setDexLimits(DEX_weETHs_ETH); // Smart Collateral\\n\\n            DEX_FACTORY.setDexAuth(getDexAddress(14), TEAM_MULTISIG, true);\\n        }\\n    }\\n\\n    /// @notice Action 2: Set dust allowance to rsETH-ETH<>wstETH, rsETH<>wstETH, weETHs-ETH<>wstETH vaults\\n    function action2() internal {\\n        {\\n            // [TYPE 2] rsETH-ETH<>wstETH | Smart collateral & debt\\n            Vault memory VAULT_rsETH_ETH_AND_wstETH = Vault({\\n                vault: getVaultAddress(78),\\n                vaultType: TYPE.TYPE_2,\\n                supplyToken: address(0),\\n                borrowToken: wstETH_ADDRESS,\\n                baseWithdrawalLimitInUSD: 0, // $0\\n                baseBorrowLimitInUSD: 40_000, // $40k\\n                maxBorrowLimitInUSD: 50_000 // $50k\\n            });\\n\\n            setVaultLimits(VAULT_rsETH_ETH_AND_wstETH); // TYPE_2 => 78\\n\\n            VAULT_FACTORY.setVaultAuth(\\n                getVaultAddress(78),\\n                TEAM_MULTISIG,\\n                true\\n            );\\n        }\\n\\n        {\\n            // [TYPE 1] rsETH<>wstETH | collateral & debt\\n            Vault memory VAULT_rsETH_AND_wstETH = Vault({\\n                vault: getVaultAddress(79),\\n                vaultType: TYPE.TYPE_1,\\n                supplyToken: rsETH_ADDRESS,\\n                borrowToken: wstETH_ADDRESS,\\n                baseWithdrawalLimitInUSD: 50_000, // $50k\\n                baseBorrowLimitInUSD: 40_000, // $40k\\n                maxBorrowLimitInUSD: 50_000 // $50k\\n            });\\n\\n            setVaultLimits(VAULT_rsETH_AND_wstETH); // TYPE_1 => 79\\n\\n            VAULT_FACTORY.setVaultAuth(\\n                getVaultAddress(79),\\n                TEAM_MULTISIG,\\n                true\\n            );\\n        }\\n\\n        {\\n            // [TYPE 2] weETHs-ETH<>wstETH | Smart collateral & debt\\n            Vault memory VAULT_weETHs_ETH_AND_wstETH = Vault({\\n                vault: getVaultAddress(80),\\n                vaultType: TYPE.TYPE_2,\\n                supplyToken: address(0),\\n                borrowToken: wstETH_ADDRESS,\\n                baseWithdrawalLimitInUSD: 0, // $0\\n                baseBorrowLimitInUSD: 40_000, // $40k\\n                maxBorrowLimitInUSD: 50_000 // $50k\\n            });\\n\\n            setVaultLimits(VAULT_weETHs_ETH_AND_wstETH); // TYPE_2 => 80\\n\\n            VAULT_FACTORY.setVaultAuth(\\n                getVaultAddress(80),\\n                TEAM_MULTISIG,\\n                true\\n            );\\n        }\\n    }\\n\\n    /// @notice Action 3: Increase Allowance and LTV of stETH redemption protocol\\n    function action3() internal {\\n        {\\n            // Increase Allowance to 10k ETH\\n            uint256 amount_ = getRawAmount(ETH_ADDRESS, 10_000, 0, false);\\n\\n            BorrowProtocolConfig memory config_ = BorrowProtocolConfig({\\n                protocol: 0x1F6B2bFDd5D1e6AdE7B17027ff5300419a56Ad6b,\\n                borrowToken: ETH_ADDRESS,\\n                expandPercent: 0,\\n                expandDuration: 1,\\n                baseBorrowLimitInUSD: amount_,\\n                maxBorrowLimitInUSD: (amount_ * 1001) / 1000\\n            });\\n\\n            setBorrowProtocolLimits(config_);\\n        }\\n\\n        {\\n            // Increase LTV to 95%\\n            IStETHRedemptionProtocol(0x1F6B2bFDd5D1e6AdE7B17027ff5300419a56Ad6b)\\n                .setMaxLTV(95 * 1e2);\\n        }\\n    }\\n\\n    /// @notice Action 4: Remove Team Multisig as Auth from ETH-USDC and INST-ETH dex and vaults\\n    function action4() internal {\\n        uint256 eth_usdc_dex_id = PayloadIGP67(ADDRESS_THIS).ETH_USDC_DEX_ID();\\n        uint256 eth_usdc_vault_id = PayloadIGP67(ADDRESS_THIS)\\n            .ETH_USDC_VAULT_ID();\\n        uint256 inst_eth_dex_id = PayloadIGP67(ADDRESS_THIS).INST_ETH_DEX_ID();\\n        uint256 inst_eth_vault_id = PayloadIGP67(ADDRESS_THIS)\\n            .INST_ETH_VAULT_ID();\\n\\n        if (inst_eth_dex_id != 420)\\n            DEX_FACTORY.setDexAuth(\\n                getDexAddress(inst_eth_dex_id),\\n                TEAM_MULTISIG,\\n                false\\n            );\\n        if (eth_usdc_dex_id != 420)\\n            DEX_FACTORY.setDexAuth(\\n                getDexAddress(eth_usdc_dex_id),\\n                TEAM_MULTISIG,\\n                false\\n            );\\n\\n        if (inst_eth_vault_id != 420)\\n            VAULT_FACTORY.setVaultAuth(\\n                getVaultAddress(inst_eth_vault_id),\\n                TEAM_MULTISIG,\\n                false\\n            );\\n        if (eth_usdc_vault_id != 420)\\n            VAULT_FACTORY.setVaultAuth(\\n                getVaultAddress(eth_usdc_vault_id),\\n                TEAM_MULTISIG,\\n                false\\n            );\\n    }\\n\\n    /// @notice Action 5: Update Fluid Reserve Contract Implementation\\n    function action5() internal {\\n        IProxy(address(FLUID_RESERVE)).upgradeToAndCall(\\n            address(0xE2283Cdec12c6AF6C51557BB4640c640800d7060),\\n            abi.encode()\\n        );\\n    }\\n\\n    /// @notice Action 6: Increase USDC allowance to cbBTC<>USDC and wBTC<>USDC vaults\\n    function action6() internal {\\n        address[] memory protocols = new address[](2);\\n        address[] memory tokens = new address[](2);\\n        uint256[] memory amounts = new uint256[](2);\\n\\n        {\\n            // wBTC<>USDCs\\n            address wBTC_USDC_VAULT = getVaultAddress(21);\\n\\n            uint256 allowance = IERC20(USDC_ADDRESS).allowance(\\n                address(FLUID_RESERVE),\\n                wBTC_USDC_VAULT\\n            );\\n\\n            protocols[0] = wBTC_USDC_VAULT;\\n            tokens[0] = USDC_ADDRESS;\\n            amounts[0] = allowance + (6_000 * 1e6);\\n        }\\n\\n        {\\n            // cbBTC<>USDC\\n            address cbBTC_USDC_VAULT = getVaultAddress(29);\\n\\n            uint256 allowance = IERC20(USDC_ADDRESS).allowance(\\n                address(FLUID_RESERVE),\\n                cbBTC_USDC_VAULT\\n            );\\n\\n            protocols[1] = cbBTC_USDC_VAULT;\\n            tokens[1] = USDC_ADDRESS;\\n            amounts[1] = allowance + (4_000 * 1e6);\\n        }\\n\\n        FLUID_RESERVE.approve(protocols, tokens, amounts);\\n    }\\n\\n    /// @notice Action 7: Update cbBTC-wBTC Dex Config\\n    function action7() internal {\\n        address cbBTC_wBTC_DEX_ADDRESS = getDexAddress(3);\\n\\n        uint256 newCenterPrice_ = PayloadIGP67(ADDRESS_THIS)\\n            .CBBTC_WBTC_NEW_CENTER_PRICE();\\n\\n        if (newCenterPrice_ == 420) return;\\n\\n        require(\\n            newCenterPrice_ > 997 && newCenterPrice_ <= 998,\\n            \\\"new-center-price-is-too-high\\\"\\n        );\\n\\n        // Update Center Price Limits between 0.3% to 0.2%\\n        uint256 minCenterPrice_ = (newCenterPrice_ * 1e27) / 1000;\\n        uint256 maxCenterPrice_ = uint256(1e27 * 1000) / newCenterPrice_;\\n\\n        IFluidDex(cbBTC_wBTC_DEX_ADDRESS).updateCenterPriceLimits(\\n            maxCenterPrice_,\\n            minCenterPrice_\\n        );\\n    }\\n\\n    /**\\n     * |\\n     * |     Proposal Payload Helpers      |\\n     * |__________________________________\\n     */\\n    struct Dex {\\n        address dex;\\n        address tokenA;\\n        address tokenB;\\n        bool smartCollateral;\\n        bool smartDebt;\\n        uint256 baseWithdrawalLimitInUSD;\\n        uint256 baseBorrowLimitInUSD;\\n        uint256 maxBorrowLimitInUSD;\\n    }\\n\\n    enum TYPE {\\n        TYPE_1,\\n        TYPE_2,\\n        TYPE_3,\\n        TYPE_4\\n    }\\n\\n    struct Vault {\\n        address vault;\\n        TYPE vaultType;\\n        address supplyToken;\\n        address borrowToken;\\n        uint256 baseWithdrawalLimitInUSD;\\n        uint256 baseBorrowLimitInUSD;\\n        uint256 maxBorrowLimitInUSD;\\n    }\\n\\n    function setDexLimits(Dex memory dex_) internal {\\n        // Smart Collateral\\n        if (dex_.smartCollateral) {\\n            SupplyProtocolConfig memory protocolConfigTokenA_ = SupplyProtocolConfig({\\n                protocol: dex_.dex,\\n                supplyToken: dex_.tokenA,\\n                expandPercent: 50 * 1e2, // 50%\\n                expandDuration: 1 hours, // 1 hour\\n                baseWithdrawalLimitInUSD: dex_.baseWithdrawalLimitInUSD\\n            });\\n\\n            setSupplyProtocolLimits(protocolConfigTokenA_);\\n\\n            SupplyProtocolConfig memory protocolConfigTokenB_ = SupplyProtocolConfig({\\n                protocol: dex_.dex,\\n                supplyToken: dex_.tokenB,\\n                expandPercent: 50 * 1e2, // 50%\\n                expandDuration: 1 hours, // 1 hour\\n                baseWithdrawalLimitInUSD: dex_.baseWithdrawalLimitInUSD\\n            });\\n\\n            setSupplyProtocolLimits(protocolConfigTokenB_);\\n        }\\n\\n        // Smart Debt\\n        if (dex_.smartDebt) {\\n            BorrowProtocolConfig memory protocolConfigTokenA_ = BorrowProtocolConfig({\\n                protocol: dex_.dex,\\n                borrowToken: dex_.tokenA,\\n                expandPercent: 50 * 1e2, // 50%\\n                expandDuration: 1 hours, // 1 hour\\n                baseBorrowLimitInUSD: dex_.baseBorrowLimitInUSD,\\n                maxBorrowLimitInUSD: dex_.maxBorrowLimitInUSD\\n            });\\n\\n            setBorrowProtocolLimits(protocolConfigTokenA_);\\n\\n            BorrowProtocolConfig memory protocolConfigTokenB_ = BorrowProtocolConfig({\\n                protocol: dex_.dex,\\n                borrowToken: dex_.tokenB,\\n                expandPercent: 50 * 1e2, // 50%\\n                expandDuration: 1 hours, // 1 hour\\n                baseBorrowLimitInUSD: dex_.baseBorrowLimitInUSD,\\n                maxBorrowLimitInUSD: dex_.maxBorrowLimitInUSD\\n            });\\n\\n            setBorrowProtocolLimits(protocolConfigTokenB_);\\n        }\\n    }\\n\\n    function setVaultLimits(Vault memory vault_) internal {\\n        if (\\n            vault_.vaultType == TYPE.TYPE_3 || vault_.vaultType == TYPE.TYPE_1\\n        ) {\\n            SupplyProtocolConfig memory protocolConfig_ = SupplyProtocolConfig({\\n                protocol: vault_.vault,\\n                supplyToken: vault_.supplyToken,\\n                expandPercent: 25 * 1e2, // 25%\\n                expandDuration: 12 hours, // 12 hours\\n                baseWithdrawalLimitInUSD: vault_.baseWithdrawalLimitInUSD\\n            });\\n\\n            setSupplyProtocolLimits(protocolConfig_);\\n        }\\n\\n        if (\\n            vault_.vaultType == TYPE.TYPE_2 || vault_.vaultType == TYPE.TYPE_1\\n        ) {\\n            BorrowProtocolConfig memory protocolConfig_ = BorrowProtocolConfig({\\n                protocol: vault_.vault,\\n                borrowToken: vault_.borrowToken,\\n                expandPercent: 20 * 1e2, // 20%\\n                expandDuration: 12 hours, // 12 hours\\n                baseBorrowLimitInUSD: vault_.baseBorrowLimitInUSD,\\n                maxBorrowLimitInUSD: vault_.maxBorrowLimitInUSD\\n            });\\n\\n            setBorrowProtocolLimits(protocolConfig_);\\n        }\\n    }\\n\\n    // Token Prices Constants\\n    uint256 public constant ETH_USD_PRICE = 3_900 * 1e2;\\n    uint256 public constant wstETH_USD_PRICE = 4_650 * 1e2;\\n    uint256 public constant weETH_USD_PRICE = 4_150 * 1e2;\\n    uint256 public constant rsETH_USD_PRICE = 4_050 * 1e2;\\n    uint256 public constant weETHs_USD_PRICE = 3_950 * 1e2;\\n\\n    uint256 public constant BTC_USD_PRICE = 101_000 * 1e2;\\n\\n    uint256 public constant STABLE_USD_PRICE = 1 * 1e2;\\n    uint256 public constant sUSDe_USD_PRICE = 1 * 1e2;\\n    uint256 public constant sUSDs_USD_PRICE = 1 * 1e2;\\n\\n    uint256 public constant INST_USD_PRICE = 8.5 * 1e2;\\n\\n    function getRawAmount(\\n        address token,\\n        uint256 amount,\\n        uint256 amountInUSD,\\n        bool isSupply\\n    ) public view override returns (uint256) {\\n        if (amount > 0 && amountInUSD > 0) {\\n            revert(\\\"both usd and amount are not zero\\\");\\n        }\\n        uint256 exchangePriceAndConfig_ = LIQUIDITY.readFromStorage(\\n            LiquiditySlotsLink.calculateMappingStorageSlot(\\n                LiquiditySlotsLink.LIQUIDITY_EXCHANGE_PRICES_MAPPING_SLOT,\\n                token\\n            )\\n        );\\n\\n        (\\n            uint256 supplyExchangePrice,\\n            uint256 borrowExchangePrice\\n        ) = LiquidityCalcs.calcExchangePrices(exchangePriceAndConfig_);\\n\\n        uint256 usdPrice = 0;\\n        uint256 decimals = 18;\\n        if (token == ETH_ADDRESS) {\\n            usdPrice = ETH_USD_PRICE;\\n            decimals = 18;\\n        } else if (token == wstETH_ADDRESS) {\\n            usdPrice = wstETH_USD_PRICE;\\n            decimals = 18;\\n        } else if (token == weETH_ADDRESS) {\\n            usdPrice = weETH_USD_PRICE;\\n            decimals = 18;\\n        } else if (token == rsETH_ADDRESS) {\\n            usdPrice = rsETH_USD_PRICE;\\n            decimals = 18;\\n        } else if (token == weETHs_ADDRESS) {\\n            usdPrice = weETHs_USD_PRICE;\\n            decimals = 18;\\n        } else if (token == cbBTC_ADDRESS || token == WBTC_ADDRESS) {\\n            usdPrice = BTC_USD_PRICE;\\n            decimals = 8;\\n        } else if (token == USDC_ADDRESS || token == USDT_ADDRESS) {\\n            usdPrice = STABLE_USD_PRICE;\\n            decimals = 6;\\n        } else if (token == sUSDe_ADDRESS) {\\n            usdPrice = sUSDe_USD_PRICE;\\n            decimals = 18;\\n        } else if (token == sUSDs_ADDRESS) {\\n            usdPrice = sUSDs_USD_PRICE;\\n            decimals = 18;\\n        } else if (token == GHO_ADDRESS || token == USDe_ADDRESS) {\\n            usdPrice = STABLE_USD_PRICE;\\n            decimals = 18;\\n        } else if (token == INST_ADDRESS) {\\n            usdPrice = INST_USD_PRICE;\\n            decimals = 18;\\n        } else {\\n            revert(\\\"not-found\\\");\\n        }\\n\\n        uint256 exchangePrice = isSupply\\n            ? supplyExchangePrice\\n            : borrowExchangePrice;\\n\\n        if (amount > 0) {\\n            return (amount * 1e12) / exchangePrice;\\n        } else {\\n            return\\n                (amountInUSD * 1e12 * (10 ** decimals)) /\\n                ((usdPrice * exchangePrice) / 1e2);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/libraries/bigMathMinified.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @title library that represents a number in BigNumber(coefficient and exponent) format to store in smaller bits.\\n/// @notice the number is divided into two parts: a coefficient and an exponent. This comes at a cost of losing some precision\\n/// at the end of the number because the exponent simply fills it with zeroes. This precision is oftentimes negligible and can\\n/// result in significant gas cost reduction due to storage space reduction.\\n/// Also note, a valid big number is as follows: if the exponent is > 0, then coefficient last bits should be occupied to have max precision.\\n/// @dev roundUp is more like a increase 1, which happens everytime for the same number.\\n/// roundDown simply sets trailing digits after coefficientSize to zero (floor), only once for the same number.\\nlibrary BigMathMinified {\\n    /// @dev constants to use for `roundUp` input param to increase readability\\n    bool internal constant ROUND_DOWN = false;\\n    bool internal constant ROUND_UP = true;\\n\\n    /// @dev converts `normal` number to BigNumber with `exponent` and `coefficient` (or precision).\\n    /// e.g.:\\n    /// 5035703444687813576399599 (normal) = (coefficient[32bits], exponent[8bits])[40bits]\\n    /// 5035703444687813576399599 (decimal) => 10000101010010110100000011111011110010100110100000000011100101001101001101011101111 (binary)\\n    ///                                     => 10000101010010110100000011111011000000000000000000000000000000000000000000000000000\\n    ///                                                                        ^-------------------- 51(exponent) -------------- ^\\n    /// coefficient = 1000,0101,0100,1011,0100,0000,1111,1011               (2236301563)\\n    /// exponent =                                            0011,0011     (51)\\n    /// bigNumber =   1000,0101,0100,1011,0100,0000,1111,1011,0011,0011     (572493200179)\\n    ///\\n    /// @param normal number which needs to be converted into Big Number\\n    /// @param coefficientSize at max how many bits of precision there should be (64 = uint64 (64 bits precision))\\n    /// @param exponentSize at max how many bits of exponent there should be (8 = uint8 (8 bits exponent))\\n    /// @param roundUp signals if result should be rounded down or up\\n    /// @return bigNumber converted bigNumber (coefficient << exponent)\\n    function toBigNumber(\\n        uint256 normal,\\n        uint256 coefficientSize,\\n        uint256 exponentSize,\\n        bool roundUp\\n    ) internal pure returns (uint256 bigNumber) {\\n        assembly {\\n            let lastBit_\\n            let number_ := normal\\n            if gt(number_, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x80, number_)\\n                lastBit_ := 0x80\\n            }\\n            if gt(number_, 0xFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x40, number_)\\n                lastBit_ := add(lastBit_, 0x40)\\n            }\\n            if gt(number_, 0xFFFFFFFF) {\\n                number_ := shr(0x20, number_)\\n                lastBit_ := add(lastBit_, 0x20)\\n            }\\n            if gt(number_, 0xFFFF) {\\n                number_ := shr(0x10, number_)\\n                lastBit_ := add(lastBit_, 0x10)\\n            }\\n            if gt(number_, 0xFF) {\\n                number_ := shr(0x8, number_)\\n                lastBit_ := add(lastBit_, 0x8)\\n            }\\n            if gt(number_, 0xF) {\\n                number_ := shr(0x4, number_)\\n                lastBit_ := add(lastBit_, 0x4)\\n            }\\n            if gt(number_, 0x3) {\\n                number_ := shr(0x2, number_)\\n                lastBit_ := add(lastBit_, 0x2)\\n            }\\n            if gt(number_, 0x1) {\\n                lastBit_ := add(lastBit_, 1)\\n            }\\n            if gt(number_, 0) {\\n                lastBit_ := add(lastBit_, 1)\\n            }\\n            if lt(lastBit_, coefficientSize) {\\n                // for throw exception\\n                lastBit_ := coefficientSize\\n            }\\n            let exponent := sub(lastBit_, coefficientSize)\\n            let coefficient := shr(exponent, normal)\\n            if and(roundUp, gt(exponent, 0)) {\\n                // rounding up is only needed if exponent is > 0, as otherwise the coefficient fully holds the original number\\n                coefficient := add(coefficient, 1)\\n                if eq(shl(coefficientSize, 1), coefficient) {\\n                    // case were coefficient was e.g. 111, with adding 1 it became 1000 (in binary) and coefficientSize 3 bits\\n                    // final coefficient would exceed it's size. -> reduce coefficent to 100 and increase exponent by 1.\\n                    coefficient := shl(sub(coefficientSize, 1), 1)\\n                    exponent := add(exponent, 1)\\n                }\\n            }\\n            if iszero(lt(exponent, shl(exponentSize, 1))) {\\n                // if exponent is >= exponentSize, the normal number is too big to fit within\\n                // BigNumber with too small sizes for coefficient and exponent\\n                revert(0, 0)\\n            }\\n            bigNumber := shl(exponentSize, coefficient)\\n            bigNumber := add(bigNumber, exponent)\\n        }\\n    }\\n\\n    /// @dev get `normal` number from `bigNumber`, `exponentSize` and `exponentMask`\\n    function fromBigNumber(\\n        uint256 bigNumber,\\n        uint256 exponentSize,\\n        uint256 exponentMask\\n    ) internal pure returns (uint256 normal) {\\n        assembly {\\n            let coefficient := shr(exponentSize, bigNumber)\\n            let exponent := and(bigNumber, exponentMask)\\n            normal := shl(exponent, coefficient)\\n        }\\n    }\\n\\n    /// @dev gets the most significant bit `lastBit` of a `normal` number (length of given number of binary format).\\n    /// e.g.\\n    /// 5035703444687813576399599 = 10000101010010110100000011111011110010100110100000000011100101001101001101011101111\\n    /// lastBit =                   ^---------------------------------   83   ----------------------------------------^\\n    function mostSignificantBit(uint256 normal) internal pure returns (uint lastBit) {\\n        assembly {\\n            let number_ := normal\\n            if gt(normal, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x80, number_)\\n                lastBit := 0x80\\n            }\\n            if gt(number_, 0xFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x40, number_)\\n                lastBit := add(lastBit, 0x40)\\n            }\\n            if gt(number_, 0xFFFFFFFF) {\\n                number_ := shr(0x20, number_)\\n                lastBit := add(lastBit, 0x20)\\n            }\\n            if gt(number_, 0xFFFF) {\\n                number_ := shr(0x10, number_)\\n                lastBit := add(lastBit, 0x10)\\n            }\\n            if gt(number_, 0xFF) {\\n                number_ := shr(0x8, number_)\\n                lastBit := add(lastBit, 0x8)\\n            }\\n            if gt(number_, 0xF) {\\n                number_ := shr(0x4, number_)\\n                lastBit := add(lastBit, 0x4)\\n            }\\n            if gt(number_, 0x3) {\\n                number_ := shr(0x2, number_)\\n                lastBit := add(lastBit, 0x2)\\n            }\\n            if gt(number_, 0x1) {\\n                lastBit := add(lastBit, 1)\\n            }\\n            if gt(number_, 0) {\\n                lastBit := add(lastBit, 1)\\n            }\\n        }\\n    }\\n}\",\"versionPragma\":\"0.8.21\"},\"contracts/payloads/libraries/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary LibsErrorTypes {\\n    /***********************************|\\n    |         LiquidityCalcs            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when supply or borrow exchange price is zero at calc token data (token not configured yet)\\n    uint256 internal constant LiquidityCalcs__ExchangePriceZero = 70001;\\n\\n    /// @notice thrown when rate data is set to a version that is not implemented\\n    uint256 internal constant LiquidityCalcs__UnsupportedRateVersion = 70002;\\n\\n    /// @notice thrown when the calculated borrow rate turns negative. This should never happen.\\n    uint256 internal constant LiquidityCalcs__BorrowRateNegative = 70003;\\n\\n    /***********************************|\\n    |           SafeTransfer            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe transfer from for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFromFailed = 71001;\\n\\n    /// @notice thrown when safe transfer for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFailed = 71002;\\n}\",\"versionPragma\":\"0.8.21\"},\"contracts/payloads/libraries/liquiditySlotsLink.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @notice library that helps in reading / working with storage slot data of Fluid Liquidity.\\n/// @dev as all data for Fluid Liquidity is internal, any data must be fetched directly through manual\\n/// slot reading through this library or, if gas usage is less important, through the FluidLiquidityResolver.\\nlibrary LiquiditySlotsLink {\\n    /// @dev storage slot for status at Liquidity\\n    uint256 internal constant LIQUIDITY_STATUS_SLOT = 1;\\n    /// @dev storage slot for auths mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_AUTHS_MAPPING_SLOT = 2;\\n    /// @dev storage slot for guardians mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_GUARDIANS_MAPPING_SLOT = 3;\\n    /// @dev storage slot for user class mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_CLASS_MAPPING_SLOT = 4;\\n    /// @dev storage slot for exchangePricesAndConfig mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_EXCHANGE_PRICES_MAPPING_SLOT = 5;\\n    /// @dev storage slot for rateData mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_RATE_DATA_MAPPING_SLOT = 6;\\n    /// @dev storage slot for totalAmounts mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_TOTAL_AMOUNTS_MAPPING_SLOT = 7;\\n    /// @dev storage slot for user supply double mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_SUPPLY_DOUBLE_MAPPING_SLOT = 8;\\n    /// @dev storage slot for user borrow double mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_BORROW_DOUBLE_MAPPING_SLOT = 9;\\n    /// @dev storage slot for listed tokens array at Liquidity\\n    uint256 internal constant LIQUIDITY_LISTED_TOKENS_ARRAY_SLOT = 10;\\n\\n    // --------------------------------\\n    // @dev stacked uint256 storage slots bits position data for each:\\n\\n    // ExchangePricesAndConfig\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_RATE = 0;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_FEE = 16;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_UTILIZATION = 30;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_UPDATE_THRESHOLD = 44;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_LAST_TIMESTAMP = 58;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_SUPPLY_EXCHANGE_PRICE = 91;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_EXCHANGE_PRICE = 155;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_SUPPLY_RATIO = 219;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_RATIO = 234;\\n\\n    // RateData:\\n    uint256 internal constant BITS_RATE_DATA_VERSION = 0;\\n    // RateData: V1\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_ZERO = 4;\\n    uint256 internal constant BITS_RATE_DATA_V1_UTILIZATION_AT_KINK = 20;\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_KINK = 36;\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_MAX = 52;\\n    // RateData: V2\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_ZERO = 4;\\n    uint256 internal constant BITS_RATE_DATA_V2_UTILIZATION_AT_KINK1 = 20;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK1 = 36;\\n    uint256 internal constant BITS_RATE_DATA_V2_UTILIZATION_AT_KINK2 = 52;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK2 = 68;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_MAX = 84;\\n\\n    // TotalAmounts\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_SUPPLY_WITH_INTEREST = 0;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_SUPPLY_INTEREST_FREE = 64;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_BORROW_WITH_INTEREST = 128;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_BORROW_INTEREST_FREE = 192;\\n\\n    // UserSupplyData\\n    uint256 internal constant BITS_USER_SUPPLY_MODE = 0;\\n    uint256 internal constant BITS_USER_SUPPLY_AMOUNT = 1;\\n    uint256 internal constant BITS_USER_SUPPLY_PREVIOUS_WITHDRAWAL_LIMIT = 65;\\n    uint256 internal constant BITS_USER_SUPPLY_LAST_UPDATE_TIMESTAMP = 129;\\n    uint256 internal constant BITS_USER_SUPPLY_EXPAND_PERCENT = 162;\\n    uint256 internal constant BITS_USER_SUPPLY_EXPAND_DURATION = 176;\\n    uint256 internal constant BITS_USER_SUPPLY_BASE_WITHDRAWAL_LIMIT = 200;\\n    uint256 internal constant BITS_USER_SUPPLY_IS_PAUSED = 255;\\n\\n    // UserBorrowData\\n    uint256 internal constant BITS_USER_BORROW_MODE = 0;\\n    uint256 internal constant BITS_USER_BORROW_AMOUNT = 1;\\n    uint256 internal constant BITS_USER_BORROW_PREVIOUS_BORROW_LIMIT = 65;\\n    uint256 internal constant BITS_USER_BORROW_LAST_UPDATE_TIMESTAMP = 129;\\n    uint256 internal constant BITS_USER_BORROW_EXPAND_PERCENT = 162;\\n    uint256 internal constant BITS_USER_BORROW_EXPAND_DURATION = 176;\\n    uint256 internal constant BITS_USER_BORROW_BASE_BORROW_LIMIT = 200;\\n    uint256 internal constant BITS_USER_BORROW_MAX_BORROW_LIMIT = 218;\\n    uint256 internal constant BITS_USER_BORROW_IS_PAUSED = 255;\\n\\n    // --------------------------------\\n\\n    /// @notice Calculating the slot ID for Liquidity contract for single mapping at `slot_` for `key_`\\n    function calculateMappingStorageSlot(uint256 slot_, address key_) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(key_, slot_));\\n    }\\n\\n    /// @notice Calculating the slot ID for Liquidity contract for double mapping at `slot_` for `key1_` and `key2_`\\n    function calculateDoubleMappingStorageSlot(\\n        uint256 slot_,\\n        address key1_,\\n        address key2_\\n    ) internal pure returns (bytes32) {\\n        bytes32 intermediateSlot_ = keccak256(abi.encode(key1_, slot_));\\n        return keccak256(abi.encode(key2_, intermediateSlot_));\\n    }\\n}\\n\",\"versionPragma\":\"0.8.21\"},\"contracts/payloads/libraries/liquidityCalcs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { LibsErrorTypes as ErrorTypes } from \\\"./errorTypes.sol\\\";\\nimport { LiquiditySlotsLink } from \\\"./liquiditySlotsLink.sol\\\";\\nimport { BigMathMinified } from \\\"./bigMathMinified.sol\\\";\\n\\n/// @notice implements calculation methods used for Fluid liquidity such as updated exchange prices,\\n/// borrow rate, withdrawal / borrow limits, revenue amount.\\nlibrary LiquidityCalcs {\\n    error FluidLiquidityCalcsError(uint256 errorId_);\\n\\n    /// @notice emitted if the calculated borrow rate surpassed max borrow rate (16 bits) and was capped at maximum value 65535\\n    event BorrowRateMaxCap();\\n\\n    /// @dev constants as from Liquidity variables.sol\\n    uint256 internal constant EXCHANGE_PRICES_PRECISION = 1e12;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n    // constants used for BigMath conversion from and to storage\\n    uint256 internal constant DEFAULT_EXPONENT_SIZE = 8;\\n    uint256 internal constant DEFAULT_EXPONENT_MASK = 0xFF;\\n\\n    uint256 internal constant FOUR_DECIMALS = 1e4;\\n    uint256 internal constant TWELVE_DECIMALS = 1e12;\\n    uint256 internal constant X14 = 0x3fff;\\n    uint256 internal constant X15 = 0x7fff;\\n    uint256 internal constant X16 = 0xffff;\\n    uint256 internal constant X18 = 0x3ffff;\\n    uint256 internal constant X24 = 0xffffff;\\n    uint256 internal constant X33 = 0x1ffffffff;\\n    uint256 internal constant X64 = 0xffffffffffffffff;\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                  CALC EXCHANGE PRICES                  /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev calculates interest (exchange prices) for a token given its' exchangePricesAndConfig from storage.\\n    /// @param exchangePricesAndConfig_ exchange prices and config packed uint256 read from storage\\n    /// @return supplyExchangePrice_ updated supplyExchangePrice\\n    /// @return borrowExchangePrice_ updated borrowExchangePrice\\n    function calcExchangePrices(\\n        uint256 exchangePricesAndConfig_\\n    ) internal view returns (uint256 supplyExchangePrice_, uint256 borrowExchangePrice_) {\\n        // Extracting exchange prices\\n        supplyExchangePrice_ =\\n            (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_SUPPLY_EXCHANGE_PRICE) &\\n            X64;\\n        borrowExchangePrice_ =\\n            (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_BORROW_EXCHANGE_PRICE) &\\n            X64;\\n\\n        if (supplyExchangePrice_ == 0 || borrowExchangePrice_ == 0) {\\n            revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__ExchangePriceZero);\\n        }\\n\\n        uint256 temp_ = exchangePricesAndConfig_ & X16; // temp_ = borrowRate\\n\\n        unchecked {\\n            // last timestamp can not be > current timestamp\\n            uint256 secondsSinceLastUpdate_ = block.timestamp -\\n                ((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_LAST_TIMESTAMP) & X33);\\n\\n            uint256 borrowRatio_ = (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_BORROW_RATIO) &\\n                X15;\\n            if (secondsSinceLastUpdate_ == 0 || temp_ == 0 || borrowRatio_ == 1) {\\n                // if no time passed, borrow rate is 0, or no raw borrowings: no exchange price update needed\\n                // (if borrowRatio_ == 1 means there is only borrowInterestFree, as first bit is 1 and rest is 0)\\n                return (supplyExchangePrice_, borrowExchangePrice_);\\n            }\\n\\n            // calculate new borrow exchange price.\\n            // formula borrowExchangePriceIncrease: previous price * borrow rate * secondsSinceLastUpdate_.\\n            // nominator is max uint112 (uint64 * uint16 * uint32). Divisor can not be 0.\\n            borrowExchangePrice_ +=\\n                (borrowExchangePrice_ * temp_ * secondsSinceLastUpdate_) /\\n                (SECONDS_PER_YEAR * FOUR_DECIMALS);\\n\\n            // FOR SUPPLY EXCHANGE PRICE:\\n            // all yield paid by borrowers (in mode with interest) goes to suppliers in mode with interest.\\n            // formula: previous price * supply rate * secondsSinceLastUpdate_.\\n            // where supply rate = (borrow rate  - revenueFee%) * ratioSupplyYield. And\\n            // ratioSupplyYield = utilization * supplyRatio * borrowRatio\\n            //\\n            // Example:\\n            // supplyRawInterest is 80, supplyInterestFree is 20. totalSupply is 100. BorrowedRawInterest is 50.\\n            // BorrowInterestFree is 10. TotalBorrow is 60. borrow rate 40%, revenueFee 10%.\\n            // yield is 10 (so half a year must have passed).\\n            // supplyRawInterest must become worth 89. totalSupply must become 109. BorrowedRawInterest must become 60.\\n            // borrowInterestFree must still be 10. supplyInterestFree still 20. totalBorrow 70.\\n            // supplyExchangePrice would have to go from 1 to 1,125 (+ 0.125). borrowExchangePrice from 1 to 1,2 (+0.2).\\n            // utilization is 60%. supplyRatio = 20 / 80 = 25% (only 80% of lenders receiving yield).\\n            // borrowRatio = 10 / 50 = 20% (only 83,333% of borrowers paying yield):\\n            // x of borrowers paying yield = 100% - (20 / (100 + 20)) = 100% - 16.6666666% = 83,333%.\\n            // ratioSupplyYield = 60% * 83,33333% * (100% + 20%) = 62,5%\\n            // supplyRate = (40% * (100% - 10%)) * = 36% * 62,5% = 22.5%\\n            // increase in supplyExchangePrice, assuming 100 as previous price.\\n            // 100 * 22,5% * 1/2 (half a year) = 0,1125.\\n            // cross-check supplyRawInterest worth = 80 * 1.1125 = 89. totalSupply worth = 89 + 20.\\n\\n            // -------------- 1. calculate ratioSupplyYield --------------------------------\\n            // step1: utilization * supplyRatio (or actually part of lenders receiving yield)\\n\\n            // temp_ => supplyRatio (in 1e2: 100% = 10_000; 1% = 100 -> max value 16_383)\\n            // if first bit 0 then ratio is supplyInterestFree / supplyWithInterest (supplyWithInterest is bigger)\\n            // else ratio is supplyWithInterest / supplyInterestFree (supplyInterestFree is bigger)\\n            temp_ = (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_SUPPLY_RATIO) & X15;\\n\\n            if (temp_ == 1) {\\n                // if no raw supply: no exchange price update needed\\n                // (if supplyRatio_ == 1 means there is only supplyInterestFree, as first bit is 1 and rest is 0)\\n                return (supplyExchangePrice_, borrowExchangePrice_);\\n            }\\n\\n            // ratioSupplyYield precision is 1e27 as 100% for increased precision when supplyInterestFree > supplyWithInterest\\n            if (temp_ & 1 == 1) {\\n                // ratio is supplyWithInterest / supplyInterestFree (supplyInterestFree is bigger)\\n                temp_ = temp_ >> 1;\\n\\n                // Note: case where temp_ == 0 (only supplyInterestFree, no yield) already covered by early return\\n                // in the if statement a little above.\\n\\n                // based on above example but supplyRawInterest is 20, supplyInterestFree is 80. no fee.\\n                // supplyRawInterest must become worth 30. totalSupply must become 110.\\n                // supplyExchangePrice would have to go from 1 to 1,5. borrowExchangePrice from 1 to 1,2.\\n                // so ratioSupplyYield must come out as 2.5 (250%).\\n                // supplyRatio would be (20 * 10_000 / 80) = 2500. but must be inverted.\\n                temp_ = (1e27 * FOUR_DECIMALS) / temp_; // e.g. 1e31 / 2500 = 4e27. (* 1e27 for precision)\\n                // e.g. 5_000 * (1e27 + 4e27) / 1e27 = 25_000 (=250%).\\n                temp_ =\\n                    // utilization * (100% + 100% / supplyRatio)\\n                    (((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_UTILIZATION) & X14) *\\n                        (1e27 + temp_)) / // extract utilization (max 16_383 so there is no way this can overflow).\\n                    (FOUR_DECIMALS);\\n                // max possible value of temp_ here is 16383 * (1e27 + 1e31) / 1e4 = ~1.64e31\\n            } else {\\n                // ratio is supplyInterestFree / supplyWithInterest (supplyWithInterest is bigger)\\n                temp_ = temp_ >> 1;\\n                // if temp_ == 0 then only supplyWithInterest => full yield. temp_ is already 0\\n\\n                // e.g. 5_000 * 10_000 + (20 * 10_000 / 80) / 10_000 = 5000 * 12500 / 10000 = 6250 (=62.5%).\\n                temp_ =\\n                    // 1e27 * utilization * (100% + supplyRatio) / 100%\\n                    (1e27 *\\n                        ((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_UTILIZATION) & X14) * // extract utilization (max 16_383 so there is no way this can overflow).\\n                        (FOUR_DECIMALS + temp_)) /\\n                    (FOUR_DECIMALS * FOUR_DECIMALS);\\n                // max possible temp_ value: 1e27 * 16383 * 2e4 / 1e8 = 3.2766e27\\n            }\\n            // from here temp_ => ratioSupplyYield (utilization * supplyRatio part) scaled by 1e27. max possible value ~1.64e31\\n\\n            // step2 of ratioSupplyYield: add borrowRatio (only x% of borrowers paying yield)\\n            if (borrowRatio_ & 1 == 1) {\\n                // ratio is borrowWithInterest / borrowInterestFree (borrowInterestFree is bigger)\\n                borrowRatio_ = borrowRatio_ >> 1;\\n                // borrowRatio_ => x of total bororwers paying yield. scale to 1e27.\\n\\n                // Note: case where borrowRatio_ == 0 (only borrowInterestFree, no yield) already covered\\n                // at the beginning of the method by early return if `borrowRatio_ == 1`.\\n\\n                // based on above example but borrowRawInterest is 10, borrowInterestFree is 50. no fee. borrowRatio = 20%.\\n                // so only 16.66% of borrowers are paying yield. so the 100% - part of the formula is not needed.\\n                // x of borrowers paying yield = (borrowRatio / (100 + borrowRatio)) = 16.6666666%\\n                // borrowRatio_ => x of total bororwers paying yield. scale to 1e27.\\n                borrowRatio_ = (borrowRatio_ * 1e27) / (FOUR_DECIMALS + borrowRatio_);\\n                // max value here for borrowRatio_ is (1e31 / (1e4 + 1e4))= 5e26 (= 50% of borrowers paying yield).\\n            } else {\\n                // ratio is borrowInterestFree / borrowWithInterest (borrowWithInterest is bigger)\\n                borrowRatio_ = borrowRatio_ >> 1;\\n\\n                // borrowRatio_ => x of total bororwers paying yield. scale to 1e27.\\n                // x of borrowers paying yield = 100% - (borrowRatio / (100 + borrowRatio)) = 100% - 16.6666666% = 83,333%.\\n                borrowRatio_ = (1e27 - ((borrowRatio_ * 1e27) / (FOUR_DECIMALS + borrowRatio_)));\\n                // borrowRatio can never be > 100%. so max subtraction can be 100% - 100% / 200%.\\n                // or if borrowRatio_ is 0 -> 100% - 0. or if borrowRatio_ is 1 -> 100% - 1 / 101.\\n                // max value here for borrowRatio_ is 1e27 - 0 = 1e27 (= 100% of borrowers paying yield).\\n            }\\n\\n            // temp_ => ratioSupplyYield. scaled down from 1e25 = 1% each to normal percent precision 1e2 = 1%.\\n            // max nominator value is ~1.64e31 * 1e27 = 1.64e58. max result = 1.64e8\\n            temp_ = (FOUR_DECIMALS * temp_ * borrowRatio_) / 1e54;\\n\\n            // 2. calculate supply rate\\n            // temp_ => supply rate (borrow rate  - revenueFee%) * ratioSupplyYield.\\n            // division part is done in next step to increase precision. (divided by 2x FOUR_DECIMALS, fee + borrowRate)\\n            // Note that all calculation divisions for supplyExchangePrice are rounded down.\\n            // Note supply rate can be bigger than the borrowRate, e.g. if there are only few lenders with interest\\n            // but more suppliers not earning interest.\\n            temp_ = ((exchangePricesAndConfig_ & X16) * // borrow rate\\n                temp_ * // ratioSupplyYield\\n                (FOUR_DECIMALS - ((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_FEE) & X14))); // revenueFee\\n            // fee can not be > 100%. max possible = 65535 * ~1.64e8 * 1e4 =~1.074774e17.\\n\\n            // 3. calculate increase in supply exchange price\\n            supplyExchangePrice_ += ((supplyExchangePrice_ * temp_ * secondsSinceLastUpdate_) /\\n                (SECONDS_PER_YEAR * FOUR_DECIMALS * FOUR_DECIMALS * FOUR_DECIMALS));\\n            // max possible nominator = max uint 64 * 1.074774e17 * max uint32 = ~8.52e45. Denominator can not be 0.\\n        }\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                     CALC REVENUE                       /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev gets the `revenueAmount_` for a token given its' totalAmounts and exchangePricesAndConfig from storage\\n    /// and the current balance of the Fluid liquidity contract for the token.\\n    /// @param totalAmounts_ total amounts packed uint256 read from storage\\n    /// @param exchangePricesAndConfig_ exchange prices and config packed uint256 read from storage\\n    /// @param liquidityTokenBalance_   current balance of Liquidity contract (IERC20(token_).balanceOf(address(this)))\\n    /// @return revenueAmount_ collectable revenue amount\\n    function calcRevenue(\\n        uint256 totalAmounts_,\\n        uint256 exchangePricesAndConfig_,\\n        uint256 liquidityTokenBalance_\\n    ) internal view returns (uint256 revenueAmount_) {\\n        // @dev no need to super-optimize this method as it is only used by admin\\n\\n        // calculate the new exchange prices based on earned interest\\n        (uint256 supplyExchangePrice_, uint256 borrowExchangePrice_) = calcExchangePrices(exchangePricesAndConfig_);\\n\\n        // total supply = interest free + with interest converted from raw\\n        uint256 totalSupply_ = getTotalSupply(totalAmounts_, supplyExchangePrice_);\\n\\n        if (totalSupply_ > 0) {\\n            // available revenue: balanceOf(token) + totalBorrowings - totalLendings.\\n            revenueAmount_ = liquidityTokenBalance_ + getTotalBorrow(totalAmounts_, borrowExchangePrice_);\\n            // ensure there is no possible case because of rounding etc. where this would revert,\\n            // explicitly check if >\\n            revenueAmount_ = revenueAmount_ > totalSupply_ ? revenueAmount_ - totalSupply_ : 0;\\n            // Note: if utilization > 100% (totalSupply < totalBorrow), then all the amount above 100% utilization\\n            // can only be revenue.\\n        } else {\\n            // if supply is 0, then rest of balance can be withdrawn as revenue so that no amounts get stuck\\n            revenueAmount_ = liquidityTokenBalance_;\\n        }\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                      CALC LIMITS                       /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev calculates withdrawal limit before an operate execution:\\n    /// amount of user supply that must stay supplied (not amount that can be withdrawn).\\n    /// i.e. if user has supplied 100m and can withdraw 5M, this method returns the 95M, not the withdrawable amount 5M\\n    /// @param userSupplyData_ user supply data packed uint256 from storage\\n    /// @param userSupply_ current user supply amount already extracted from `userSupplyData_` and converted from BigMath\\n    /// @return currentWithdrawalLimit_ current withdrawal limit updated for expansion since last interaction.\\n    ///         returned value is in raw for with interest mode, normal amount for interest free mode!\\n    function calcWithdrawalLimitBeforeOperate(\\n        uint256 userSupplyData_,\\n        uint256 userSupply_\\n    ) internal view returns (uint256 currentWithdrawalLimit_) {\\n        // @dev must support handling the case where timestamp is 0 (config is set but no interactions yet).\\n        // first tx where timestamp is 0 will enter `if (lastWithdrawalLimit_ == 0)` because lastWithdrawalLimit_ is not set yet.\\n        // returning max withdrawal allowed, which is not exactly right but doesn't matter because the first interaction must be\\n        // a deposit anyway. Important is that it would not revert.\\n\\n        // Note the first time a deposit brings the user supply amount to above the base withdrawal limit, the active limit\\n        // is the fully expanded limit immediately.\\n\\n        // extract last set withdrawal limit\\n        uint256 lastWithdrawalLimit_ = (userSupplyData_ >>\\n            LiquiditySlotsLink.BITS_USER_SUPPLY_PREVIOUS_WITHDRAWAL_LIMIT) & X64;\\n        lastWithdrawalLimit_ =\\n            (lastWithdrawalLimit_ >> DEFAULT_EXPONENT_SIZE) <<\\n            (lastWithdrawalLimit_ & DEFAULT_EXPONENT_MASK);\\n        if (lastWithdrawalLimit_ == 0) {\\n            // withdrawal limit is not activated. Max withdrawal allowed\\n            return 0;\\n        }\\n\\n        uint256 maxWithdrawableLimit_;\\n        uint256 temp_;\\n        unchecked {\\n            // extract max withdrawable percent of user supply and\\n            // calculate maximum withdrawable amount expandPercentage of user supply at full expansion duration elapsed\\n            // e.g.: if 10% expandPercentage, meaning 10% is withdrawable after full expandDuration has elapsed.\\n\\n            // userSupply_ needs to be atleast 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            maxWithdrawableLimit_ =\\n                (((userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_PERCENT) & X14) * userSupply_) /\\n                FOUR_DECIMALS;\\n\\n            // time elapsed since last withdrawal limit was set (in seconds)\\n            // @dev last process timestamp is guaranteed to exist for withdrawal, as a supply must have happened before.\\n            // last timestamp can not be > current timestamp\\n            temp_ =\\n                block.timestamp -\\n                ((userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_LAST_UPDATE_TIMESTAMP) & X33);\\n        }\\n        // calculate withdrawable amount of expandPercent that is elapsed of expandDuration.\\n        // e.g. if 60% of expandDuration has elapsed, then user should be able to withdraw 6% of user supply, down to 94%.\\n        // Note: no explicit check for this needed, it is covered by setting minWithdrawalLimit_ if needed.\\n        temp_ =\\n            (maxWithdrawableLimit_ * temp_) /\\n            // extract expand duration: After this, decrement won't happen (user can withdraw 100% of withdraw limit)\\n            ((userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_DURATION) & X24); // expand duration can never be 0\\n        // calculate expanded withdrawal limit: last withdrawal limit - withdrawable amount.\\n        // Note: withdrawable amount here can grow bigger than userSupply if timeElapsed is a lot bigger than expandDuration,\\n        // which would cause the subtraction `lastWithdrawalLimit_ - withdrawableAmount_` to revert. In that case, set 0\\n        // which will cause minimum (fully expanded) withdrawal limit to be set in lines below.\\n        unchecked {\\n            // underflow explicitly checked & handled\\n            currentWithdrawalLimit_ = lastWithdrawalLimit_ > temp_ ? lastWithdrawalLimit_ - temp_ : 0;\\n            // calculate minimum withdrawal limit: minimum amount of user supply that must stay supplied at full expansion.\\n            // subtraction can not underflow as maxWithdrawableLimit_ is a percentage amount (<=100%) of userSupply_\\n            temp_ = userSupply_ - maxWithdrawableLimit_;\\n        }\\n        // if withdrawal limit is decreased below minimum then set minimum\\n        // (e.g. when more than expandDuration time has elapsed)\\n        if (temp_ > currentWithdrawalLimit_) {\\n            currentWithdrawalLimit_ = temp_;\\n        }\\n    }\\n\\n    /// @dev calculates withdrawal limit after an operate execution:\\n    /// amount of user supply that must stay supplied (not amount that can be withdrawn).\\n    /// i.e. if user has supplied 100m and can withdraw 5M, this method returns the 95M, not the withdrawable amount 5M\\n    /// @param userSupplyData_ user supply data packed uint256 from storage\\n    /// @param userSupply_ current user supply amount already extracted from `userSupplyData_` and added / subtracted with the executed operate amount\\n    /// @param newWithdrawalLimit_ current withdrawal limit updated for expansion since last interaction, result from `calcWithdrawalLimitBeforeOperate`\\n    /// @return withdrawalLimit_ updated withdrawal limit that should be written to storage. returned value is in\\n    ///                          raw for with interest mode, normal amount for interest free mode!\\n    function calcWithdrawalLimitAfterOperate(\\n        uint256 userSupplyData_,\\n        uint256 userSupply_,\\n        uint256 newWithdrawalLimit_\\n    ) internal pure returns (uint256) {\\n        // temp_ => base withdrawal limit. below this, maximum withdrawals are allowed\\n        uint256 temp_ = (userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_BASE_WITHDRAWAL_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        // if user supply is below base limit then max withdrawals are allowed\\n        if (userSupply_ < temp_) {\\n            return 0;\\n        }\\n        // temp_ => withdrawal limit expandPercent (is in 1e2 decimals)\\n        temp_ = (userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_PERCENT) & X14;\\n        unchecked {\\n            // temp_ => minimum withdrawal limit: userSupply - max withdrawable limit (userSupply * expandPercent))\\n            // userSupply_ needs to be atleast 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            // subtraction can not underflow as maxWithdrawableLimit_ is a percentage amount (<=100%) of userSupply_\\n            temp_ = userSupply_ - ((userSupply_ * temp_) / FOUR_DECIMALS);\\n        }\\n        // if new (before operation) withdrawal limit is less than minimum limit then set minimum limit.\\n        // e.g. can happen on new deposits. withdrawal limit is instantly fully expanded in a scenario where\\n        // increased deposit amount outpaces withrawals.\\n        if (temp_ > newWithdrawalLimit_) {\\n            return temp_;\\n        }\\n        return newWithdrawalLimit_;\\n    }\\n\\n    /// @dev calculates borrow limit before an operate execution:\\n    /// total amount user borrow can reach (not borrowable amount in current operation).\\n    /// i.e. if user has borrowed 50M and can still borrow 5M, this method returns the total 55M, not the borrowable amount 5M\\n    /// @param userBorrowData_ user borrow data packed uint256 from storage\\n    /// @param userBorrow_ current user borrow amount already extracted from `userBorrowData_`\\n    /// @return currentBorrowLimit_ current borrow limit updated for expansion since last interaction. returned value is in\\n    ///                             raw for with interest mode, normal amount for interest free mode!\\n    function calcBorrowLimitBeforeOperate(\\n        uint256 userBorrowData_,\\n        uint256 userBorrow_\\n    ) internal view returns (uint256 currentBorrowLimit_) {\\n        // @dev must support handling the case where timestamp is 0 (config is set but no interactions yet) -> base limit.\\n        // first tx where timestamp is 0 will enter `if (maxExpandedBorrowLimit_ < baseBorrowLimit_)` because `userBorrow_` and thus\\n        // `maxExpansionLimit_` and thus `maxExpandedBorrowLimit_` is 0 and `baseBorrowLimit_` can not be 0.\\n\\n        // temp_ = extract borrow expand percent (is in 1e2 decimals)\\n        uint256 temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_PERCENT) & X14;\\n\\n        uint256 maxExpansionLimit_;\\n        uint256 maxExpandedBorrowLimit_;\\n        unchecked {\\n            // calculate max expansion limit: Max amount limit can expand to since last interaction\\n            // userBorrow_ needs to be atleast 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            maxExpansionLimit_ = ((userBorrow_ * temp_) / FOUR_DECIMALS);\\n\\n            // calculate max borrow limit: Max point limit can increase to since last interaction\\n            maxExpandedBorrowLimit_ = userBorrow_ + maxExpansionLimit_;\\n        }\\n\\n        // currentBorrowLimit_ = extract base borrow limit\\n        currentBorrowLimit_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_BASE_BORROW_LIMIT) & X18;\\n        currentBorrowLimit_ =\\n            (currentBorrowLimit_ >> DEFAULT_EXPONENT_SIZE) <<\\n            (currentBorrowLimit_ & DEFAULT_EXPONENT_MASK);\\n\\n        if (maxExpandedBorrowLimit_ < currentBorrowLimit_) {\\n            return currentBorrowLimit_;\\n        }\\n        // time elapsed since last borrow limit was set (in seconds)\\n        unchecked {\\n            // temp_ = timeElapsed_ (last timestamp can not be > current timestamp)\\n            temp_ =\\n                block.timestamp -\\n                ((userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_LAST_UPDATE_TIMESTAMP) & X33); // extract last update timestamp\\n        }\\n\\n        // currentBorrowLimit_ = expandedBorrowableAmount + extract last set borrow limit\\n        currentBorrowLimit_ =\\n            // calculate borrow limit expansion since last interaction for `expandPercent` that is elapsed of `expandDuration`.\\n            // divisor is extract expand duration (after this, full expansion to expandPercentage happened).\\n            ((maxExpansionLimit_ * temp_) /\\n                ((userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_DURATION) & X24)) + // expand duration can never be 0\\n            //  extract last set borrow limit\\n            BigMathMinified.fromBigNumber(\\n                (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_PREVIOUS_BORROW_LIMIT) & X64,\\n                DEFAULT_EXPONENT_SIZE,\\n                DEFAULT_EXPONENT_MASK\\n            );\\n\\n        // if timeElapsed is bigger than expandDuration, new borrow limit would be > max expansion,\\n        // so set to `maxExpandedBorrowLimit_` in that case.\\n        // also covers the case where last process timestamp = 0 (timeElapsed would simply be very big)\\n        if (currentBorrowLimit_ > maxExpandedBorrowLimit_) {\\n            currentBorrowLimit_ = maxExpandedBorrowLimit_;\\n        }\\n        // temp_ = extract hard max borrow limit. Above this user can never borrow (not expandable above)\\n        temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_MAX_BORROW_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        if (currentBorrowLimit_ > temp_) {\\n            currentBorrowLimit_ = temp_;\\n        }\\n    }\\n\\n    /// @dev calculates borrow limit after an operate execution:\\n    /// total amount user borrow can reach (not borrowable amount in current operation).\\n    /// i.e. if user has borrowed 50M and can still borrow 5M, this method returns the total 55M, not the borrowable amount 5M\\n    /// @param userBorrowData_ user borrow data packed uint256 from storage\\n    /// @param userBorrow_ current user borrow amount already extracted from `userBorrowData_` and added / subtracted with the executed operate amount\\n    /// @param newBorrowLimit_ current borrow limit updated for expansion since last interaction, result from `calcBorrowLimitBeforeOperate`\\n    /// @return borrowLimit_ updated borrow limit that should be written to storage.\\n    ///                      returned value is in raw for with interest mode, normal amount for interest free mode!\\n    function calcBorrowLimitAfterOperate(\\n        uint256 userBorrowData_,\\n        uint256 userBorrow_,\\n        uint256 newBorrowLimit_\\n    ) internal pure returns (uint256 borrowLimit_) {\\n        // temp_ = extract borrow expand percent\\n        uint256 temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_PERCENT) & X14; // (is in 1e2 decimals)\\n\\n        unchecked {\\n            // borrowLimit_ = calculate maximum borrow limit at full expansion.\\n            // userBorrow_ needs to be at least 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            borrowLimit_ = userBorrow_ + ((userBorrow_ * temp_) / FOUR_DECIMALS);\\n        }\\n\\n        // temp_ = extract base borrow limit\\n        temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_BASE_BORROW_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        if (borrowLimit_ < temp_) {\\n            // below base limit, borrow limit is always base limit\\n            return temp_;\\n        }\\n        // temp_ = extract hard max borrow limit. Above this user can never borrow (not expandable above)\\n        temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_MAX_BORROW_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        // make sure fully expanded borrow limit is not above hard max borrow limit\\n        if (borrowLimit_ > temp_) {\\n            borrowLimit_ = temp_;\\n        }\\n        // if new borrow limit (from before operate) is > max borrow limit, set max borrow limit.\\n        // (e.g. on a repay shrinking instantly to fully expanded borrow limit from new borrow amount. shrinking is instant)\\n        if (newBorrowLimit_ > borrowLimit_) {\\n            return borrowLimit_;\\n        }\\n        return newBorrowLimit_;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                      CALC RATES                        /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev Calculates new borrow rate from utilization for a token\\n    /// @param rateData_ rate data packed uint256 from storage for the token\\n    /// @param utilization_ totalBorrow / totalSupply. 1e4 = 100% utilization\\n    /// @return rate_ rate for that particular token in 1e2 precision (e.g. 5% rate = 500)\\n    function calcBorrowRateFromUtilization(uint256 rateData_, uint256 utilization_) internal returns (uint256 rate_) {\\n        // extract rate version: 4 bits (0xF) starting from bit 0\\n        uint256 rateVersion_ = (rateData_ & 0xF);\\n\\n        if (rateVersion_ == 1) {\\n            rate_ = calcRateV1(rateData_, utilization_);\\n        } else if (rateVersion_ == 2) {\\n            rate_ = calcRateV2(rateData_, utilization_);\\n        } else {\\n            revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__UnsupportedRateVersion);\\n        }\\n\\n        if (rate_ > X16) {\\n            // hard cap for borrow rate at maximum value 16 bits (65535) to make sure it does not overflow storage space.\\n            // this is unlikely to ever happen if configs stay within expected levels.\\n            rate_ = X16;\\n            // emit event to more easily become aware\\n            emit BorrowRateMaxCap();\\n        }\\n    }\\n\\n    /// @dev calculates the borrow rate based on utilization for rate data version 1 (with one kink) in 1e2 precision\\n    /// @param rateData_ rate data packed uint256 from storage for the token\\n    /// @param utilization_  in 1e2 (100% = 1e4)\\n    /// @return rate_ rate in 1e2 precision\\n    function calcRateV1(uint256 rateData_, uint256 utilization_) internal pure returns (uint256 rate_) {\\n        /// For rate v1 (one kink) ------------------------------------------------------\\n        /// Next 16  bits =>  4 - 19 => Rate at utilization 0% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  20- 35 => Utilization at kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  36- 51 => Rate at utilization kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  52- 67 => Rate at utilization 100% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Last 188 bits =>  68-255 => blank, might come in use in future\\n\\n        // y = mx + c.\\n        // y is borrow rate\\n        // x is utilization\\n        // m = slope (m can also be negative for declining rates)\\n        // c is constant (c can be negative)\\n\\n        uint256 y1_;\\n        uint256 y2_;\\n        uint256 x1_;\\n        uint256 x2_;\\n\\n        // extract kink1: 16 bits (0xFFFF) starting from bit 20\\n        // kink is in 1e2, same as utilization, so no conversion needed for direct comparison of the two\\n        uint256 kink1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_UTILIZATION_AT_KINK) & X16;\\n        if (utilization_ < kink1_) {\\n            // if utilization is less than kink\\n            y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_ZERO) & X16;\\n            y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_KINK) & X16;\\n            x1_ = 0; // 0%\\n            x2_ = kink1_;\\n        } else {\\n            // else utilization is greater than kink\\n            y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_KINK) & X16;\\n            y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_MAX) & X16;\\n            x1_ = kink1_;\\n            x2_ = FOUR_DECIMALS; // 100%\\n        }\\n\\n        int256 constant_;\\n        int256 slope_;\\n        unchecked {\\n            // calculating slope with twelve decimal precision. m = (y2 - y1) / (x2 - x1).\\n            // utilization of x2 can not be <= utilization of x1 (so no underflow or 0 divisor)\\n            // y is in 1e2 so can not overflow when multiplied with TWELVE_DECIMALS\\n            slope_ = (int256(y2_ - y1_) * int256(TWELVE_DECIMALS)) / int256((x2_ - x1_));\\n\\n            // calculating constant at 12 decimal precision. slope is already in 12 decimal hence only multiple with y1. c = y - mx.\\n            // maximum y1_ value is 65535. 65535 * 1e12 can not overflow int256\\n            // maximum slope is 65535 - 0 * TWELVE_DECIMALS / 1 = 65535 * 1e12;\\n            // maximum x1_ is 100% (9_999 actually) => slope_ * x1_ can not overflow int256\\n            // subtraction most extreme case would be  0 - max value slope_ * x1_ => can not underflow int256\\n            constant_ = int256(y1_ * TWELVE_DECIMALS) - (slope_ * int256(x1_));\\n\\n            // calculating new borrow rate\\n            // - slope_ max value is 65535 * 1e12,\\n            // - utilization max value is let's say 500% (extreme case where borrow rate increases borrow amount without new supply)\\n            // - constant max value is 65535 * 1e12\\n            // so max values are 65535 * 1e12 * 50_000 + 65535 * 1e12 -> 3.2768*10^21, which easily fits int256\\n            // divisor TWELVE_DECIMALS can not be 0\\n            slope_ = (slope_ * int256(utilization_)) + constant_; // reusing `slope_` as variable for gas savings\\n            if (slope_ < 0) {\\n                revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__BorrowRateNegative);\\n            }\\n            rate_ = uint256(slope_) / TWELVE_DECIMALS;\\n        }\\n    }\\n\\n    /// @dev calculates the borrow rate based on utilization for rate data version 2 (with two kinks) in 1e4 precision\\n    /// @param rateData_ rate data packed uint256 from storage for the token\\n    /// @param utilization_  in 1e2 (100% = 1e4)\\n    /// @return rate_ rate in 1e4 precision\\n    function calcRateV2(uint256 rateData_, uint256 utilization_) internal pure returns (uint256 rate_) {\\n        /// For rate v2 (two kinks) -----------------------------------------------------\\n        /// Next 16  bits =>  4 - 19 => Rate at utilization 0% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  20- 35 => Utilization at kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  36- 51 => Rate at utilization kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  52- 67 => Utilization at kink2 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  68- 83 => Rate at utilization kink2 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  84- 99 => Rate at utilization 100% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Last 156 bits => 100-255 => blank, might come in use in future\\n\\n        // y = mx + c.\\n        // y is borrow rate\\n        // x is utilization\\n        // m = slope (m can also be negative for declining rates)\\n        // c is constant (c can be negative)\\n\\n        uint256 y1_;\\n        uint256 y2_;\\n        uint256 x1_;\\n        uint256 x2_;\\n\\n        // extract kink1: 16 bits (0xFFFF) starting from bit 20\\n        // kink is in 1e2, same as utilization, so no conversion needed for direct comparison of the two\\n        uint256 kink1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_UTILIZATION_AT_KINK1) & X16;\\n        if (utilization_ < kink1_) {\\n            // if utilization is less than kink1\\n            y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_ZERO) & X16;\\n            y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK1) & X16;\\n            x1_ = 0; // 0%\\n            x2_ = kink1_;\\n        } else {\\n            // extract kink2: 16 bits (0xFFFF) starting from bit 52\\n            uint256 kink2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_UTILIZATION_AT_KINK2) & X16;\\n            if (utilization_ < kink2_) {\\n                // if utilization is less than kink2\\n                y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK1) & X16;\\n                y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK2) & X16;\\n                x1_ = kink1_;\\n                x2_ = kink2_;\\n            } else {\\n                // else utilization is greater than kink2\\n                y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK2) & X16;\\n                y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_MAX) & X16;\\n                x1_ = kink2_;\\n                x2_ = FOUR_DECIMALS;\\n            }\\n        }\\n\\n        int256 constant_;\\n        int256 slope_;\\n        unchecked {\\n            // calculating slope with twelve decimal precision. m = (y2 - y1) / (x2 - x1).\\n            // utilization of x2 can not be <= utilization of x1 (so no underflow or 0 divisor)\\n            // y is in 1e2 so can not overflow when multiplied with TWELVE_DECIMALS\\n            slope_ = (int256(y2_ - y1_) * int256(TWELVE_DECIMALS)) / int256((x2_ - x1_));\\n\\n            // calculating constant at 12 decimal precision. slope is already in 12 decimal hence only multiple with y1. c = y - mx.\\n            // maximum y1_ value is 65535. 65535 * 1e12 can not overflow int256\\n            // maximum slope is 65535 - 0 * TWELVE_DECIMALS / 1 = 65535 * 1e12;\\n            // maximum x1_ is 100% (9_999 actually) => slope_ * x1_ can not overflow int256\\n            // subtraction most extreme case would be  0 - max value slope_ * x1_ => can not underflow int256\\n            constant_ = int256(y1_ * TWELVE_DECIMALS) - (slope_ * int256(x1_));\\n\\n            // calculating new borrow rate\\n            // - slope_ max value is 65535 * 1e12,\\n            // - utilization max value is let's say 500% (extreme case where borrow rate increases borrow amount without new supply)\\n            // - constant max value is 65535 * 1e12\\n            // so max values are 65535 * 1e12 * 50_000 + 65535 * 1e12 -> 3.2768*10^21, which easily fits int256\\n            // divisor TWELVE_DECIMALS can not be 0\\n            slope_ = (slope_ * int256(utilization_)) + constant_; // reusing `slope_` as variable for gas savings\\n            if (slope_ < 0) {\\n                revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__BorrowRateNegative);\\n            }\\n            rate_ = uint256(slope_) / TWELVE_DECIMALS;\\n        }\\n    }\\n\\n    /// @dev reads the total supply out of Liquidity packed storage `totalAmounts_` for `supplyExchangePrice_`\\n    function getTotalSupply(\\n        uint256 totalAmounts_,\\n        uint256 supplyExchangePrice_\\n    ) internal pure returns (uint256 totalSupply_) {\\n        // totalSupply_ => supplyInterestFree\\n        totalSupply_ = (totalAmounts_ >> LiquiditySlotsLink.BITS_TOTAL_AMOUNTS_SUPPLY_INTEREST_FREE) & X64;\\n        totalSupply_ = (totalSupply_ >> DEFAULT_EXPONENT_SIZE) << (totalSupply_ & DEFAULT_EXPONENT_MASK);\\n\\n        uint256 totalSupplyRaw_ = totalAmounts_ & X64; // no shifting as supplyRaw is first 64 bits\\n        totalSupplyRaw_ = (totalSupplyRaw_ >> DEFAULT_EXPONENT_SIZE) << (totalSupplyRaw_ & DEFAULT_EXPONENT_MASK);\\n\\n        // totalSupply = supplyInterestFree + supplyRawInterest normalized from raw\\n        totalSupply_ += ((totalSupplyRaw_ * supplyExchangePrice_) / EXCHANGE_PRICES_PRECISION);\\n    }\\n\\n    /// @dev reads the total borrow out of Liquidity packed storage `totalAmounts_` for `borrowExchangePrice_`\\n    function getTotalBorrow(\\n        uint256 totalAmounts_,\\n        uint256 borrowExchangePrice_\\n    ) internal pure returns (uint256 totalBorrow_) {\\n        // totalBorrow_ => borrowInterestFree\\n        // no & mask needed for borrow interest free as it occupies the last bits in the storage slot\\n        totalBorrow_ = (totalAmounts_ >> LiquiditySlotsLink.BITS_TOTAL_AMOUNTS_BORROW_INTEREST_FREE);\\n        totalBorrow_ = (totalBorrow_ >> DEFAULT_EXPONENT_SIZE) << (totalBorrow_ & DEFAULT_EXPONENT_MASK);\\n\\n        uint256 totalBorrowRaw_ = (totalAmounts_ >> LiquiditySlotsLink.BITS_TOTAL_AMOUNTS_BORROW_WITH_INTEREST) & X64;\\n        totalBorrowRaw_ = (totalBorrowRaw_ >> DEFAULT_EXPONENT_SIZE) << (totalBorrowRaw_ & DEFAULT_EXPONENT_MASK);\\n\\n        // totalBorrow = borrowInterestFree + borrowRawInterest normalized from raw\\n        totalBorrow_ += ((totalBorrowRaw_ * borrowExchangePrice_) / EXCHANGE_PRICES_PRECISION);\\n    }\\n}\",\"versionPragma\":\"0.8.21\"},\"contracts/payloads/common/interfaces/IGovernorBravo.sol\":{\"content\":\"pragma solidity ^0.8.21;\\npragma experimental ABIEncoderV2;\\ninterface IGovernorBravo {\\n    function _acceptAdmin() external;\\n\\n    function _setVotingDelay(uint256 newVotingDelay) external;\\n\\n    function _setVotingPeriod(uint256 newVotingPeriod) external;\\n\\n    function _acceptAdminOnTimelock() external;\\n\\n    function _setImplementation(address implementation_) external;\\n\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) external returns (uint256);\\n\\n    function admin() external view returns (address);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function timelock() external view returns (address);\\n\\n    function votingDelay() external view returns (uint256);\\n\\n    function votingPeriod() external view returns (uint256);\\n}\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/common/interfaces/ITimelock.sol\":{\"content\":\"pragma solidity ^0.8.21;\\npragma experimental ABIEncoderV2;\\n\\ninterface ITimelock {\\n    function acceptAdmin() external;\\n\\n    function setDelay(uint256 delay_) external;\\n\\n    function setPendingAdmin(address pendingAdmin_) external;\\n\\n    function queueTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) external returns (bytes32);\\n\\n    function executeTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) external payable returns (bytes memory);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function delay() external view returns (uint256);\\n}\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/common/interfaces/IFluidLiquidity.sol\":{\"content\":\"pragma solidity ^0.8.21;\\npragma experimental ABIEncoderV2;\\n\\ninterface AdminModuleStructs {\\n    struct AddressBool {\\n        address addr;\\n        bool value;\\n    }\\n\\n    struct AddressUint256 {\\n        address addr;\\n        uint256 value;\\n    }\\n\\n    struct RateDataV1Params {\\n        address token;\\n        uint256 kink;\\n        uint256 rateAtUtilizationZero;\\n        uint256 rateAtUtilizationKink;\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    struct RateDataV2Params {\\n        address token;\\n        uint256 kink1;\\n        uint256 kink2;\\n        uint256 rateAtUtilizationZero;\\n        uint256 rateAtUtilizationKink1;\\n        uint256 rateAtUtilizationKink2;\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    struct TokenConfig {\\n        address token;\\n        uint256 fee;\\n        uint256 threshold;\\n    }\\n\\n    struct UserSupplyConfig {\\n        address user;\\n        address token;\\n        uint8 mode;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseWithdrawalLimit;\\n    }\\n\\n    struct UserBorrowConfig {\\n        address user;\\n        address token;\\n        uint8 mode;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseDebtCeiling;\\n        uint256 maxDebtCeiling;\\n    }\\n}\\n\\ninterface IFluidLiquidityAdmin {\\n    /// @notice adds/removes auths. Auths generally could be contracts which can have restricted actions defined on contract.\\n    ///         auths can be helpful in reducing governance overhead where it's not needed.\\n    /// @param authsStatus_ array of structs setting allowed status for an address.\\n    ///                     status true => add auth, false => remove auth\\n    function updateAuths(\\n        AdminModuleStructs.AddressBool[] calldata authsStatus_\\n    ) external;\\n\\n    /// @notice adds/removes guardians. Only callable by Governance.\\n    /// @param guardiansStatus_ array of structs setting allowed status for an address.\\n    ///                         status true => add guardian, false => remove guardian\\n    function updateGuardians(\\n        AdminModuleStructs.AddressBool[] calldata guardiansStatus_\\n    ) external;\\n\\n    /// @notice changes the revenue collector address (contract that is sent revenue). Only callable by Governance.\\n    /// @param revenueCollector_  new revenue collector address\\n    function updateRevenueCollector(address revenueCollector_) external;\\n\\n    /// @notice changes current status, e.g. for pausing or unpausing all user operations. Only callable by Auths.\\n    /// @param newStatus_ new status\\n    ///        status = 2 -> pause, status = 1 -> resume.\\n    function changeStatus(uint256 newStatus_) external;\\n\\n    /// @notice                  update tokens rate data version 1. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV1Params with rate data to set for each token\\n    function updateRateDataV1s(\\n        AdminModuleStructs.RateDataV1Params[] calldata tokensRateData_\\n    ) external;\\n\\n    /// @notice                  update tokens rate data version 2. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV2Params with rate data to set for each token\\n    function updateRateDataV2s(\\n        AdminModuleStructs.RateDataV2Params[] calldata tokensRateData_\\n    ) external;\\n\\n    /// @notice updates token configs: fee charge on borrowers interest & storage update utilization threshold.\\n    ///         Only callable by Auths.\\n    /// @param tokenConfigs_ contains token address, fee & utilization threshold\\n    function updateTokenConfigs(\\n        AdminModuleStructs.TokenConfig[] calldata tokenConfigs_\\n    ) external;\\n\\n    /// @notice updates user classes: 0 is for new protocols, 1 is for established protocols.\\n    ///         Only callable by Auths.\\n    /// @param userClasses_ struct array of uint256 value to assign for each user address\\n    function updateUserClasses(\\n        AdminModuleStructs.AddressUint256[] calldata userClasses_\\n    ) external;\\n\\n    /// @notice sets user supply configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userSupplyConfigs_ struct array containing user supply config, see `UserSupplyConfig` struct for more info\\n    function updateUserSupplyConfigs(\\n        AdminModuleStructs.UserSupplyConfig[] memory userSupplyConfigs_\\n    ) external;\\n\\n    /// @notice setting user borrow configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userBorrowConfigs_ struct array containing user borrow config, see `UserBorrowConfig` struct for more info\\n    function updateUserBorrowConfigs(\\n        AdminModuleStructs.UserBorrowConfig[] memory userBorrowConfigs_\\n    ) external;\\n\\n    /// @notice pause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to pause operations for\\n    /// @param supplyTokens_  token addresses to pause withdrawals for\\n    /// @param borrowTokens_  token addresses to pause borrowings for\\n    function pauseUser(\\n        address user_,\\n        address[] calldata supplyTokens_,\\n        address[] calldata borrowTokens_\\n    ) external;\\n\\n    /// @notice unpause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to unpause operations for\\n    /// @param supplyTokens_  token addresses to unpause withdrawals for\\n    /// @param borrowTokens_  token addresses to unpause borrowings for\\n    function unpauseUser(\\n        address user_,\\n        address[] calldata supplyTokens_,\\n        address[] calldata borrowTokens_\\n    ) external;\\n\\n    /// @notice         collects revenue for tokens to configured revenueCollector address.\\n    /// @param tokens_  array of tokens to collect revenue for\\n    /// @dev            Note that this can revert if token balance is < revenueAmount (utilization > 100%)\\n    function collectRevenue(address[] calldata tokens_) external;\\n\\n    /// @notice gets the current updated exchange prices for n tokens and updates all prices, rates related data in storage.\\n    /// @param tokens_ tokens to update exchange prices for\\n    /// @return supplyExchangePrices_ new supply rates of overall system for each token\\n    /// @return borrowExchangePrices_ new borrow rates of overall system for each token\\n    function updateExchangePrices(\\n        address[] calldata tokens_\\n    )\\n        external\\n        returns (\\n            uint256[] memory supplyExchangePrices_,\\n            uint256[] memory borrowExchangePrices_\\n        );\\n\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n}\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/common/interfaces/IFluidReserveContract.sol\":{\"content\":\"pragma solidity ^0.8.21;\\npragma experimental ABIEncoderV2;\\n\\ninterface IFluidReserveContract {\\n    function isRebalancer(address user) external returns (bool);\\n\\n    function rebalanceFToken(address protocol_) external;\\n\\n    function rebalanceVault(address protocol_) external;\\n\\n    function transferFunds(address token_) external;\\n\\n    function getProtocolTokens(address protocol_) external;\\n\\n    function updateAuth(address auth_, bool isAuth_) external;\\n\\n    function updateRebalancer(address rebalancer_, bool isRebalancer_) external;\\n\\n    function approve(\\n        address[] memory protocols_,\\n        address[] memory tokens_,\\n        uint256[] memory amounts_\\n    ) external;\\n\\n    function revoke(\\n        address[] memory protocols_,\\n        address[] memory tokens_\\n    ) external;\\n}\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/common/interfaces/IFluidVaultFactory.sol\":{\"content\":\"pragma solidity ^0.8.21;\\npragma experimental ABIEncoderV2;\\ninterface IFluidVaultFactory {\\n    /// @notice                         Sets an address as allowed vault deployment logic (`deploymentLogic_`) contract or not.\\n    ///                                 This function can only be called by the owner.\\n    /// @param deploymentLogic_         The address of the vault deployment logic contract to be set.\\n    /// @param allowed_                 A boolean indicating whether the specified address is allowed to deploy new type of vault.\\n    function setVaultDeploymentLogic(\\n        address deploymentLogic_,\\n        bool allowed_\\n    ) external;\\n\\n    /// @notice                         Sets an address (`vaultAuth_`) as allowed vault authorization or not for a specific vault (`vault_`).\\n    ///                                 This function can only be called by the owner.\\n    /// @param vault_                   The address of the vault for which the authorization is being set.\\n    /// @param vaultAuth_               The address to be set as vault authorization.\\n    /// @param allowed_                 A boolean indicating whether the specified address is allowed to update the specific vault config.\\n    function setVaultAuth(\\n        address vault_,\\n        address vaultAuth_,\\n        bool allowed_\\n    ) external;\\n\\n    /// @notice                         Computes the address of a vault based on its given ID (`vaultId_`).\\n    /// @param vaultId_                 The ID of the vault.\\n    /// @return vault_                  Returns the computed address of the vault.\\n    function getVaultAddress(\\n        uint256 vaultId_\\n    ) external view returns (address vault_);\\n}\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/common/interfaces/IFluidDexFactory.sol\":{\"content\":\"pragma solidity ^0.8.21;\\n\\ninterface IFluidDexFactory {\\n    /// @notice                         Computes the address of a dex based on its given ID (`dexId_`).\\n    /// @param dexId_                   The ID of the dex.\\n    /// @return dex_                    Returns the computed address of the dex.\\n    function getDexAddress(uint256 dexId_) external view returns (address dex_);\\n\\n    function setDexAuth(address dex_, address dexAuth_, bool allowed_) external;\\n\\n    function owner() external view returns (address);\\n\\n    function setDexDeploymentLogic(\\n        address deploymentLogic_,\\n        bool allowed_\\n    ) external;\\n}\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/common/interfaces/IFluidDex.sol\":{\"content\":\"pragma solidity ^0.8.21;\\n\\ninterface IFluidAdminDex {\\n    /// @param upperThresholdPercent_ in 4 decimals, 10000 = 1%\\n    /// @param lowerThresholdPercent_ in 4 decimals, 10000 = 1%\\n    /// @param thresholdShiftTime_ in secs, in how much time the threshold percent should take to shift the ranges\\n    /// @param shiftTime_ in secs, in how much time the upper config changes should be fully done.\\n    function updateThresholdPercent(\\n        uint upperThresholdPercent_,\\n        uint lowerThresholdPercent_,\\n        uint thresholdShiftTime_,\\n        uint shiftTime_\\n    ) external;\\n\\n    function updateCenterPriceLimits(\\n        uint maxCenterPrice_,\\n        uint minCenterPrice_\\n    ) external;\\n\\n    function updateCenterPriceAddress(\\n        uint centerPriceAddress_,\\n        uint percent_,\\n        uint time_\\n    ) external;\\n\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n\\n    function updateMaxSupplyShares(uint maxSupplyShares_) external;\\n\\n    function updateMaxBorrowShares(uint maxBorrowShares_) external;\\n\\n    /// @notice struct to set user supply & withdrawal config\\n    struct UserSupplyConfig {\\n        ///\\n        /// @param user address\\n        address user;\\n        ///\\n        /// @param expandPercent withdrawal limit expand percent. in 1e2: 100% = 10_000; 1% = 100\\n        /// Also used to calculate rate at which withdrawal limit should decrease (instant).\\n        uint256 expandPercent;\\n        ///\\n        /// @param expandDuration withdrawal limit expand duration in seconds.\\n        /// used to calculate rate together with expandPercent\\n        uint256 expandDuration;\\n        ///\\n        /// @param baseWithdrawalLimit base limit, below this, user can withdraw the entire amount.\\n        /// amount in raw (to be multiplied with exchange price) or normal depends on configured mode in user config for the token:\\n        /// with interest -> raw, without interest -> normal\\n        uint256 baseWithdrawalLimit;\\n    }\\n\\n    /// @notice struct to set user borrow & payback config\\n    struct UserBorrowConfig {\\n        ///\\n        /// @param user address\\n        address user;\\n        ///\\n        /// @param expandPercent debt limit expand percent. in 1e2: 100% = 10_000; 1% = 100\\n        /// Also used to calculate rate at which debt limit should decrease (instant).\\n        uint256 expandPercent;\\n        ///\\n        /// @param expandDuration debt limit expand duration in seconds.\\n        /// used to calculate rate together with expandPercent\\n        uint256 expandDuration;\\n        ///\\n        /// @param baseDebtCeiling base borrow limit. until here, borrow limit remains as baseDebtCeiling\\n        /// (user can borrow until this point at once without stepped expansion). Above this, automated limit comes in place.\\n        /// amount in raw (to be multiplied with exchange price) or normal depends on configured mode in user config for the token:\\n        /// with interest -> raw, without interest -> normal\\n        uint256 baseDebtCeiling;\\n        ///\\n        /// @param maxDebtCeiling max borrow ceiling, maximum amount the user can borrow.\\n        /// amount in raw (to be multiplied with exchange price) or normal depends on configured mode in user config for the token:\\n        /// with interest -> raw, without interest -> normal\\n        uint256 maxDebtCeiling;\\n    }\\n\\n    function updateUserBorrowConfigs(\\n        UserBorrowConfig[] memory userBorrowConfigs_\\n    ) external;\\n\\n    function updateUserSupplyConfigs(\\n        UserSupplyConfig[] memory userSupplyConfigs_\\n    ) external;\\n\\n    struct InitializeVariables {\\n        bool smartCol;\\n        uint token0ColAmt;\\n        bool smartDebt;\\n        uint token0DebtAmt;\\n        uint centerPrice;\\n        uint fee;\\n        uint revenueCut;\\n        uint upperPercent;\\n        uint lowerPercent;\\n        uint upperShiftThreshold;\\n        uint lowerShiftThreshold;\\n        uint thresholdShiftTime;\\n        uint centerPriceAddress;\\n        uint hookAddress;\\n        uint maxCenterPrice;\\n        uint minCenterPrice;\\n    }\\n\\n    function initialize(InitializeVariables memory initializeVariables_) external payable;\\n\\n    function updateRangePercents(\\n        uint upperPercent_,\\n        uint lowerPercent_,\\n        uint shiftTime_\\n    ) external; \\n}\\n\\ninterface IFluidUserDex {\\n\\n}\\n\\ninterface IFluidDex is IFluidAdminDex, IFluidUserDex {}\\n\\ninterface IFluidDexResolver {\\n    struct Configs {\\n        bool isSmartCollateralEnabled;\\n        bool isSmartDebtEnabled;\\n        uint256 fee;\\n        uint256 revenueCut;\\n        uint256 upperRange;\\n        uint256 lowerRange;\\n        uint256 upperShiftThreshold;\\n        uint256 lowerShiftThreshold;\\n        uint256 shiftingTime;\\n        address centerPriceAddress;\\n        address hookAddress;\\n        uint256 maxCenterPrice;\\n        uint256 minCenterPrice;\\n        uint256 utilizationLimitToken0;\\n        uint256 utilizationLimitToken1;\\n        uint256 maxSupplyShares;\\n        uint256 maxBorrowShares;\\n    }\\n\\n    function getDexConfigs(\\n        address dex_\\n    ) external view returns (Configs memory configs_);\\n}\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/common/interfaces/IFluidVault.sol\":{\"content\":\"pragma solidity ^0.8.21;\\n\\ninterface IFluidVaultT1 {\\n    /// @notice updates the Vault oracle to `newOracle_`. Must implement the FluidOracle interface.\\n    function updateOracle(address newOracle_) external;\\n\\n    /// @notice updates the all Vault core settings according to input params.\\n    /// All input values are expected in 1e2 (1% = 100, 100% = 10_000).\\n    function updateCoreSettings(\\n        uint256 supplyRateMagnifier_,\\n        uint256 borrowRateMagnifier_,\\n        uint256 collateralFactor_,\\n        uint256 liquidationThreshold_,\\n        uint256 liquidationMaxLimit_,\\n        uint256 withdrawGap_,\\n        uint256 liquidationPenalty_,\\n        uint256 borrowFee_\\n    ) external;\\n\\n    /// @notice updates the allowed rebalancer to `newRebalancer_`.\\n    function updateRebalancer(address newRebalancer_) external;\\n\\n    /// @notice updates the supply rate magnifier to `supplyRateMagnifier_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateSupplyRateMagnifier(uint supplyRateMagnifier_) external;\\n\\n    /// @notice updates the borrow rate magnifier to `borrowRateMagnifier_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateBorrowRateMagnifier(uint borrowRateMagnifier_) external;\\n\\n    /// @notice updates the collateral factor to `collateralFactor_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateCollateralFactor(uint collateralFactor_) external;\\n\\n    /// @notice updates the liquidation threshold to `liquidationThreshold_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateLiquidationThreshold(uint liquidationThreshold_) external;\\n\\n    /// @notice updates the liquidation max limit to `liquidationMaxLimit_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateLiquidationMaxLimit(uint liquidationMaxLimit_) external;\\n\\n    /// @notice updates the withdrawal gap to `withdrawGap_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateWithdrawGap(uint withdrawGap_) external;\\n\\n    /// @notice updates the liquidation penalty to `liquidationPenalty_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateLiquidationPenalty(uint liquidationPenalty_) external;\\n\\n    /// @notice updates the borrow fee to `borrowFee_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateBorrowFee(uint borrowFee_) external;\\n\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n\\n    struct ConstantViews {\\n        address liquidity;\\n        address factory;\\n        address adminImplementation;\\n        address secondaryImplementation;\\n        address supplyToken;\\n        address borrowToken;\\n        uint8 supplyDecimals;\\n        uint8 borrowDecimals;\\n        uint vaultId;\\n        bytes32 liquiditySupplyExchangePriceSlot;\\n        bytes32 liquidityBorrowExchangePriceSlot;\\n        bytes32 liquidityUserSupplySlot;\\n        bytes32 liquidityUserBorrowSlot;\\n    }\\n\\n    /// @notice returns all Vault constants\\n    function constantsView()\\n        external\\n        view\\n        returns (ConstantViews memory constantsView_);\\n}\\n\\ninterface IFluidVault {\\n    function updateOracle(uint256 newOracle_) external;\\n}\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/common/interfaces/IFToken.sol\":{\"content\":\"pragma solidity ^0.8.21;\\n\\ninterface IFTokenAdmin {\\n    /// @notice updates the rewards rate model contract.\\n    ///         Only callable by LendingFactory auths.\\n    /// @param rewardsRateModel_  the new rewards rate model contract address.\\n    ///                           can be set to address(0) to set no rewards (to save gas)\\n    function updateRewards(address rewardsRateModel_) external;\\n\\n    /// @notice Balances out the difference between fToken supply at Liquidity vs totalAssets().\\n    ///         Deposits underlying from rebalancer address into Liquidity but doesn't mint any shares\\n    ///         -> thus making deposit available as rewards.\\n    ///         Only callable by rebalancer.\\n    /// @return assets_ amount deposited to Liquidity\\n    function rebalance() external payable returns (uint256 assets_);\\n\\n    /// @notice gets the liquidity exchange price of the underlying asset, calculates the updated exchange price (with reward rates)\\n    ///         and writes those values to storage.\\n    ///         Callable by anyone.\\n    /// @return tokenExchangePrice_ exchange price of fToken share to underlying asset\\n    /// @return liquidityExchangePrice_ exchange price at Liquidity for the underlying asset\\n    function updateRates()\\n        external\\n        returns (uint256 tokenExchangePrice_, uint256 liquidityExchangePrice_);\\n\\n    /// @notice sends any potentially stuck funds to Liquidity contract. Only callable by LendingFactory auths.\\n    function rescueFunds(address token_) external;\\n\\n    /// @notice Updates the rebalancer address (ReserveContract). Only callable by LendingFactory auths.\\n    function updateRebalancer(address rebalancer_) external;\\n}\\n\\ninterface ILendingRewards {\\n    function start() external;\\n}\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/common/interfaces/IDSA.sol\":{\"content\":\"pragma solidity ^0.8.21;\\n\\ninterface IDSAV2 {\\n    function cast(\\n        string[] memory _targetNames,\\n        bytes[] memory _datas,\\n        address _origin\\n    )\\n    external\\n    payable \\n    returns (bytes32);\\n\\n    function isAuth(address user) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/common/interfaces/IERC20.sol\":{\"content\":\"pragma solidity ^0.8.21;\\n\\ninterface IERC20 {\\n    function allowance(\\n        address spender,\\n        address caller\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/common/interfaces/IProxy.sol\":{\"content\":\"\\npragma solidity ^0.8.21;\\n\\ninterface IProxy {\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external;\\n}\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/common/interfaces/ILite.sol\":{\"content\":\"pragma solidity ^0.8.21;\\n\\ninterface ILite {\\n    function setAdmin(address newAdmin) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function removeImplementation(address implementation_) external;\\n\\n    function addImplementation(\\n        address implementation_,\\n        bytes4[] calldata sigs_\\n    ) external;\\n\\n    function setDummyImplementation(address newDummyImplementation_) external;\\n\\n    function updateMaxRiskRatio(\\n        uint8[] memory protocolId_,\\n        uint256[] memory newRiskRatio_\\n    ) external;\\n\\n    function updateAggrMaxVaultRatio(uint256 newAggrMaxVaultRatio_) external;\\n}\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/common/constants.sol\":{\"content\":\"pragma solidity ^0.8.21;\\npragma experimental ABIEncoderV2;\\n\\nimport {BigMathMinified} from \\\"../libraries/bigMathMinified.sol\\\";\\nimport {LiquidityCalcs} from \\\"../libraries/liquidityCalcs.sol\\\";\\nimport {LiquiditySlotsLink} from \\\"../libraries/liquiditySlotsLink.sol\\\";\\n\\nimport { IGovernorBravo } from \\\"./interfaces/IGovernorBravo.sol\\\";\\nimport { ITimelock } from \\\"./interfaces/ITimelock.sol\\\";\\n\\nimport { IFluidLiquidityAdmin } from \\\"./interfaces/IFluidLiquidity.sol\\\";\\nimport { IFluidReserveContract } from \\\"./interfaces/IFluidReserveContract.sol\\\";\\n\\nimport { IFluidVaultFactory } from \\\"./interfaces/IFluidVaultFactory.sol\\\";\\nimport { IFluidDexFactory } from \\\"./interfaces/IFluidDexFactory.sol\\\";\\n\\nimport { IFluidDex } from \\\"./interfaces/IFluidDex.sol\\\";\\nimport { IFluidDexResolver } from \\\"./interfaces/IFluidDex.sol\\\";\\n\\nimport { IFluidVault } from \\\"./interfaces/IFluidVault.sol\\\";\\nimport { IFluidVaultT1 } from \\\"./interfaces/IFluidVault.sol\\\";\\n\\nimport { IFTokenAdmin } from \\\"./interfaces/IFToken.sol\\\";\\nimport { ILendingRewards } from \\\"./interfaces/IFToken.sol\\\";\\n\\nimport { IDSAV2 } from \\\"./interfaces/IDSA.sol\\\";\\n\\nimport { ILite } from \\\"./interfaces/ILite.sol\\\";\\n\\n\\ncontract PayloadIGPConstants {\\n    address public immutable ADDRESS_THIS;\\n\\n    // Proposal Creators\\n    address public constant PROPOSER =\\n        0xA45f7bD6A5Ff45D31aaCE6bCD3d426D9328cea01;\\n    address public constant PROPOSER_AVO_MULTISIG =\\n        0x059A94A72951c0ae1cc1CE3BF0dB52421bbE8210;\\n    address public constant PROPOSER_AVO_MULTISIG_2 =\\n        0x9efdE135CA4832AbF0408c44c6f5f370eB0f35e8;\\n    address public constant PROPOSER_AVO_MULTISIG_3 =\\n        0x5C43AAC965ff230AC1cF63e924D0153291D78BaD;\\n    address public constant PROPOSER_AVO_MULTISIG_4 =\\n        0x3dAff61fe5cfB1f1B4eA7FBa8173A58532Ef1841;\\n    address public constant PROPOSER_AVO_MULTISIG_5 =\\n        0xE7EB63a8B6392481A9FDEbb108Cfd580DC8664d3;\\n\\n    // Governance Addresses\\n    IGovernorBravo public constant GOVERNOR =\\n        IGovernorBravo(0x0204Cd037B2ec03605CFdFe482D8e257C765fA1B);\\n    ITimelock public constant TIMELOCK =\\n        ITimelock(0x2386DC45AdDed673317eF068992F19421B481F4c);\\n    IDSAV2 public constant TREASURY = IDSAV2(0x28849D2b63fA8D361e5fc15cB8aBB13019884d09);\\n\\n    // Team Multisig\\n    address public constant TEAM_MULTISIG =\\n        0x4F6F977aCDD1177DCD81aB83074855EcB9C2D49e;\\n\\n    // Fluid Addresses\\n    IFluidLiquidityAdmin public constant LIQUIDITY =\\n        IFluidLiquidityAdmin(0x52Aa899454998Be5b000Ad077a46Bbe360F4e497);\\n    IFluidReserveContract public constant FLUID_RESERVE =\\n        IFluidReserveContract(0x264786EF916af64a1DB19F513F24a3681734ce92);\\n\\n\\n    // Fluid Factory Addresses\\n    IFluidVaultFactory public constant VAULT_FACTORY =\\n        IFluidVaultFactory(0x324c5Dc1fC42c7a4D43d92df1eBA58a54d13Bf2d);\\n    IFluidDexFactory public constant DEX_FACTORY =\\n        IFluidDexFactory(0x91716C4EDA1Fb55e84Bf8b4c7085f84285c19085);\\n\\n    \\n    ILite public constant IETHV2 =\\n        ILite(0xA0D3707c569ff8C87FA923d3823eC5D81c98Be78);\\n\\n\\n    // Tokens\\n    address internal constant ETH_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant wstETH_ADDRESS =\\n        0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\n    address internal constant weETH_ADDRESS =\\n        0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee;\\n    address internal constant rsETH_ADDRESS =\\n        0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7;\\n    address internal constant weETHs_ADDRESS =\\n        0x917ceE801a67f933F2e6b33fC0cD1ED2d5909D88;\\n\\n    address internal constant USDC_ADDRESS =\\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT_ADDRESS =\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal constant sUSDe_ADDRESS =\\n        0x9D39A5DE30e57443BfF2A8307A4256c8797A3497;\\n    address internal constant sUSDs_ADDRESS =\\n        0xa3931d71877C0E7a3148CB7Eb4463524FEc27fbD;\\n    address internal constant USDe_ADDRESS =\\n        0x4c9EDD5852cd905f086C759E8383e09bff1E68B3;\\n    address internal constant GHO_ADDRESS =\\n        0x40D16FC0246aD3160Ccc09B8D0D3A2cD28aE6C2f;\\n\\n    address internal constant WBTC_ADDRESS =\\n        0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    address internal constant cbBTC_ADDRESS =\\n        0xcbB7C0000aB88B473b1f5aFd9ef808440eed33Bf;\\n\\n    address internal constant INST_ADDRESS = \\n        0x6f40d4A6237C257fff2dB00FA0510DeEECd303eb;\\n\\n    // fTokens\\n    address internal constant F_USDT_ADDRESS = 0x5C20B550819128074FD538Edf79791733ccEdd18;\\n    address internal constant F_USDC_ADDRESS = 0x9Fb7b4477576Fe5B32be4C1843aFB1e55F251B33;\\n    address internal constant F_WETH_ADDRESS = 0x90551c1795392094FE6D29B758EcCD233cFAa260;\\n    address internal constant F_GHO_ADDRESS = 0x6A29A46E21C730DcA1d8b23d637c101cec605C5B;\\n\\n    // Constants\\n    uint256 internal constant X8 = 0xff;\\n    uint256 internal constant X10 = 0x3ff;\\n    uint256 internal constant X14 = 0x3fff;\\n    uint256 internal constant X15 = 0x7fff;\\n    uint256 internal constant X16 = 0xffff;\\n    uint256 internal constant X18 = 0x3ffff;\\n    uint256 internal constant X24 = 0xffffff;\\n    uint256 internal constant X64 = 0xffffffffffffffff;\\n\\n    uint256 internal constant DEFAULT_EXPONENT_SIZE = 8;\\n    uint256 internal constant DEFAULT_EXPONENT_MASK = 0xff;\\n\\n    constructor() {\\n        ADDRESS_THIS = address(this);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/common/helpers.sol\":{\"content\":\"pragma solidity ^0.8.21;\\npragma experimental ABIEncoderV2;\\n\\nimport {BigMathMinified} from \\\"../libraries/bigMathMinified.sol\\\";\\nimport {LiquidityCalcs} from \\\"../libraries/liquidityCalcs.sol\\\";\\nimport {LiquiditySlotsLink} from \\\"../libraries/liquiditySlotsLink.sol\\\";\\n\\nimport { IGovernorBravo } from \\\"./interfaces/IGovernorBravo.sol\\\";\\nimport { ITimelock } from \\\"./interfaces/ITimelock.sol\\\";\\n\\nimport { IFluidLiquidityAdmin, AdminModuleStructs as FluidLiquidityAdminStructs } from \\\"./interfaces/IFluidLiquidity.sol\\\";\\nimport { IFluidReserveContract } from \\\"./interfaces/IFluidReserveContract.sol\\\";\\n\\nimport { IFluidVaultFactory } from \\\"./interfaces/IFluidVaultFactory.sol\\\";\\nimport { IFluidDexFactory } from \\\"./interfaces/IFluidDexFactory.sol\\\";\\n\\nimport { IFluidDex } from \\\"./interfaces/IFluidDex.sol\\\";\\nimport { IFluidDexResolver } from \\\"./interfaces/IFluidDex.sol\\\";\\n\\nimport { IFluidVault } from \\\"./interfaces/IFluidVault.sol\\\";\\nimport { IFluidVaultT1 } from \\\"./interfaces/IFluidVault.sol\\\";\\n\\nimport { IFTokenAdmin } from \\\"./interfaces/IFToken.sol\\\";\\nimport { ILendingRewards } from \\\"./interfaces/IFToken.sol\\\";\\n\\nimport { IDSAV2 } from \\\"./interfaces/IDSA.sol\\\";\\n\\nimport { PayloadIGPConstants } from \\\"./constants.sol\\\";\\n\\n\\ncontract PayloadIGPHelpers is PayloadIGPConstants {\\n    /**\\n     * |\\n     * |     Proposal Payload Helpers      |\\n     * |__________________________________\\n     */\\n    function getVaultAddress(uint256 vaultId_) public view returns (address) {\\n        return VAULT_FACTORY.getVaultAddress(vaultId_);\\n    }\\n\\n    function getDexAddress(uint256 dexId_) public view returns (address) {\\n        return DEX_FACTORY.getDexAddress(dexId_);\\n    }\\n\\n    struct SupplyProtocolConfig {\\n        address protocol;\\n        address supplyToken;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseWithdrawalLimitInUSD;\\n    }\\n\\n    struct BorrowProtocolConfig {\\n        address protocol;\\n        address borrowToken;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseBorrowLimitInUSD;\\n        uint256 maxBorrowLimitInUSD;\\n    }\\n\\n    function setSupplyProtocolLimits(\\n        SupplyProtocolConfig memory protocolConfig_\\n    ) internal {\\n        {\\n            // Supply Limits\\n            FluidLiquidityAdminStructs.UserSupplyConfig[]\\n                memory configs_ = new FluidLiquidityAdminStructs.UserSupplyConfig[](1);\\n\\n            configs_[0] = FluidLiquidityAdminStructs.UserSupplyConfig({\\n                user: address(protocolConfig_.protocol),\\n                token: protocolConfig_.supplyToken,\\n                mode: 1,\\n                expandPercent: protocolConfig_.expandPercent,\\n                expandDuration: protocolConfig_.expandDuration,\\n                baseWithdrawalLimit: getRawAmount(\\n                    protocolConfig_.supplyToken,\\n                    0,\\n                    protocolConfig_.baseWithdrawalLimitInUSD,\\n                    true\\n                )\\n            });\\n\\n            LIQUIDITY.updateUserSupplyConfigs(configs_);\\n        }\\n    }\\n\\n    function setBorrowProtocolLimits(\\n        BorrowProtocolConfig memory protocolConfig_\\n    ) internal {\\n        {\\n            // Borrow Limits\\n            FluidLiquidityAdminStructs.UserBorrowConfig[]\\n                memory configs_ = new FluidLiquidityAdminStructs.UserBorrowConfig[](1);\\n\\n            configs_[0] = FluidLiquidityAdminStructs.UserBorrowConfig({\\n                user: address(protocolConfig_.protocol),\\n                token: protocolConfig_.borrowToken,\\n                mode: 1,\\n                expandPercent: protocolConfig_.expandPercent,\\n                expandDuration: protocolConfig_.expandDuration,\\n                baseDebtCeiling: getRawAmount(\\n                    protocolConfig_.borrowToken,\\n                    0,\\n                    protocolConfig_.baseBorrowLimitInUSD,\\n                    false\\n                ),\\n                maxDebtCeiling: getRawAmount(\\n                    protocolConfig_.borrowToken,\\n                    0,\\n                    protocolConfig_.maxBorrowLimitInUSD,\\n                    false\\n                )\\n            });\\n\\n            LIQUIDITY.updateUserBorrowConfigs(configs_);\\n        }\\n    }\\n\\n    function getRawAmount(\\n        address token,\\n        uint256 amount,\\n        uint256 amountInUSD,\\n        bool isSupply\\n    ) public virtual view returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.21\"}}}","address":"0xdc9beEE94733da3241075B968153f43ECbdC129c","bytecode":"0x60a060405260008055600060015560006002556000600355600060045534801561002857600080fd5b5030608052608051612d18610072600039600081816104b101528181610d690152818161150e015281816115940152818161161a015281816116a00152611d4f0152612d186000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c806366760d7d1161013b578063aa98df39116100b8578063cc025f7c1161007c578063cc025f7c146104ac578063e6bd26a2146104d3578063f6370aa9146104e6578063f88ed60c146104f0578063f973f5791461050b57600080fd5b8063aa98df3914610435578063b696649514610448578063b788f3a114610463578063bffa7f0f1461047e578063c575a5351461049957600080fd5b8063817f072a116100ff578063817f072a146103d957806395861bd7146103e25780639781a8ca146103fd57806397b87b4a146104075780639d3d2a781461042257600080fd5b806366760d7d146103735780636dc0ae221461037f578063762dc5c21461039a5780637aadef8b146103a35780637e2f35fa146103be57600080fd5b80632861c7d1116101c9578063569353841161018d5780635693538414610347578063588c77e614610350578063614619541461036b578063623007321461037557806364e9d567146102ad57600080fd5b80632861c7d1146102ed57806328787d00146102ad5780632d2c55651461030857806348bbb5571461032357806353e688b31461033e57600080fd5b8063103f290711610210578063103f29071461027a57806311ae7a14146102ad57806312e366aa146102b5578063194c0e18146102c857806325ad7f4d146102d257600080fd5b806301353b36146102425780630251eb111461025e5780630b396e66146102685780630bc9136e14610272575b600080fd5b61024b60025481565b6040519081526020015b60405180910390f35b61024b620606f881565b61024b62062e0881565b61024b604381565b61029573324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d81565b6040516001600160a01b039091168152602001610255565b61024b606481565b6102956102c33660046125e6565b610514565b61024b6207186881565b610295739efde135ca4832abf0408c44c6f5f370eb0f35e881565b6102957352aa899454998be5b000ad077a46bbe360f4e49781565b6102957328849d2b63fa8d361e5fc15cb8abb13019884d0981565b61029573e7eb63a8b6392481a9fdebb108cfd580dc8664d381565b61024b60035481565b61024b60005481565b610295735c43aac965ff230ac1cf63e924d0153291d78bad81565b610373610592565b005b61024b6205f37081565b610295730204cd037b2ec03605cfdfe482d8e257c765fa1b81565b61024b61035281565b610295732386dc45added673317ef068992f19421b481f4c81565b61029573059a94a72951c0ae1cc1ce3bf0db52421bbe821081565b61024b60015481565b61029573a0d3707c569ff8c87fa923d3823ec5d81c98be7881565b61024b629a1d2081565b6102957391716c4eda1fb55e84bf8b4c7085f84285c1908581565b61024b610430366004612614565b610627565b610373610443366004612679565b610a96565b61029573264786ef916af64a1db19f513f24a3681734ce9281565b610295734f6f977acdd1177dcd81ab83074855ecb9c2d49e81565b61029573a45f7bd6a5ff45d31aace6bcd3d426d9328cea0181565b6103736104a736600461272a565b610e94565b6102957f000000000000000000000000000000000000000000000000000000000000000081565b6102956104e13660046125e6565b610f02565b61024b6206551881565b610295733daff61fe5cfb1f1b4ea7fba8173a58532ef184181565b61024b60045481565b604051630971b35560e11b8152600481018290526000907391716c4eda1fb55e84bf8b4c7085f84285c19085906312e366aa906024015b602060405180830381865afa158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190612765565b92915050565b30732386dc45added673317ef068992f19421b481f4c146105ed5760405162461bcd60e51b815260206004820152601060248201526f3737ba16bb30b634b216b1b0b63632b960811b60448201526064015b60405180910390fd5b6105f5610f3d565b6105fd611165565b6106056113fb565b61060d61150a565b610615611977565b61061d6119d1565b610625611d3d565b565b600080841180156106385750600083115b156106855760405162461bcd60e51b815260206004820181905260248201527f626f74682075736420616e6420616d6f756e7420617265206e6f74207a65726f60448201526064016105e4565b604080516001600160a01b03871660208083019190915260058284015282518083038401815260608301938490528051910120632d71cdb960e21b90925260648101919091526000907352aa899454998be5b000ad077a46bbe360f4e4979063b5c736e490608401602060405180830381865afa15801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e9190612789565b905060008061073c83611eb4565b90925090506000601273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038b160161077857506205f37090506012610a16565b737f39c581f595b53c5cb19bd0b3f8da6c935e2c9f196001600160a01b038b16016107ab57506207186890506012610a16565b73cd5fe23c85820f7b72d0926fc9b05b43e359b7ed196001600160a01b038b16016107de57506206551890506012610a16565b73a1290d69c65a6fe4df752f95823fae25cb99e5a6196001600160a01b038b1601610811575062062e0890506012610a16565b73917cee801a67f933f2e6b33fc0cd1ed2d5909d87196001600160a01b038b16016108445750620606f890506012610a16565b6001600160a01b038a1673cbb7c0000ab88b473b1f5afd9ef808440eed33bf148061088b57506001600160a01b038a16732260fac5e5542a773aa44fbcfedf7c193bc2c599145b1561089e5750629a1d2090506008610a16565b6001600160a01b038a1673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4814806108e557506001600160a01b038a1673dac17f958d2ee523a2206206994597c13d831ec7145b156108f65750606490506006610a16565b739d39a5de30e57443bff2a8307a4256c8797a3496196001600160a01b038b16016109275750606490506012610a16565b73a3931d71877c0e7a3148cb7eb4463524fec27fbc196001600160a01b038b16016109585750606490506012610a16565b6001600160a01b038a167340d16fc0246ad3160ccc09b8d0d3a2cd28ae6c2f148061099f57506001600160a01b038a16734c9edd5852cd905f086c759e8383e09bff1e68b3145b156109b05750606490506012610a16565b736f40d4a6237c257fff2db00fa0510deeecd303ea196001600160a01b038b16016109e2575061035290506012610a16565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd0b599bdd5b9960ba1b60448201526064016105e4565b600087610a235783610a25565b845b90508915610a545780610a3d8b64e8d4a510006127b8565b610a4791906127e5565b9650505050505050610a8e565b6064610a6082856127b8565b610a6a91906127e5565b610a7583600a6128eb565b610a848b64e8d4a510006127b8565b610a3d91906127b8565b949350505050565b3373a45f7bd6a5ff45d31aace6bcd3d426d9328cea011480610acb575033734f6f977acdd1177dcd81ab83074855ecb9c2d49e145b80610ae957503073059a94a72951c0ae1cc1ce3bf0db52421bbe8210145b80610b07575030739efde135ca4832abf0408c44c6f5f370eb0f35e8145b80610b25575030735c43aac965ff230ac1cf63e924d0153291d78bad145b80610b43575030733daff61fe5cfb1f1b4ea7fba8173a58532ef1841145b80610b6157503073e7eb63a8b6392481a9fdebb108cfd580dc8664d3145b610ba65760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c8b5b9bdd0b585b1b1bddd95960521b60448201526064016105e4565b604080516001808252818301909252600090826020808301908036833701905050905060008267ffffffffffffffff811115610be457610be4612663565b604051908082528060200260200182016040528015610c0d578160200160208202803683370190505b50905060008367ffffffffffffffff811115610c2b57610c2b612663565b604051908082528060200260200182016040528015610c5e57816020015b6060815260200190600190039081610c495790505b50905060008467ffffffffffffffff811115610c7c57610c7c612663565b604051908082528060200260200182016040528015610caf57816020015b6060815260200190600190039081610c9a5790505b509050732386dc45added673317ef068992f19421b481f4c84600081518110610cda57610cda6128f7565b60200260200101906001600160a01b031690816001600160a01b031681525050600083600081518110610d0f57610d0f6128f7565b602002602001018181525050604051806060016040528060248152602001612cbf6024913982600081518110610d4757610d476128f7565b60209081029190910181019190915260408051600081529182018152610d90917f0000000000000000000000000000000000000000000000000000000000000000918101612953565b60405160208183030381529060405281600081518110610db257610db26128f7565b6020908102919091010152604051636d4ab48d60e11b8152600090730204cd037b2ec03605cfdfe482d8e257c765fa1b9063da95691a90610dff9088908890889088908e90600401612a5d565b6020604051808303816000875af1158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190612789565b905060438114610e8b5760405162461bcd60e51b815260206004820152601460248201527350524f504f53414c5f49535f4e4f545f53414d4560601b60448201526064016105e4565b50505050505050565b33734f6f977acdd1177dcd81ab83074855ecb9c2d49e14610eeb5760405162461bcd60e51b81526020600482015260116024820152706e6f742d7465616d2d6d756c746973696760781b60448201526064016105e4565b600194909455600092909255600255600355600455565b60405163735e935160e11b81526004810182905260009073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a29060240161054b565b6000604051806101000160405280610f55600d610514565b6001600160a01b0316815273a1290d69c65a6fe4df752f95823fae25cb99e5a7602082015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60408201526001606082015260006080820181905261c35060a083015260c0820181905260e0909101529050610fc4816120a9565b7391716c4eda1fb55e84bf8b4c7085f84285c190856378c7e138610fe8600d610514565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60016040518463ffffffff1660e01b815260040161101d93929190612b0c565b600060405180830381600087803b15801561103757600080fd5b505af115801561104b573d6000803e3d6000fd5b50505050506000604051806101000160405280611068600e610514565b6001600160a01b0316815273917cee801a67f933f2e6b33fc0cd1ed2d5909d88602082015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60408201526001606082015260006080820181905261c35060a083015260c0820181905260e09091015290506110d7816120a9565b7391716c4eda1fb55e84bf8b4c7085f84285c190856378c7e1386110fb600e610514565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60016040518463ffffffff1660e01b815260040161113093929190612b0c565b600060405180830381600087803b15801561114a57600080fd5b505af115801561115e573d6000803e3d6000fd5b5050505050565b60006040518060e0016040528061117c604e610f02565b6001600160a01b0316815260200160018152600060208201819052737f39c581f595b53c5cb19bd0b3f8da6c935e2ca060408301526060820152619c40608082015261c35060a09091015290506111d281612216565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d216111f6604e610f02565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60016040518463ffffffff1660e01b815260040161122b93929190612b0c565b600060405180830381600087803b15801561124557600080fd5b505af1158015611259573d6000803e3d6000fd5b505050505060006040518060e00160405280611275604f610f02565b6001600160a01b031681526020016000815273a1290d69c65a6fe4df752f95823fae25cb99e5a76020820152737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0604082015261c35060608201819052619c40608083015260a09091015290506112de81612216565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d21611302604f610f02565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60016040518463ffffffff1660e01b815260040161133793929190612b0c565b600060405180830381600087803b15801561135157600080fd5b505af1158015611365573d6000803e3d6000fd5b505050505060006040518060e001604052806113816050610f02565b6001600160a01b0316815260200160018152600060208201819052737f39c581f595b53c5cb19bd0b3f8da6c935e2ca060408301526060820152619c40608082015261c35060a09091015290506113d781612216565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d216110fb6050610f02565b600061142073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee612710600080610627565b6040805160c081018252731f6b2bfdd5d1e6ade7b17027ff5300419a56ad6b815273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6020820152600091810182905260016060820152608081018390529192509060a081016103e8611488856103e96127b8565b61149291906127e5565b9052905061149f81612340565b50506040516351fa075360e11b815261251c6004820152731f6b2bfdd5d1e6ade7b17027ff5300419a56ad6b9063a3f40ea6906024015b600060405180830381600087803b1580156114f057600080fd5b505af1158015611504573d6000803e3d6000fd5b50505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166301353b366040518163ffffffff1660e01b8152600401602060405180830381865afa15801561156a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158e9190612789565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166353e688b36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116149190612789565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663817f072a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169a9190612789565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663569353846040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117209190612789565b9050816101a4146117b6577391716c4eda1fb55e84bf8b4c7085f84285c190856378c7e13861174e84610514565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60006040518463ffffffff1660e01b815260040161178393929190612b0c565b600060405180830381600087803b15801561179d57600080fd5b505af11580156117b1573d6000803e3d6000fd5b505050505b836101a41461184a577391716c4eda1fb55e84bf8b4c7085f84285c190856378c7e1386117e286610514565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60006040518463ffffffff1660e01b815260040161181793929190612b0c565b600060405180830381600087803b15801561183157600080fd5b505af1158015611845573d6000803e3d6000fd5b505050505b806101a4146118de5773324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d2161187683610f02565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60006040518463ffffffff1660e01b81526004016118ab93929190612b0c565b600060405180830381600087803b1580156118c557600080fd5b505af11580156118d9573d6000803e3d6000fd5b505050505b826101a4146115045773324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d2161190a85610f02565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60006040518463ffffffff1660e01b815260040161193f93929190612b0c565b600060405180830381600087803b15801561195957600080fd5b505af115801561196d573d6000803e3d6000fd5b5050505050505050565b6040805160008152602081019182905263278f794360e11b90915273264786ef916af64a1db19f513f24a3681734ce9290634f1ef286906114d69073e2283cdec12c6af6c51557bb4640c640800d70609060248101612b46565b6040805160028082526060820183526000926020830190803683375050604080516002808252606082018352939450600093909250906020830190803683375050604080516002808252606082018352939450600093909250906020830190803683370190505090506000611a466015610f02565b604051636eb1769f60e11b815273264786ef916af64a1db19f513f24a3681734ce9260048201526001600160a01b038216602482015290915060009073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb489063dd62ed3e90604401602060405180830381865afa158015611abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae29190612789565b90508185600081518110611af857611af86128f7565b60200260200101906001600160a01b031690816001600160a01b03168152505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4884600081518110611b4057611b406128f7565b6001600160a01b0390921660209283029190910190910152611b6781640165a0bc00612b6a565b83600081518110611b7a57611b7a6128f7565b60200260200101818152505050506000611b94601d610f02565b604051636eb1769f60e11b815273264786ef916af64a1db19f513f24a3681734ce9260048201526001600160a01b038216602482015290915060009073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb489063dd62ed3e90604401602060405180830381865afa158015611c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c309190612789565b90508185600181518110611c4657611c466128f7565b60200260200101906001600160a01b031690816001600160a01b03168152505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4884600181518110611c8e57611c8e6128f7565b6001600160a01b0390921660209283029190910190910152611cb48163ee6b2800612b6a565b83600181518110611cc757611cc76128f7565b602090810291909101015250506040516303e8046160e01b815273264786ef916af64a1db19f513f24a3681734ce92906303e8046190611d0f90869086908690600401612b7d565b600060405180830381600087803b158015611d2957600080fd5b505af1158015610e8b573d6000803e3d6000fd5b6000611d496003610514565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f973f5796040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcf9190612789565b9050806101a403611dde575050565b6103e581118015611df157506103e68111155b611e3d5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d63656e7465722d70726963652d69732d746f6f2d686967680000000060448201526064016105e4565b60006103e8611e58836b033b2e3c9fd0803ce80000006127b8565b611e6291906127e5565b90506000611e7d836c0c9f2c9cd04674edea400000006127e5565b604051635a70f01960e11b815260048101829052602481018490529091506001600160a01b0385169063b4e1e0329060440161193f565b67ffffffffffffffff605b82901c811690609b83901c16811580611ed6575080155b15611ef957604051636a86ba8960e11b81526201117160048201526024016105e4565b61ffff8316603a84901c6401ffffffff16428181039160ea87901c617fff16911480611f23575082155b80611f2e5750806001145b15611f3b57505050915091565b64496cebb80084840283020484019350617fff60db87901c16925082600103611f6657505050915091565b82600116600103611fbb5760019290921c91826c7e37be2022c0914b268000000081611f9457611f946127cf565b049250612710601e87901c613fff166b033b2e3c9fd0803ce8000000850102049250611fe8565b60019290921c916305f5e100601e87901c613fff166127108501026b033b2e3c9fd0803ce8000000020492505b8060011660010361201f5760011c61271081016b033b2e3c9fd0803ce8000000820281612017576120176127cf565b049050612055565b60011c61271081016b033b2e3c9fd0803ce8000000820281612043576120436127cf565b046b033b2e3c9fd0803ce80000000390505b760a70c3c40a64e6c51999090b65f67d92400000000000008382026127100261ffff881691900402601087901c613fff16612710030292506801b5a660ea44b8000085840283020485019450505050915091565b8060600151156121545760006040518060a0016040528083600001516001600160a01b0316815260200183602001516001600160a01b031681526020016113888152602001610e1081526020018360a001518152509050612109816124ce565b6040805160a0808201835284516001600160a01b0390811683528584015116602083015261138892820192909252610e106060820152908301516080820152612151816124ce565b50505b8060800151156122135760006040518060c0016040528083600001516001600160a01b0316815260200183602001516001600160a01b031681526020016113888152602001610e1081526020018360c0015181526020018360e0015181525090506121be81612340565b6040805160c0808201835284516001600160a01b0390811683528584015116602083015261138892820192909252610e10606082015290830151608082015260e083015160a082015261221081612340565b50505b50565b60028160200151600381111561222e5761222e612b30565b148061224f575060008160200151600381111561224d5761224d612b30565b145b1561229e576040805160a08101825282516001600160a01b039081168252838301511660208201526109c49181019190915261a8c060608201526080808301519082015261229c816124ce565b505b6001816020015160038111156122b6576122b6612b30565b14806122d757506000816020015160038111156122d5576122d5612b30565b145b156122135760006040518060c0016040528083600001516001600160a01b0316815260200183606001516001600160a01b031681526020016107d0815260200161a8c081526020018360a0015181526020018360c00151815250905061233c81612340565b5050565b604080516001808252818301909252600091816020015b6123ac6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600060ff168152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816123575790505090506040518060e0016040528083600001516001600160a01b0316815260200183602001516001600160a01b03168152602001600160ff16815260200183604001518152602001836060015181526020016124268460200151600086608001516000610627565b8152602001612441846020015160008660a001516000610627565b81525081600081518110612457576124576128f7565b602090810291909101015260405162dc47c360e11b81527352aa899454998be5b000ad077a46bbe360f4e497906301b88f8690612498908490600401612bc0565b600060405180830381600087803b1580156124b257600080fd5b505af11580156124c6573d6000803e3d6000fd5b505050505050565b604080516001808252818301909252600091816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a082015282526000199092019101816124e55790505090506040518060c0016040528083600001516001600160a01b0316815260200183602001516001600160a01b03168152602001600160ff168152602001836040015181526020018360600151815260200161258e8460200151600086608001516001610627565b815250816000815181106125a4576125a46128f7565b60209081029190910101526040516301635db560e11b81527352aa899454998be5b000ad077a46bbe360f4e497906302c6bb6a90612498908490600401612c44565b6000602082840312156125f857600080fd5b5035919050565b6001600160a01b038116811461221357600080fd5b6000806000806080858703121561262a57600080fd5b8435612635816125ff565b935060208501359250604085013591506060850135801515811461265857600080fd5b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561268b57600080fd5b813567ffffffffffffffff808211156126a357600080fd5b818401915084601f8301126126b757600080fd5b8135818111156126c9576126c9612663565b604051601f8201601f19908116603f011681019083821181831017156126f1576126f1612663565b8160405282815287602084870101111561270a57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080600080600060a0868803121561274257600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60006020828403121561277757600080fd5b8151612782816125ff565b9392505050565b60006020828403121561279b57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761058c5761058c6127a2565b634e487b7160e01b600052601260045260246000fd5b60008261280257634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612842578160001904821115612828576128286127a2565b8085161561283557918102915b93841c939080029061280c565b509250929050565b6000826128595750600161058c565b816128665750600061058c565b816001811461287c5760028114612886576128a2565b600191505061058c565b60ff841115612897576128976127a2565b50506001821b61058c565b5060208310610133831016604e8410600b84101617156128c5575081810a61058c565b6128cf8383612807565b80600019048211156128e3576128e36127a2565b029392505050565b6000612782838361284a565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561293357602081850181015186830182015201612917565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b038316815260606020820152600960608201526865786563757465282960b81b608082015260a060408201526000610a8e60a083018461290d565b600081518084526020808501945080840160005b838110156129cd5781516001600160a01b0316875295820195908201906001016129a8565b509495945050505050565b600081518084526020808501945080840160005b838110156129cd578151875295820195908201906001016129ec565b600081518084526020808501808196508360051b8101915082860160005b85811015612a50578284038952612a3e84835161290d565b98850198935090840190600101612a26565b5091979650505050505050565b60a081526000612a7060a0830188612994565b602083820381850152612a8382896129d8565b915083820360408501528187518084528284019150828160051b850101838a0160005b83811015612ad457601f19878403018552612ac283835161290d565b94860194925090850190600101612aa6565b50508681036060880152612ae8818a612a08565b9450505050508281036080840152612b00818561290d565b98975050505050505050565b6001600160a01b039384168152919092166020820152901515604082015260600190565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0383168152604060208201819052600090610a8e9083018461290d565b8082018082111561058c5761058c6127a2565b606081526000612b906060830186612994565b8281036020840152612ba28186612994565b90508281036040840152612bb681856129d8565b9695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015612a5057815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0808201519086015260c0908101519085015260e09093019290850190600101612bdd565b602080825282518282018190526000919060409081850190868401855b82811015612a5057815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0908101519085015260c09093019290850190600101612c6156fe657865637574655061796c6f616428616464726573732c737472696e672c627974657329a2646970667358221220e0332a1012e09119ad25868ee022c34594ac7c8a0de7d018a9bc8ad7c39ce25064736f6c63430008150033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061023d5760003560e01c806366760d7d1161013b578063aa98df39116100b8578063cc025f7c1161007c578063cc025f7c146104ac578063e6bd26a2146104d3578063f6370aa9146104e6578063f88ed60c146104f0578063f973f5791461050b57600080fd5b8063aa98df3914610435578063b696649514610448578063b788f3a114610463578063bffa7f0f1461047e578063c575a5351461049957600080fd5b8063817f072a116100ff578063817f072a146103d957806395861bd7146103e25780639781a8ca146103fd57806397b87b4a146104075780639d3d2a781461042257600080fd5b806366760d7d146103735780636dc0ae221461037f578063762dc5c21461039a5780637aadef8b146103a35780637e2f35fa146103be57600080fd5b80632861c7d1116101c9578063569353841161018d5780635693538414610347578063588c77e614610350578063614619541461036b578063623007321461037557806364e9d567146102ad57600080fd5b80632861c7d1146102ed57806328787d00146102ad5780632d2c55651461030857806348bbb5571461032357806353e688b31461033e57600080fd5b8063103f290711610210578063103f29071461027a57806311ae7a14146102ad57806312e366aa146102b5578063194c0e18146102c857806325ad7f4d146102d257600080fd5b806301353b36146102425780630251eb111461025e5780630b396e66146102685780630bc9136e14610272575b600080fd5b61024b60025481565b6040519081526020015b60405180910390f35b61024b620606f881565b61024b62062e0881565b61024b604381565b61029573324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d81565b6040516001600160a01b039091168152602001610255565b61024b606481565b6102956102c33660046125e6565b610514565b61024b6207186881565b610295739efde135ca4832abf0408c44c6f5f370eb0f35e881565b6102957352aa899454998be5b000ad077a46bbe360f4e49781565b6102957328849d2b63fa8d361e5fc15cb8abb13019884d0981565b61029573e7eb63a8b6392481a9fdebb108cfd580dc8664d381565b61024b60035481565b61024b60005481565b610295735c43aac965ff230ac1cf63e924d0153291d78bad81565b610373610592565b005b61024b6205f37081565b610295730204cd037b2ec03605cfdfe482d8e257c765fa1b81565b61024b61035281565b610295732386dc45added673317ef068992f19421b481f4c81565b61029573059a94a72951c0ae1cc1ce3bf0db52421bbe821081565b61024b60015481565b61029573a0d3707c569ff8c87fa923d3823ec5d81c98be7881565b61024b629a1d2081565b6102957391716c4eda1fb55e84bf8b4c7085f84285c1908581565b61024b610430366004612614565b610627565b610373610443366004612679565b610a96565b61029573264786ef916af64a1db19f513f24a3681734ce9281565b610295734f6f977acdd1177dcd81ab83074855ecb9c2d49e81565b61029573a45f7bd6a5ff45d31aace6bcd3d426d9328cea0181565b6103736104a736600461272a565b610e94565b6102957f000000000000000000000000000000000000000000000000000000000000000081565b6102956104e13660046125e6565b610f02565b61024b6206551881565b610295733daff61fe5cfb1f1b4ea7fba8173a58532ef184181565b61024b60045481565b604051630971b35560e11b8152600481018290526000907391716c4eda1fb55e84bf8b4c7085f84285c19085906312e366aa906024015b602060405180830381865afa158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190612765565b92915050565b30732386dc45added673317ef068992f19421b481f4c146105ed5760405162461bcd60e51b815260206004820152601060248201526f3737ba16bb30b634b216b1b0b63632b960811b60448201526064015b60405180910390fd5b6105f5610f3d565b6105fd611165565b6106056113fb565b61060d61150a565b610615611977565b61061d6119d1565b610625611d3d565b565b600080841180156106385750600083115b156106855760405162461bcd60e51b815260206004820181905260248201527f626f74682075736420616e6420616d6f756e7420617265206e6f74207a65726f60448201526064016105e4565b604080516001600160a01b03871660208083019190915260058284015282518083038401815260608301938490528051910120632d71cdb960e21b90925260648101919091526000907352aa899454998be5b000ad077a46bbe360f4e4979063b5c736e490608401602060405180830381865afa15801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e9190612789565b905060008061073c83611eb4565b90925090506000601273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038b160161077857506205f37090506012610a16565b737f39c581f595b53c5cb19bd0b3f8da6c935e2c9f196001600160a01b038b16016107ab57506207186890506012610a16565b73cd5fe23c85820f7b72d0926fc9b05b43e359b7ed196001600160a01b038b16016107de57506206551890506012610a16565b73a1290d69c65a6fe4df752f95823fae25cb99e5a6196001600160a01b038b1601610811575062062e0890506012610a16565b73917cee801a67f933f2e6b33fc0cd1ed2d5909d87196001600160a01b038b16016108445750620606f890506012610a16565b6001600160a01b038a1673cbb7c0000ab88b473b1f5afd9ef808440eed33bf148061088b57506001600160a01b038a16732260fac5e5542a773aa44fbcfedf7c193bc2c599145b1561089e5750629a1d2090506008610a16565b6001600160a01b038a1673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4814806108e557506001600160a01b038a1673dac17f958d2ee523a2206206994597c13d831ec7145b156108f65750606490506006610a16565b739d39a5de30e57443bff2a8307a4256c8797a3496196001600160a01b038b16016109275750606490506012610a16565b73a3931d71877c0e7a3148cb7eb4463524fec27fbc196001600160a01b038b16016109585750606490506012610a16565b6001600160a01b038a167340d16fc0246ad3160ccc09b8d0d3a2cd28ae6c2f148061099f57506001600160a01b038a16734c9edd5852cd905f086c759e8383e09bff1e68b3145b156109b05750606490506012610a16565b736f40d4a6237c257fff2db00fa0510deeecd303ea196001600160a01b038b16016109e2575061035290506012610a16565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd0b599bdd5b9960ba1b60448201526064016105e4565b600087610a235783610a25565b845b90508915610a545780610a3d8b64e8d4a510006127b8565b610a4791906127e5565b9650505050505050610a8e565b6064610a6082856127b8565b610a6a91906127e5565b610a7583600a6128eb565b610a848b64e8d4a510006127b8565b610a3d91906127b8565b949350505050565b3373a45f7bd6a5ff45d31aace6bcd3d426d9328cea011480610acb575033734f6f977acdd1177dcd81ab83074855ecb9c2d49e145b80610ae957503073059a94a72951c0ae1cc1ce3bf0db52421bbe8210145b80610b07575030739efde135ca4832abf0408c44c6f5f370eb0f35e8145b80610b25575030735c43aac965ff230ac1cf63e924d0153291d78bad145b80610b43575030733daff61fe5cfb1f1b4ea7fba8173a58532ef1841145b80610b6157503073e7eb63a8b6392481a9fdebb108cfd580dc8664d3145b610ba65760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c8b5b9bdd0b585b1b1bddd95960521b60448201526064016105e4565b604080516001808252818301909252600090826020808301908036833701905050905060008267ffffffffffffffff811115610be457610be4612663565b604051908082528060200260200182016040528015610c0d578160200160208202803683370190505b50905060008367ffffffffffffffff811115610c2b57610c2b612663565b604051908082528060200260200182016040528015610c5e57816020015b6060815260200190600190039081610c495790505b50905060008467ffffffffffffffff811115610c7c57610c7c612663565b604051908082528060200260200182016040528015610caf57816020015b6060815260200190600190039081610c9a5790505b509050732386dc45added673317ef068992f19421b481f4c84600081518110610cda57610cda6128f7565b60200260200101906001600160a01b031690816001600160a01b031681525050600083600081518110610d0f57610d0f6128f7565b602002602001018181525050604051806060016040528060248152602001612cbf6024913982600081518110610d4757610d476128f7565b60209081029190910181019190915260408051600081529182018152610d90917f0000000000000000000000000000000000000000000000000000000000000000918101612953565b60405160208183030381529060405281600081518110610db257610db26128f7565b6020908102919091010152604051636d4ab48d60e11b8152600090730204cd037b2ec03605cfdfe482d8e257c765fa1b9063da95691a90610dff9088908890889088908e90600401612a5d565b6020604051808303816000875af1158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190612789565b905060438114610e8b5760405162461bcd60e51b815260206004820152601460248201527350524f504f53414c5f49535f4e4f545f53414d4560601b60448201526064016105e4565b50505050505050565b33734f6f977acdd1177dcd81ab83074855ecb9c2d49e14610eeb5760405162461bcd60e51b81526020600482015260116024820152706e6f742d7465616d2d6d756c746973696760781b60448201526064016105e4565b600194909455600092909255600255600355600455565b60405163735e935160e11b81526004810182905260009073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a29060240161054b565b6000604051806101000160405280610f55600d610514565b6001600160a01b0316815273a1290d69c65a6fe4df752f95823fae25cb99e5a7602082015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60408201526001606082015260006080820181905261c35060a083015260c0820181905260e0909101529050610fc4816120a9565b7391716c4eda1fb55e84bf8b4c7085f84285c190856378c7e138610fe8600d610514565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60016040518463ffffffff1660e01b815260040161101d93929190612b0c565b600060405180830381600087803b15801561103757600080fd5b505af115801561104b573d6000803e3d6000fd5b50505050506000604051806101000160405280611068600e610514565b6001600160a01b0316815273917cee801a67f933f2e6b33fc0cd1ed2d5909d88602082015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60408201526001606082015260006080820181905261c35060a083015260c0820181905260e09091015290506110d7816120a9565b7391716c4eda1fb55e84bf8b4c7085f84285c190856378c7e1386110fb600e610514565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60016040518463ffffffff1660e01b815260040161113093929190612b0c565b600060405180830381600087803b15801561114a57600080fd5b505af115801561115e573d6000803e3d6000fd5b5050505050565b60006040518060e0016040528061117c604e610f02565b6001600160a01b0316815260200160018152600060208201819052737f39c581f595b53c5cb19bd0b3f8da6c935e2ca060408301526060820152619c40608082015261c35060a09091015290506111d281612216565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d216111f6604e610f02565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60016040518463ffffffff1660e01b815260040161122b93929190612b0c565b600060405180830381600087803b15801561124557600080fd5b505af1158015611259573d6000803e3d6000fd5b505050505060006040518060e00160405280611275604f610f02565b6001600160a01b031681526020016000815273a1290d69c65a6fe4df752f95823fae25cb99e5a76020820152737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0604082015261c35060608201819052619c40608083015260a09091015290506112de81612216565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d21611302604f610f02565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60016040518463ffffffff1660e01b815260040161133793929190612b0c565b600060405180830381600087803b15801561135157600080fd5b505af1158015611365573d6000803e3d6000fd5b505050505060006040518060e001604052806113816050610f02565b6001600160a01b0316815260200160018152600060208201819052737f39c581f595b53c5cb19bd0b3f8da6c935e2ca060408301526060820152619c40608082015261c35060a09091015290506113d781612216565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d216110fb6050610f02565b600061142073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee612710600080610627565b6040805160c081018252731f6b2bfdd5d1e6ade7b17027ff5300419a56ad6b815273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6020820152600091810182905260016060820152608081018390529192509060a081016103e8611488856103e96127b8565b61149291906127e5565b9052905061149f81612340565b50506040516351fa075360e11b815261251c6004820152731f6b2bfdd5d1e6ade7b17027ff5300419a56ad6b9063a3f40ea6906024015b600060405180830381600087803b1580156114f057600080fd5b505af1158015611504573d6000803e3d6000fd5b50505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166301353b366040518163ffffffff1660e01b8152600401602060405180830381865afa15801561156a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158e9190612789565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166353e688b36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116149190612789565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663817f072a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169a9190612789565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663569353846040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117209190612789565b9050816101a4146117b6577391716c4eda1fb55e84bf8b4c7085f84285c190856378c7e13861174e84610514565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60006040518463ffffffff1660e01b815260040161178393929190612b0c565b600060405180830381600087803b15801561179d57600080fd5b505af11580156117b1573d6000803e3d6000fd5b505050505b836101a41461184a577391716c4eda1fb55e84bf8b4c7085f84285c190856378c7e1386117e286610514565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60006040518463ffffffff1660e01b815260040161181793929190612b0c565b600060405180830381600087803b15801561183157600080fd5b505af1158015611845573d6000803e3d6000fd5b505050505b806101a4146118de5773324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d2161187683610f02565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60006040518463ffffffff1660e01b81526004016118ab93929190612b0c565b600060405180830381600087803b1580156118c557600080fd5b505af11580156118d9573d6000803e3d6000fd5b505050505b826101a4146115045773324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d2161190a85610f02565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e60006040518463ffffffff1660e01b815260040161193f93929190612b0c565b600060405180830381600087803b15801561195957600080fd5b505af115801561196d573d6000803e3d6000fd5b5050505050505050565b6040805160008152602081019182905263278f794360e11b90915273264786ef916af64a1db19f513f24a3681734ce9290634f1ef286906114d69073e2283cdec12c6af6c51557bb4640c640800d70609060248101612b46565b6040805160028082526060820183526000926020830190803683375050604080516002808252606082018352939450600093909250906020830190803683375050604080516002808252606082018352939450600093909250906020830190803683370190505090506000611a466015610f02565b604051636eb1769f60e11b815273264786ef916af64a1db19f513f24a3681734ce9260048201526001600160a01b038216602482015290915060009073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb489063dd62ed3e90604401602060405180830381865afa158015611abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae29190612789565b90508185600081518110611af857611af86128f7565b60200260200101906001600160a01b031690816001600160a01b03168152505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4884600081518110611b4057611b406128f7565b6001600160a01b0390921660209283029190910190910152611b6781640165a0bc00612b6a565b83600081518110611b7a57611b7a6128f7565b60200260200101818152505050506000611b94601d610f02565b604051636eb1769f60e11b815273264786ef916af64a1db19f513f24a3681734ce9260048201526001600160a01b038216602482015290915060009073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb489063dd62ed3e90604401602060405180830381865afa158015611c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c309190612789565b90508185600181518110611c4657611c466128f7565b60200260200101906001600160a01b031690816001600160a01b03168152505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4884600181518110611c8e57611c8e6128f7565b6001600160a01b0390921660209283029190910190910152611cb48163ee6b2800612b6a565b83600181518110611cc757611cc76128f7565b602090810291909101015250506040516303e8046160e01b815273264786ef916af64a1db19f513f24a3681734ce92906303e8046190611d0f90869086908690600401612b7d565b600060405180830381600087803b158015611d2957600080fd5b505af1158015610e8b573d6000803e3d6000fd5b6000611d496003610514565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f973f5796040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcf9190612789565b9050806101a403611dde575050565b6103e581118015611df157506103e68111155b611e3d5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d63656e7465722d70726963652d69732d746f6f2d686967680000000060448201526064016105e4565b60006103e8611e58836b033b2e3c9fd0803ce80000006127b8565b611e6291906127e5565b90506000611e7d836c0c9f2c9cd04674edea400000006127e5565b604051635a70f01960e11b815260048101829052602481018490529091506001600160a01b0385169063b4e1e0329060440161193f565b67ffffffffffffffff605b82901c811690609b83901c16811580611ed6575080155b15611ef957604051636a86ba8960e11b81526201117160048201526024016105e4565b61ffff8316603a84901c6401ffffffff16428181039160ea87901c617fff16911480611f23575082155b80611f2e5750806001145b15611f3b57505050915091565b64496cebb80084840283020484019350617fff60db87901c16925082600103611f6657505050915091565b82600116600103611fbb5760019290921c91826c7e37be2022c0914b268000000081611f9457611f946127cf565b049250612710601e87901c613fff166b033b2e3c9fd0803ce8000000850102049250611fe8565b60019290921c916305f5e100601e87901c613fff166127108501026b033b2e3c9fd0803ce8000000020492505b8060011660010361201f5760011c61271081016b033b2e3c9fd0803ce8000000820281612017576120176127cf565b049050612055565b60011c61271081016b033b2e3c9fd0803ce8000000820281612043576120436127cf565b046b033b2e3c9fd0803ce80000000390505b760a70c3c40a64e6c51999090b65f67d92400000000000008382026127100261ffff881691900402601087901c613fff16612710030292506801b5a660ea44b8000085840283020485019450505050915091565b8060600151156121545760006040518060a0016040528083600001516001600160a01b0316815260200183602001516001600160a01b031681526020016113888152602001610e1081526020018360a001518152509050612109816124ce565b6040805160a0808201835284516001600160a01b0390811683528584015116602083015261138892820192909252610e106060820152908301516080820152612151816124ce565b50505b8060800151156122135760006040518060c0016040528083600001516001600160a01b0316815260200183602001516001600160a01b031681526020016113888152602001610e1081526020018360c0015181526020018360e0015181525090506121be81612340565b6040805160c0808201835284516001600160a01b0390811683528584015116602083015261138892820192909252610e10606082015290830151608082015260e083015160a082015261221081612340565b50505b50565b60028160200151600381111561222e5761222e612b30565b148061224f575060008160200151600381111561224d5761224d612b30565b145b1561229e576040805160a08101825282516001600160a01b039081168252838301511660208201526109c49181019190915261a8c060608201526080808301519082015261229c816124ce565b505b6001816020015160038111156122b6576122b6612b30565b14806122d757506000816020015160038111156122d5576122d5612b30565b145b156122135760006040518060c0016040528083600001516001600160a01b0316815260200183606001516001600160a01b031681526020016107d0815260200161a8c081526020018360a0015181526020018360c00151815250905061233c81612340565b5050565b604080516001808252818301909252600091816020015b6123ac6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600060ff168152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816123575790505090506040518060e0016040528083600001516001600160a01b0316815260200183602001516001600160a01b03168152602001600160ff16815260200183604001518152602001836060015181526020016124268460200151600086608001516000610627565b8152602001612441846020015160008660a001516000610627565b81525081600081518110612457576124576128f7565b602090810291909101015260405162dc47c360e11b81527352aa899454998be5b000ad077a46bbe360f4e497906301b88f8690612498908490600401612bc0565b600060405180830381600087803b1580156124b257600080fd5b505af11580156124c6573d6000803e3d6000fd5b505050505050565b604080516001808252818301909252600091816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a082015282526000199092019101816124e55790505090506040518060c0016040528083600001516001600160a01b0316815260200183602001516001600160a01b03168152602001600160ff168152602001836040015181526020018360600151815260200161258e8460200151600086608001516001610627565b815250816000815181106125a4576125a46128f7565b60209081029190910101526040516301635db560e11b81527352aa899454998be5b000ad077a46bbe360f4e497906302c6bb6a90612498908490600401612c44565b6000602082840312156125f857600080fd5b5035919050565b6001600160a01b038116811461221357600080fd5b6000806000806080858703121561262a57600080fd5b8435612635816125ff565b935060208501359250604085013591506060850135801515811461265857600080fd5b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561268b57600080fd5b813567ffffffffffffffff808211156126a357600080fd5b818401915084601f8301126126b757600080fd5b8135818111156126c9576126c9612663565b604051601f8201601f19908116603f011681019083821181831017156126f1576126f1612663565b8160405282815287602084870101111561270a57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080600080600060a0868803121561274257600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60006020828403121561277757600080fd5b8151612782816125ff565b9392505050565b60006020828403121561279b57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761058c5761058c6127a2565b634e487b7160e01b600052601260045260246000fd5b60008261280257634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612842578160001904821115612828576128286127a2565b8085161561283557918102915b93841c939080029061280c565b509250929050565b6000826128595750600161058c565b816128665750600061058c565b816001811461287c5760028114612886576128a2565b600191505061058c565b60ff841115612897576128976127a2565b50506001821b61058c565b5060208310610133831016604e8410600b84101617156128c5575081810a61058c565b6128cf8383612807565b80600019048211156128e3576128e36127a2565b029392505050565b6000612782838361284a565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561293357602081850181015186830182015201612917565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b038316815260606020820152600960608201526865786563757465282960b81b608082015260a060408201526000610a8e60a083018461290d565b600081518084526020808501945080840160005b838110156129cd5781516001600160a01b0316875295820195908201906001016129a8565b509495945050505050565b600081518084526020808501945080840160005b838110156129cd578151875295820195908201906001016129ec565b600081518084526020808501808196508360051b8101915082860160005b85811015612a50578284038952612a3e84835161290d565b98850198935090840190600101612a26565b5091979650505050505050565b60a081526000612a7060a0830188612994565b602083820381850152612a8382896129d8565b915083820360408501528187518084528284019150828160051b850101838a0160005b83811015612ad457601f19878403018552612ac283835161290d565b94860194925090850190600101612aa6565b50508681036060880152612ae8818a612a08565b9450505050508281036080840152612b00818561290d565b98975050505050505050565b6001600160a01b039384168152919092166020820152901515604082015260600190565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0383168152604060208201819052600090610a8e9083018461290d565b8082018082111561058c5761058c6127a2565b606081526000612b906060830186612994565b8281036020840152612ba28186612994565b90508281036040840152612bb681856129d8565b9695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015612a5057815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0808201519086015260c0908101519085015260e09093019290850190600101612bdd565b602080825282518282018190526000919060409081850190868401855b82811015612a5057815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0908101519085015260c09093019290850190600101612c6156fe657865637574655061796c6f616428616464726573732c737472696e672c627974657329a2646970667358221220e0332a1012e09119ad25868ee022c34594ac7c8a0de7d018a9bc8ad7c39ce25064736f6c63430008150033","abi":[{"inputs":[{"internalType":"uint256","name":"errorId_","type":"uint256"}],"name":"FluidLiquidityCalcsError","type":"error"},{"inputs":[],"name":"ADDRESS_THIS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BTC_USD_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CBBTC_WBTC_NEW_CENTER_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEX_FACTORY","outputs":[{"internalType":"contract IFluidDexFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ETH_USDC_DEX_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ETH_USDC_VAULT_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ETH_USD_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FLUID_RESERVE","outputs":[{"internalType":"contract IFluidReserveContract","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GOVERNOR","outputs":[{"internalType":"contract IGovernorBravo","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"IETHV2","outputs":[{"internalType":"contract ILite","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INST_ETH_DEX_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INST_ETH_VAULT_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INST_USD_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LIQUIDITY","outputs":[{"internalType":"contract IFluidLiquidityAdmin","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSAL_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG_2","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG_3","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG_4","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG_5","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STABLE_USD_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TEAM_MULTISIG","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TIMELOCK","outputs":[{"internalType":"contract ITimelock","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TREASURY","outputs":[{"internalType":"contract IDSAV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VAULT_FACTORY","outputs":[{"internalType":"contract IFluidVaultFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"execute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dexId_","type":"uint256"}],"name":"getDexAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"amountInUSD","type":"uint256"},{"internalType":"bool","name":"isSupply","type":"bool"}],"name":"getRawAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"vaultId_","type":"uint256"}],"name":"getVaultAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"description","type":"string"}],"name":"propose","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rsETH_USD_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"sUSDe_USD_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"sUSDs_USD_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"inst_eth_dex_id","type":"uint256"},{"internalType":"uint256","name":"inst_eth_vault_id","type":"uint256"},{"internalType":"uint256","name":"eth_usdc_dex_id","type":"uint256"},{"internalType":"uint256","name":"eth_usdc_vault_id","type":"uint256"},{"internalType":"uint256","name":"cbBTC_wBTC_new_center_price","type":"uint256"}],"name":"setState","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"verifyProposal","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[],"name":"weETH_USD_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"weETHs_USD_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wstETH_USD_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]}