{"metadata":"{\"defaultCompiler\":{\"version\":\"0.7.3\"},\"sources\":{\"contracts/payloads/IGP41/PayloadIGP41.sol\":{\"content\":\"pragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {BigMathMinified} from \\\"../libraries/bigMathMinified.sol\\\";\\nimport {LiquiditySlotsLink} from \\\"../libraries/liquiditySlotsLink.sol\\\";\\nimport {LiquidityCalcs} from \\\"../libraries/liquidityCalcs.sol\\\";\\n\\ninterface IGovernorBravo {\\n    function _acceptAdmin() external;\\n\\n    function _setVotingDelay(uint newVotingDelay) external;\\n\\n    function _setVotingPeriod(uint newVotingPeriod) external;\\n\\n    function _acceptAdminOnTimelock() external;\\n\\n    function _setImplementation(address implementation_) external;\\n\\n    function propose(\\n        address[] memory targets,\\n        uint[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) external returns (uint);\\n\\n    function admin() external view returns (address);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function timelock() external view returns (address);\\n\\n    function votingDelay() external view returns (uint256);\\n\\n    function votingPeriod() external view returns (uint256);\\n}\\n\\ninterface ITimelock {\\n    function acceptAdmin() external;\\n\\n    function setDelay(uint delay_) external;\\n\\n    function setPendingAdmin(address pendingAdmin_) external;\\n\\n    function queueTransaction(\\n        address target,\\n        uint value,\\n        string memory signature,\\n        bytes memory data,\\n        uint eta\\n    ) external returns (bytes32);\\n\\n    function executeTransaction(\\n        address target,\\n        uint value,\\n        string memory signature,\\n        bytes memory data,\\n        uint eta\\n    ) external payable returns (bytes memory);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function delay() external view returns (uint256);\\n}\\n\\ninterface AdminModuleStructs {\\n    struct AddressBool {\\n        address addr;\\n        bool value;\\n    }\\n\\n    struct AddressUint256 {\\n        address addr;\\n        uint256 value;\\n    }\\n\\n    struct RateDataV1Params {\\n        address token;\\n        uint256 kink;\\n        uint256 rateAtUtilizationZero;\\n        uint256 rateAtUtilizationKink;\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    struct RateDataV2Params {\\n        address token;\\n        uint256 kink1;\\n        uint256 kink2;\\n        uint256 rateAtUtilizationZero;\\n        uint256 rateAtUtilizationKink1;\\n        uint256 rateAtUtilizationKink2;\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    struct TokenConfig {\\n        address token;\\n        uint256 fee;\\n        uint256 threshold;\\n        uint256 maxUtilization;\\n    }\\n\\n    struct UserSupplyConfig {\\n        address user;\\n        address token;\\n        uint8 mode;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseWithdrawalLimit;\\n    }\\n\\n    struct UserBorrowConfig {\\n        address user;\\n        address token;\\n        uint8 mode;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseDebtCeiling;\\n        uint256 maxDebtCeiling;\\n    }\\n}\\n\\ninterface IFluidVaultT1 {\\n    /// @notice updates the Vault oracle to `newOracle_`. Must implement the FluidOracle interface.\\n    function updateOracle(address newOracle_) external;\\n\\n    /// @notice updates the all Vault core settings according to input params.\\n    /// All input values are expected in 1e2 (1% = 100, 100% = 10_000).\\n    function updateCoreSettings(\\n        uint256 supplyRateMagnifier_,\\n        uint256 borrowRateMagnifier_,\\n        uint256 collateralFactor_,\\n        uint256 liquidationThreshold_,\\n        uint256 liquidationMaxLimit_,\\n        uint256 withdrawGap_,\\n        uint256 liquidationPenalty_,\\n        uint256 borrowFee_\\n    ) external;\\n\\n    /// @notice updates the allowed rebalancer to `newRebalancer_`.\\n    function updateRebalancer(address newRebalancer_) external;\\n\\n    /// @notice updates the supply rate magnifier to `supplyRateMagnifier_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateSupplyRateMagnifier(uint supplyRateMagnifier_) external;\\n\\n    /// @notice updates the borrow rate magnifier to `borrowRateMagnifier_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateBorrowRateMagnifier(uint borrowRateMagnifier_) external;\\n\\n    /// @notice updates the collateral factor to `collateralFactor_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateCollateralFactor(uint collateralFactor_) external;\\n\\n    /// @notice updates the liquidation threshold to `liquidationThreshold_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateLiquidationThreshold(uint liquidationThreshold_) external;\\n\\n    /// @notice updates the liquidation max limit to `liquidationMaxLimit_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateLiquidationMaxLimit(uint liquidationMaxLimit_) external;\\n\\n    /// @notice updates the withdrawal gap to `withdrawGap_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateWithdrawGap(uint withdrawGap_) external;\\n\\n    /// @notice updates the liquidation penalty to `liquidationPenalty_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateLiquidationPenalty(uint liquidationPenalty_) external;\\n\\n    /// @notice updates the borrow fee to `borrowFee_`. Input in 1e2 (1% = 100, 100% = 10_000).\\n    function updateBorrowFee(uint borrowFee_) external;\\n\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n\\n    struct ConstantViews {\\n        address liquidity;\\n        address factory;\\n        address adminImplementation;\\n        address secondaryImplementation;\\n        address supplyToken;\\n        address borrowToken;\\n        uint8 supplyDecimals;\\n        uint8 borrowDecimals;\\n        uint vaultId;\\n        bytes32 liquiditySupplyExchangePriceSlot;\\n        bytes32 liquidityBorrowExchangePriceSlot;\\n        bytes32 liquidityUserSupplySlot;\\n        bytes32 liquidityUserBorrowSlot;\\n    }\\n\\n    /// @notice returns all Vault constants\\n    function constantsView() external view returns (ConstantViews memory constantsView_);\\n}\\n\\ninterface IProxy {\\n    function setAdmin(address newAdmin_) external;\\n\\n    function setDummyImplementation(address newDummyImplementation_) external;\\n\\n    function addImplementation(\\n        address implementation_,\\n        bytes4[] calldata sigs_\\n    ) external;\\n\\n    function removeImplementation(address implementation_) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function getDummyImplementation() external view returns (address);\\n\\n    function getImplementationSigs(\\n        address impl_\\n    ) external view returns (bytes4[] memory);\\n\\n    function getSigsImplementation(bytes4 sig_) external view returns (address);\\n\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n}\\n\\ninterface IFluidLiquidityAdmin {\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n\\n    /// @notice adds/removes auths. Auths generally could be contracts which can have restricted actions defined on contract.\\n    ///         auths can be helpful in reducing governance overhead where it's not needed.\\n    /// @param authsStatus_ array of structs setting allowed status for an address.\\n    ///                     status true => add auth, false => remove auth\\n    function updateAuths(\\n        AdminModuleStructs.AddressBool[] calldata authsStatus_\\n    ) external;\\n\\n    /// @notice adds/removes guardians. Only callable by Governance.\\n    /// @param guardiansStatus_ array of structs setting allowed status for an address.\\n    ///                         status true => add guardian, false => remove guardian\\n    function updateGuardians(\\n        AdminModuleStructs.AddressBool[] calldata guardiansStatus_\\n    ) external;\\n\\n    /// @notice changes the revenue collector address (contract that is sent revenue). Only callable by Governance.\\n    /// @param revenueCollector_  new revenue collector address\\n    function updateRevenueCollector(address revenueCollector_) external;\\n\\n    /// @notice changes current status, e.g. for pausing or unpausing all user operations. Only callable by Auths.\\n    /// @param newStatus_ new status\\n    ///        status = 2 -> pause, status = 1 -> resume.\\n    function changeStatus(uint256 newStatus_) external;\\n\\n    /// @notice                  update tokens rate data version 1. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV1Params with rate data to set for each token\\n    function updateRateDataV1s(\\n        AdminModuleStructs.RateDataV1Params[] calldata tokensRateData_\\n    ) external;\\n\\n    /// @notice                  update tokens rate data version 2. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV2Params with rate data to set for each token\\n    function updateRateDataV2s(\\n        AdminModuleStructs.RateDataV2Params[] calldata tokensRateData_\\n    ) external;\\n\\n    /// @notice updates token configs: fee charge on borrowers interest & storage update utilization threshold.\\n    ///         Only callable by Auths.\\n    /// @param tokenConfigs_ contains token address, fee & utilization threshold\\n    function updateTokenConfigs(\\n        AdminModuleStructs.TokenConfig[] calldata tokenConfigs_\\n    ) external;\\n\\n    /// @notice updates user classes: 0 is for new protocols, 1 is for established protocols.\\n    ///         Only callable by Auths.\\n    /// @param userClasses_ struct array of uint256 value to assign for each user address\\n    function updateUserClasses(\\n        AdminModuleStructs.AddressUint256[] calldata userClasses_\\n    ) external;\\n\\n    /// @notice sets user supply configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userSupplyConfigs_ struct array containing user supply config, see `UserSupplyConfig` struct for more info\\n    function updateUserSupplyConfigs(\\n        AdminModuleStructs.UserSupplyConfig[] memory userSupplyConfigs_\\n    ) external;\\n\\n    /// @notice setting user borrow configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userBorrowConfigs_ struct array containing user borrow config, see `UserBorrowConfig` struct for more info\\n    function updateUserBorrowConfigs(\\n        AdminModuleStructs.UserBorrowConfig[] memory userBorrowConfigs_\\n    ) external;\\n\\n    /// @notice pause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to pause operations for\\n    /// @param supplyTokens_  token addresses to pause withdrawals for\\n    /// @param borrowTokens_  token addresses to pause borrowings for\\n    function pauseUser(\\n        address user_,\\n        address[] calldata supplyTokens_,\\n        address[] calldata borrowTokens_\\n    ) external;\\n\\n    /// @notice unpause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to unpause operations for\\n    /// @param supplyTokens_  token addresses to unpause withdrawals for\\n    /// @param borrowTokens_  token addresses to unpause borrowings for\\n    function unpauseUser(\\n        address user_,\\n        address[] calldata supplyTokens_,\\n        address[] calldata borrowTokens_\\n    ) external;\\n\\n    /// @notice         collects revenue for tokens to configured revenueCollector address.\\n    /// @param tokens_  array of tokens to collect revenue for\\n    /// @dev            Note that this can revert if token balance is < revenueAmount (utilization > 100%)\\n    function collectRevenue(address[] calldata tokens_) external;\\n\\n    /// @notice gets the current updated exchange prices for n tokens and updates all prices, rates related data in storage.\\n    /// @param tokens_ tokens to update exchange prices for\\n    /// @return supplyExchangePrices_ new supply rates of overall system for each token\\n    /// @return borrowExchangePrices_ new borrow rates of overall system for each token\\n    function updateExchangePrices(\\n        address[] calldata tokens_\\n    )\\n        external\\n        returns (\\n            uint256[] memory supplyExchangePrices_,\\n            uint256[] memory borrowExchangePrices_\\n        );\\n}\\n\\ninterface IFluidDexFactory {\\n    /// @notice                       Computes the address of a dex based on its given ID (`dexId_`).\\n    /// @param dexId_                 The ID of the dex.\\n    /// @return dex_                  Returns the computed address of the dex.\\n    function getDexAddress(uint256 dexId_) external view returns (address dex_);\\n}\\n\\ninterface IFluidVaultT1Factory {\\n    function deployVault(\\n        address vaultDeploymentLogic_,\\n        bytes calldata vaultDeploymentData_\\n    ) external returns (address vault_);\\n\\n    function setVaultAuth(\\n        address vault_,\\n        address vaultAuth_,\\n        bool allowed_\\n    ) external;\\n\\n    function getVaultAddress(\\n        uint256 vaultId_\\n    ) external view returns (address vault_);\\n\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n}\\n\\ninterface IFluidReserveContract {\\n    function isRebalancer(address user) external returns (bool);\\n\\n    function rebalanceFToken(address protocol_) external;\\n\\n    function rebalanceVault(address protocol_) external;\\n\\n    function transferFunds(address token_) external;\\n\\n    function getProtocolTokens(address protocol_) external;\\n\\n    function updateAuth(address auth_, bool isAuth_) external;\\n\\n    function updateRebalancer(address rebalancer_, bool isRebalancer_) external;\\n\\n    function approve(\\n        address[] memory protocols_,\\n        address[] memory tokens_,\\n        uint256[] memory amounts_\\n    ) external;\\n\\n    function revoke(\\n        address[] memory protocols_,\\n        address[] memory tokens_\\n    ) external;\\n}\\n\\ninterface IFTokenAdmin {\\n    /// @notice updates the rewards rate model contract.\\n    ///         Only callable by LendingFactory auths.\\n    /// @param rewardsRateModel_  the new rewards rate model contract address.\\n    ///                           can be set to address(0) to set no rewards (to save gas)\\n    function updateRewards(address rewardsRateModel_) external;\\n\\n    /// @notice Balances out the difference between fToken supply at Liquidity vs totalAssets().\\n    ///         Deposits underlying from rebalancer address into Liquidity but doesn't mint any shares\\n    ///         -> thus making deposit available as rewards.\\n    ///         Only callable by rebalancer.\\n    /// @return assets_ amount deposited to Liquidity\\n    function rebalance() external payable returns (uint256 assets_);\\n\\n    /// @notice gets the liquidity exchange price of the underlying asset, calculates the updated exchange price (with reward rates)\\n    ///         and writes those values to storage.\\n    ///         Callable by anyone.\\n    /// @return tokenExchangePrice_ exchange price of fToken share to underlying asset\\n    /// @return liquidityExchangePrice_ exchange price at Liquidity for the underlying asset\\n    function updateRates()\\n        external\\n        returns (uint256 tokenExchangePrice_, uint256 liquidityExchangePrice_);\\n\\n    /// @notice sends any potentially stuck funds to Liquidity contract. Only callable by LendingFactory auths.\\n    function rescueFunds(address token_) external;\\n\\n    /// @notice Updates the rebalancer address (ReserveContract). Only callable by LendingFactory auths.\\n    function updateRebalancer(address rebalancer_) external;\\n}\\n\\ninterface IERC20 {\\n    function allowance(\\n        address spender,\\n        address caller\\n    ) external view returns (uint256);\\n\\n    function balanceOf(\\n        address account\\n    ) external view returns (uint256);\\n}\\n\\ninterface IDSAV2 {\\n    function cast(\\n        string[] memory _targetNames,\\n        bytes[] memory _datas,\\n        address _origin\\n    )\\n    external\\n    payable \\n    returns (bytes32);\\n\\n    function isAuth(address user) external view returns (bool);\\n}\\n\\ninterface IDSAConnectorsV2 {\\n    function toggleChief(address _chiefAddress) external;\\n}\\n\\ncontract PayloadIGP41 {\\n    uint256 public constant PROPOSAL_ID = 41;\\n\\n    address public constant PROPOSER =\\n        0xA45f7bD6A5Ff45D31aaCE6bCD3d426D9328cea01;\\n\\n    address public constant PROPOSER_AVO_MULTISIG =\\n        0x059a94a72451c0ae1Cc1cE4bf0Db52421Bbe8210;\\n\\n    address public constant PROPOSER_AVO_MULTISIG_2 =\\n        0x9efdE135CA4832AbF0408c44c6f5f370eB0f35e8;\\n\\n    address public constant PROPOSER_AVO_MULTISIG_3 =\\n        0x5C43AAC965ff230AC1cF63e924D0153291D78BaD;\\n\\n    IGovernorBravo public constant GOVERNOR =\\n        IGovernorBravo(0x0204Cd037B2ec03605CFdFe482D8e257C765fA1B);\\n    ITimelock public immutable TIMELOCK =\\n        ITimelock(0x2386DC45AdDed673317eF068992F19421B481F4c);\\n\\n    IFluidLiquidityAdmin public constant LIQUIDITY =\\n        IFluidLiquidityAdmin(0x52Aa899454998Be5b000Ad077a46Bbe360F4e497);\\n    IFluidVaultT1Factory public constant VAULT_T1_FACTORY =\\n        IFluidVaultT1Factory(0x324c5Dc1fC42c7a4D43d92df1eBA58a54d13Bf2d);\\n    IFluidReserveContract public constant FLUID_RESERVE =\\n        IFluidReserveContract(0x264786EF916af64a1DB19F513F24a3681734ce92);\\n    \\n    IDSAV2 public constant TREASURY = IDSAV2(0x28849D2b63fA8D361e5fc15cB8aBB13019884d09);\\n\\n    IFluidDexFactory public constant FLUID_DEX_FACTORY =\\n        IFluidDexFactory(0x93DD426446B5370F094a1e31f19991AAA6Ac0bE0);\\n\\n    address public immutable ADDRESS_THIS;\\n\\n    address public constant TEAM_MULTISIG =\\n        0x4F6F977aCDD1177DCD81aB83074855EcB9C2D49e;\\n\\n    address public constant ETH_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public constant wstETH_ADDRESS =\\n        0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\n    address public constant weETH_ADDRESS =\\n        0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee;\\n\\n    address public constant WETH_ADDRESS =\\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public constant stETH_ADDRESS =\\n        0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n\\n    address public constant wBTC_ADDRESS =\\n        0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    address public constant cbBTC_ADDRESS =\\n        0xcbB7C0000aB88B473b1f5aFd9ef808440eed33Bf;\\n\\n    address public constant USDC_ADDRESS =\\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address public constant USDT_ADDRESS =\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address public constant sUSDe_ADDRESS =\\n        0x9D39A5DE30e57443BfF2A8307A4256c8797A3497;\\n\\n    IDSAConnectorsV2 public constant DSA_CONNECTORS_V2 = IDSAConnectorsV2(0x97b0B3A8bDeFE8cB9563a3c610019Ad10DB8aD11);\\n        \\n\\n    uint256 internal constant X8 = 0xff;\\n    uint256 internal constant X10 = 0x3ff;\\n    uint256 internal constant X14 = 0x3fff;\\n    uint256 internal constant X15 = 0x7fff;\\n    uint256 internal constant X16 = 0xffff;\\n    uint256 internal constant X18 = 0x3ffff;\\n    uint256 internal constant X24 = 0xffffff;\\n    uint256 internal constant X64 = 0xffffffffffffffff;\\n\\n    uint256 internal constant DEFAULT_EXPONENT_SIZE = 8;\\n    uint256 internal constant DEFAULT_EXPONENT_MASK = 0xff;\\n\\n    address public constant F_USDT = 0x5C20B550819128074FD538Edf79791733ccEdd18;\\n    address public constant F_USDC = 0x9Fb7b4477576Fe5B32be4C1843aFB1e55F251B33;\\n\\n    constructor() {\\n        ADDRESS_THIS = address(this);\\n    }\\n\\n    function propose(string memory description) external {\\n        require(\\n            msg.sender == PROPOSER ||\\n                msg.sender == TEAM_MULTISIG ||\\n                address(this) == PROPOSER_AVO_MULTISIG ||\\n                address(this) == PROPOSER_AVO_MULTISIG_2 ||\\n                address(PROPOSER_AVO_MULTISIG_3) == PROPOSER_AVO_MULTISIG_3,\\n            \\\"msg.sender-not-allowed\\\"\\n        );\\n\\n        uint256 totalActions = 1;\\n        address[] memory targets = new address[](totalActions);\\n        uint256[] memory values = new uint256[](totalActions);\\n        string[] memory signatures = new string[](totalActions);\\n        bytes[] memory calldatas = new bytes[](totalActions);\\n\\n        // Action 1: call executePayload on timelock contract to execute payload related Fluid\\n        targets[0] = address(TIMELOCK);\\n        values[0] = 0;\\n        signatures[0] = \\\"executePayload(address,string,bytes)\\\";\\n        calldatas[0] = abi.encode(ADDRESS_THIS, \\\"execute()\\\", abi.encode());\\n\\n        uint256 proposedId = GOVERNOR.propose(\\n            targets,\\n            values,\\n            signatures,\\n            calldatas,\\n            description\\n        );\\n\\n        require(proposedId == PROPOSAL_ID, \\\"PROPOSAL_IS_NOT_SAME\\\");\\n    }\\n\\n    function execute() external {\\n        require(address(this) == address(TIMELOCK), \\\"not-valid-caller\\\");\\n\\n        /// @notice Action 1: Transfer x stETH to the team’s multisig\\n        action1();\\n\\n        /// @notice Action 2: Remove wstETH/ETH rate handler and Add Withdrawal auth handle at Liquidity\\n        action2();\\n\\n        /// @notice Action 3: Remove wBTC rewards auth\\n        action3();\\n\\n        /// @notice Action 4: Add new Lending Rewards for fUSDC and fUSDT\\n        action4();\\n\\n        /// @notice Action 5: Clone cbBTC vaults configs from wbBTC vaults\\n        action5();\\n\\n        /// @notice Action 6: Reduce borrow limits on old vaults from 1 to 10\\n        action6();\\n\\n        /// @notice Action 7: Add Team and Connector Multisig as chief on DSAv2 connector\\n        action7();\\n    }\\n\\n    function verifyProposal() external view {}\\n\\n    /***********************************|\\n    |     Proposal Payload Actions      |\\n    |__________________________________*/\\n\\n    /// @notice Action 1: Transfer stETH, wstETH, wBTC to the team’s multisig\\n    function action1() internal {\\n        {\\n            address[] memory tokens_ = new address[](4);\\n\\n            tokens_[0] = ETH_ADDRESS;\\n            tokens_[1] = wstETH_ADDRESS;\\n            tokens_[2] = USDC_ADDRESS;\\n            tokens_[3] = USDT_ADDRESS;\\n\\n            LIQUIDITY.collectRevenue((tokens_));\\n        }\\n\\n        \\n        {   \\n            string[] memory targets = new string[](4);\\n            bytes[] memory encodedSpells = new bytes[](4);\\n\\n            string memory withdrawSignature = \\\"withdraw(address,uint256,address,uint256,uint256)\\\";\\n\\n            { // Spell 1: Transfer stETH\\n                targets[0] = \\\"BASIC-A\\\";\\n                encodedSpells[0] = abi.encodeWithSignature(\\n                    withdrawSignature,\\n                    stETH_ADDRESS,\\n                    type(uint256).max,\\n                    TEAM_MULTISIG,\\n                    0,\\n                    0\\n                );\\n            }\\n\\n            { // Spell 2: Transfer wstETH\\n                targets[1] = \\\"BASIC-A\\\";\\n                encodedSpells[1] = abi.encodeWithSignature(\\n                    withdrawSignature,\\n                    wstETH_ADDRESS,\\n                    type(uint256).max,\\n                    TEAM_MULTISIG,\\n                    0,\\n                    0\\n                );\\n            }\\n\\n            { // Spell 3: Transfer wBTC\\n                targets[2] = \\\"BASIC-A\\\";\\n                encodedSpells[2] = abi.encodeWithSignature(\\n                    withdrawSignature,\\n                    wBTC_ADDRESS,\\n                    type(uint256).max,\\n                    TEAM_MULTISIG,\\n                    0,\\n                    0\\n                );\\n            }\\n\\n            { // Spell 4: Transfer wETH\\n                targets[3] = \\\"BASIC-A\\\";\\n                encodedSpells[3] = abi.encodeWithSignature(\\n                    withdrawSignature,\\n                    WETH_ADDRESS,\\n                    type(uint256).max,\\n                    TEAM_MULTISIG,\\n                    0,\\n                    0\\n                );\\n            }\\n\\n            IDSAV2(TREASURY).cast(targets, encodedSpells, address(this));\\n        }\\n    }\\n\\n    /// @notice Action 2: Remove wstETH/ETH rate handler and Add Withdrawal auth handle at Liquidity\\n    function action2() internal {\\n        AdminModuleStructs.AddressBool[]\\n            memory configs_ = new AdminModuleStructs.AddressBool[](2);\\n\\n        // Remove wstETH/ETH rate handler\\n        {\\n            configs_[0] = AdminModuleStructs.AddressBool({\\n                addr: 0xB5af15a931dA1B1a7B8DCF6E2Cd31C8a3Dd1E134,\\n                value: false\\n            });\\n        }\\n\\n        // Add Withdrawal auth handle\\n        {\\n            configs_[1] = AdminModuleStructs.AddressBool({\\n                addr: 0x82a2a351aaE9c35e7ca17d05367cbA533cAa21D7,\\n                value: true\\n            });\\n        }\\n\\n        LIQUIDITY.updateAuths(configs_);\\n    }\\n\\n    /// @notice Action 3: Remove wBTC rewards auth\\n    function action3() internal {\\n        VAULT_T1_FACTORY.setVaultAuth(\\n            getVaultAddress(21), // VAULT_WBTC_USDC\\n            0x4605FC1E6A49D92D97179407E823023F06D5aA0e, // Rewards_WBTC_USDC\\n            false\\n        );\\n\\n        VAULT_T1_FACTORY.setVaultAuth(\\n            getVaultAddress(22), // VAULT_WBTC_USDT\\n            0xbA379AfC2829CbF5DeA14B8bc135a820e144456D, // Rewards_WBTC_USDT\\n            false\\n        );\\n    }\\n\\n    /// @notice Action 4: Add new Lending Rewards for fUSDC and fUSDT\\n    function action4() internal {\\n        address[] memory protocols = new address[](2);\\n        address[] memory tokens = new address[](2);\\n        uint256[] memory amounts = new uint256[](2);\\n\\n        {\\n            /// fUSDC\\n            IFTokenAdmin(F_USDC).updateRewards(\\n                0x512Ac5b6Cf04f042486A198eDB3c28C6F2c6285A\\n            );\\n\\n            uint256 allowance = IERC20(USDC_ADDRESS).allowance(\\n                address(FLUID_RESERVE),\\n                F_USDC\\n            );\\n\\n            protocols[0] = F_USDC;\\n            tokens[0] = USDC_ADDRESS;\\n            amounts[0] = allowance + (250_000 * 1e6);\\n        }\\n\\n        {\\n            /// fUSDT\\n            IFTokenAdmin(F_USDT).updateRewards(\\n                0x512Ac5b6Cf04f042486A198eDB3c28C6F2c6285A\\n            );\\n\\n            uint256 allowance = IERC20(USDT_ADDRESS).allowance(\\n                address(FLUID_RESERVE),\\n                F_USDT\\n            );\\n\\n            protocols[1] = F_USDT;\\n            tokens[1] = USDT_ADDRESS;\\n            amounts[1] = allowance + (250_000 * 1e6);\\n        }\\n\\n        FLUID_RESERVE.approve(protocols, tokens, amounts);\\n    }\\n\\n\\n    /// @notice Action 5: Clone cbBTC vaults configs from wbBTC vaults\\n    function action5() internal {\\n        configVault(29, 21); // cbBTC/USDC <= wbBTC/USDC\\n        configVault(30, 22); // cbBTC/USDT <= wbBTC/USDT\\n        configVault(28, 23); // cbBTC/ETH <= wbBTC/ETH\\n        configVault(31, 24); // ETH/cbBTC <= ETH/wbBTC\\n        configVault(33, 25); // wstETH/cbBTC <= wstETH/wbBTC\\n        configVault(32, 26); // weETH/cbBTC <= weETH/wbBTC\\n    }\\n\\n    /// @notice Action 6: Reduce borrow limits on old vaults from 1 to 10\\n    function action6() internal {\\n        reduceVaultBorrowLimit(1);\\n        reduceVaultBorrowLimit(2);\\n        reduceVaultBorrowLimit(3);\\n        reduceVaultBorrowLimit(4);\\n        reduceVaultBorrowLimit(5);\\n        reduceVaultBorrowLimit(6);\\n        reduceVaultBorrowLimit(7);\\n        reduceVaultBorrowLimit(8);\\n        reduceVaultBorrowLimit(9);\\n        reduceVaultBorrowLimit(10);\\n    }\\n\\n    /// @notice Action 7: Add Team and Connector Multisig as chief on DSAv2 connector\\n    function action7() internal {\\n        DSA_CONNECTORS_V2.toggleChief(TEAM_MULTISIG); // Team Multisig\\n        DSA_CONNECTORS_V2.toggleChief(0xa6AEC494Aa19Dc910944E2374e9EA159dc919c59); // Connector Multisig\\n    }\\n\\n    /***********************************|\\n    |     Proposal Payload Helpers      |\\n    |__________________________________*/\\n\\n    function getVaultAddress(uint256 id) internal view returns(address) {\\n        return VAULT_T1_FACTORY.getVaultAddress(id);\\n    } \\n\\n    struct VaultConfig {\\n        uint256 supplyRateMagnifier;\\n        uint256 borrowRateMagnifier;\\n        uint256 collateralFactor;\\n        uint256 liquidationThreshold;\\n        uint256 liquidationMaxLimit;\\n        uint256 withdrawGap;\\n        uint256 liquidationPenalty;\\n        uint256 borrowFee;\\n    }\\n\\n    function configVault(\\n        uint256 vaultId,\\n        uint256 vaultIdToCloneFrom\\n    ) internal returns (address vault_) {\\n        // Deploy vault.\\n        vault_ = VAULT_T1_FACTORY.getVaultAddress(vaultId);\\n\\n        VaultConfig memory configs_ = getVaultConfig(VAULT_T1_FACTORY.getVaultAddress(vaultIdToCloneFrom));\\n\\n        // Update core settings on vault.\\n        {\\n            IFluidVaultT1(vault_).updateCoreSettings(\\n                configs_.supplyRateMagnifier,\\n                configs_.borrowRateMagnifier,\\n                configs_.collateralFactor,\\n                configs_.liquidationThreshold,\\n                configs_.liquidationMaxLimit,\\n                configs_.withdrawGap,\\n                configs_.liquidationPenalty,\\n                configs_.borrowFee\\n            );\\n        }\\n\\n        // Update withdraw base and max debt ceiling\\n        {\\n            address supplyToken_ = IFluidVaultT1(vault_).constantsView().supplyToken;\\n            address borrowToken_ = IFluidVaultT1(vault_).constantsView().borrowToken;\\n\\n            {\\n\\n                uint256 userSupplyData_ = LIQUIDITY.readFromStorage(\\n                LiquiditySlotsLink.calculateDoubleMappingStorageSlot(\\n                    LiquiditySlotsLink.LIQUIDITY_USER_SUPPLY_DOUBLE_MAPPING_SLOT,\\n                        vault_,\\n                        supplyToken_\\n                    )\\n                );\\n\\n                AdminModuleStructs.UserSupplyConfig[] memory config_ = new AdminModuleStructs.UserSupplyConfig[](1);\\n                config_[0] = AdminModuleStructs.UserSupplyConfig({\\n                    user: vault_,\\n                    token: supplyToken_,\\n                    mode: uint8(userSupplyData_ & 1),\\n                    expandPercent: (userSupplyData_ >>\\n                        LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_PERCENT) & X14,\\n                    expandDuration: (userSupplyData_ >>\\n                        LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_DURATION) & X24,\\n                    baseWithdrawalLimit: getRawAmount(supplyToken_, 0, 7_500_000, true) // $7,500,000\\n                });\\n\\n                LIQUIDITY.updateUserSupplyConfigs(config_);\\n            }\\n\\n            {\\n                uint256 userBorrowData_ = LIQUIDITY.readFromStorage(\\n                    LiquiditySlotsLink.calculateDoubleMappingStorageSlot(\\n                        LiquiditySlotsLink.LIQUIDITY_USER_BORROW_DOUBLE_MAPPING_SLOT,\\n                        vault_,\\n                        borrowToken_\\n                    )\\n                );\\n\\n                AdminModuleStructs.UserBorrowConfig[] memory config_ = new AdminModuleStructs.UserBorrowConfig[](1);\\n                config_[0] = AdminModuleStructs.UserBorrowConfig({\\n                    user: vault_,\\n                    token: borrowToken_,\\n                    mode: uint8(userBorrowData_ & 1),\\n                    expandPercent: (userBorrowData_ >>\\n                        LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_PERCENT) & X14,\\n                    expandDuration: (userBorrowData_ >>\\n                        LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_DURATION) & X24,\\n                    baseDebtCeiling: BigMathMinified.fromBigNumber(\\n                        (userBorrowData_ >>\\n                            LiquiditySlotsLink.BITS_USER_BORROW_BASE_BORROW_LIMIT) &\\n                            X18,\\n                        DEFAULT_EXPONENT_SIZE,\\n                        DEFAULT_EXPONENT_MASK\\n                    ),\\n                    maxDebtCeiling: getRawAmount(borrowToken_, 0, 200_000_000, false) // $200,000,000\\n                });\\n\\n                LIQUIDITY.updateUserBorrowConfigs(config_);\\n            }\\n        }\\n    }\\n\\n    function getVaultConfig(\\n        address vault_\\n    ) internal view returns (VaultConfig memory configs_) {\\n        uint vaultVariables2_ = IFluidVaultT1(vault_).readFromStorage(bytes32(uint256(1)));\\n        configs_.supplyRateMagnifier = uint16(vaultVariables2_ & X16);\\n        configs_.borrowRateMagnifier = uint16((vaultVariables2_ >> 16) & X16);\\n        configs_.collateralFactor = (uint16((vaultVariables2_ >> 32) & X10)) * 10;\\n        configs_.liquidationThreshold = (uint16((vaultVariables2_ >> 42) & X10)) * 10;\\n        configs_.liquidationMaxLimit = (uint16((vaultVariables2_ >> 52) & X10) * 10);\\n        configs_.withdrawGap = uint16((vaultVariables2_ >> 62) & X10) * 10;\\n        configs_.liquidationPenalty = uint16((vaultVariables2_ >> 72) & X10);\\n        configs_.borrowFee = uint16((vaultVariables2_ >> 82) & X10);\\n    }\\n\\n    function reduceVaultBorrowLimit(uint256 vaultId) internal {   \\n        address vault_ =  VAULT_T1_FACTORY.getVaultAddress(vaultId);\\n        address token_ = IFluidVaultT1(vault_).constantsView().borrowToken;\\n\\n        uint256 userBorrowData_ = LIQUIDITY.readFromStorage(\\n            LiquiditySlotsLink.calculateDoubleMappingStorageSlot(\\n                LiquiditySlotsLink.LIQUIDITY_USER_BORROW_DOUBLE_MAPPING_SLOT,\\n                vault_,\\n                token_\\n            )\\n        );\\n\\n        uint256 totalBorrowAmount_ = BigMathMinified.fromBigNumber(\\n            (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_AMOUNT) & X64,\\n            DEFAULT_EXPONENT_SIZE,\\n            DEFAULT_EXPONENT_MASK\\n        );\\n\\n        uint256 baseDebtCeiling_ = getRawAmount(token_, 0, 1000, false); // $1000\\n\\n        AdminModuleStructs.UserBorrowConfig[] memory config_ = new AdminModuleStructs.UserBorrowConfig[](1);\\n        config_[0] = AdminModuleStructs.UserBorrowConfig({\\n            user: vault_,\\n            token: token_,\\n            mode: uint8(userBorrowData_ & 1),\\n            expandPercent: (userBorrowData_ >>\\n                LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_PERCENT) & X14,\\n            expandDuration: (userBorrowData_ >>\\n                LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_DURATION) & X24,\\n            baseDebtCeiling: totalBorrowAmount_ < baseDebtCeiling_ ? (totalBorrowAmount_ * 1001 / 1000) : baseDebtCeiling_,\\n            maxDebtCeiling: totalBorrowAmount_  * 105 / 100 // 5% increase\\n        });\\n\\n        LIQUIDITY.updateUserBorrowConfigs(config_);\\n    }\\n\\n    function getRawAmount(\\n        address token,\\n        uint256 amount,\\n        uint256 amountInUSD,\\n        bool isSupply\\n    ) public view returns (uint256) {\\n        if (amount > 0 && amountInUSD > 0)\\n            revert(\\\"both usd and amount are not zero\\\");\\n        uint256 exchangePriceAndConfig_ = LIQUIDITY.readFromStorage(\\n            LiquiditySlotsLink.calculateMappingStorageSlot(\\n                LiquiditySlotsLink.LIQUIDITY_EXCHANGE_PRICES_MAPPING_SLOT,\\n                token\\n            )\\n        );\\n\\n        (\\n            uint256 supplyExchangePrice,\\n            uint256 borrowExchangePrice\\n        ) = LiquidityCalcs.calcExchangePrices(exchangePriceAndConfig_);\\n\\n        uint256 usdPrice = 0;\\n        uint256 decimals = 18;\\n        if (token == ETH_ADDRESS) {\\n            usdPrice = 2_350;\\n            decimals = 18;\\n        } else if (token == wstETH_ADDRESS) {\\n            usdPrice = 2_750;\\n            decimals = 18;\\n        } else if (token == weETH_ADDRESS) {\\n            usdPrice = 2_450;\\n            decimals = 18;\\n        } else if (token == cbBTC_ADDRESS || token == wBTC_ADDRESS) {\\n            usdPrice = 60_500;\\n            decimals = 8;\\n        } else if (token == USDC_ADDRESS || token == USDT_ADDRESS) {\\n            usdPrice = 1;\\n            decimals = 6;\\n        } else if (token == sUSDe_ADDRESS) {\\n            usdPrice = 1; // Since can't use decimals, assuming 1 dollar for sUSDe. \\n            decimals = 18;\\n        } else {\\n            revert(\\\"not-found\\\");\\n        }\\n\\n        uint256 exchangePrice = isSupply\\n            ? supplyExchangePrice\\n            : borrowExchangePrice;\\n\\n        if (amount > 0) {\\n            return (amount * 1e12) / exchangePrice;\\n        } else {\\n            return\\n                (amountInUSD * 1e12 * (10 ** decimals)) /\\n                (usdPrice * exchangePrice);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.0\"},\"contracts/payloads/libraries/bigMathMinified.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @title library that represents a number in BigNumber(coefficient and exponent) format to store in smaller bits.\\n/// @notice the number is divided into two parts: a coefficient and an exponent. This comes at a cost of losing some precision\\n/// at the end of the number because the exponent simply fills it with zeroes. This precision is oftentimes negligible and can\\n/// result in significant gas cost reduction due to storage space reduction.\\n/// Also note, a valid big number is as follows: if the exponent is > 0, then coefficient last bits should be occupied to have max precision.\\n/// @dev roundUp is more like a increase 1, which happens everytime for the same number.\\n/// roundDown simply sets trailing digits after coefficientSize to zero (floor), only once for the same number.\\nlibrary BigMathMinified {\\n    /// @dev constants to use for `roundUp` input param to increase readability\\n    bool internal constant ROUND_DOWN = false;\\n    bool internal constant ROUND_UP = true;\\n\\n    /// @dev converts `normal` number to BigNumber with `exponent` and `coefficient` (or precision).\\n    /// e.g.:\\n    /// 5035703444687813576399599 (normal) = (coefficient[32bits], exponent[8bits])[40bits]\\n    /// 5035703444687813576399599 (decimal) => 10000101010010110100000011111011110010100110100000000011100101001101001101011101111 (binary)\\n    ///                                     => 10000101010010110100000011111011000000000000000000000000000000000000000000000000000\\n    ///                                                                        ^-------------------- 51(exponent) -------------- ^\\n    /// coefficient = 1000,0101,0100,1011,0100,0000,1111,1011               (2236301563)\\n    /// exponent =                                            0011,0011     (51)\\n    /// bigNumber =   1000,0101,0100,1011,0100,0000,1111,1011,0011,0011     (572493200179)\\n    ///\\n    /// @param normal number which needs to be converted into Big Number\\n    /// @param coefficientSize at max how many bits of precision there should be (64 = uint64 (64 bits precision))\\n    /// @param exponentSize at max how many bits of exponent there should be (8 = uint8 (8 bits exponent))\\n    /// @param roundUp signals if result should be rounded down or up\\n    /// @return bigNumber converted bigNumber (coefficient << exponent)\\n    function toBigNumber(\\n        uint256 normal,\\n        uint256 coefficientSize,\\n        uint256 exponentSize,\\n        bool roundUp\\n    ) internal pure returns (uint256 bigNumber) {\\n        assembly {\\n            let lastBit_\\n            let number_ := normal\\n            if gt(number_, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x80, number_)\\n                lastBit_ := 0x80\\n            }\\n            if gt(number_, 0xFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x40, number_)\\n                lastBit_ := add(lastBit_, 0x40)\\n            }\\n            if gt(number_, 0xFFFFFFFF) {\\n                number_ := shr(0x20, number_)\\n                lastBit_ := add(lastBit_, 0x20)\\n            }\\n            if gt(number_, 0xFFFF) {\\n                number_ := shr(0x10, number_)\\n                lastBit_ := add(lastBit_, 0x10)\\n            }\\n            if gt(number_, 0xFF) {\\n                number_ := shr(0x8, number_)\\n                lastBit_ := add(lastBit_, 0x8)\\n            }\\n            if gt(number_, 0xF) {\\n                number_ := shr(0x4, number_)\\n                lastBit_ := add(lastBit_, 0x4)\\n            }\\n            if gt(number_, 0x3) {\\n                number_ := shr(0x2, number_)\\n                lastBit_ := add(lastBit_, 0x2)\\n            }\\n            if gt(number_, 0x1) {\\n                lastBit_ := add(lastBit_, 1)\\n            }\\n            if gt(number_, 0) {\\n                lastBit_ := add(lastBit_, 1)\\n            }\\n            if lt(lastBit_, coefficientSize) {\\n                // for throw exception\\n                lastBit_ := coefficientSize\\n            }\\n            let exponent := sub(lastBit_, coefficientSize)\\n            let coefficient := shr(exponent, normal)\\n            if and(roundUp, gt(exponent, 0)) {\\n                // rounding up is only needed if exponent is > 0, as otherwise the coefficient fully holds the original number\\n                coefficient := add(coefficient, 1)\\n                if eq(shl(coefficientSize, 1), coefficient) {\\n                    // case were coefficient was e.g. 111, with adding 1 it became 1000 (in binary) and coefficientSize 3 bits\\n                    // final coefficient would exceed it's size. -> reduce coefficent to 100 and increase exponent by 1.\\n                    coefficient := shl(sub(coefficientSize, 1), 1)\\n                    exponent := add(exponent, 1)\\n                }\\n            }\\n            if iszero(lt(exponent, shl(exponentSize, 1))) {\\n                // if exponent is >= exponentSize, the normal number is too big to fit within\\n                // BigNumber with too small sizes for coefficient and exponent\\n                revert(0, 0)\\n            }\\n            bigNumber := shl(exponentSize, coefficient)\\n            bigNumber := add(bigNumber, exponent)\\n        }\\n    }\\n\\n    /// @dev get `normal` number from `bigNumber`, `exponentSize` and `exponentMask`\\n    function fromBigNumber(\\n        uint256 bigNumber,\\n        uint256 exponentSize,\\n        uint256 exponentMask\\n    ) internal pure returns (uint256 normal) {\\n        assembly {\\n            let coefficient := shr(exponentSize, bigNumber)\\n            let exponent := and(bigNumber, exponentMask)\\n            normal := shl(exponent, coefficient)\\n        }\\n    }\\n\\n    /// @dev gets the most significant bit `lastBit` of a `normal` number (length of given number of binary format).\\n    /// e.g.\\n    /// 5035703444687813576399599 = 10000101010010110100000011111011110010100110100000000011100101001101001101011101111\\n    /// lastBit =                   ^---------------------------------   83   ----------------------------------------^\\n    function mostSignificantBit(uint256 normal) internal pure returns (uint lastBit) {\\n        assembly {\\n            let number_ := normal\\n            if gt(normal, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x80, number_)\\n                lastBit := 0x80\\n            }\\n            if gt(number_, 0xFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x40, number_)\\n                lastBit := add(lastBit, 0x40)\\n            }\\n            if gt(number_, 0xFFFFFFFF) {\\n                number_ := shr(0x20, number_)\\n                lastBit := add(lastBit, 0x20)\\n            }\\n            if gt(number_, 0xFFFF) {\\n                number_ := shr(0x10, number_)\\n                lastBit := add(lastBit, 0x10)\\n            }\\n            if gt(number_, 0xFF) {\\n                number_ := shr(0x8, number_)\\n                lastBit := add(lastBit, 0x8)\\n            }\\n            if gt(number_, 0xF) {\\n                number_ := shr(0x4, number_)\\n                lastBit := add(lastBit, 0x4)\\n            }\\n            if gt(number_, 0x3) {\\n                number_ := shr(0x2, number_)\\n                lastBit := add(lastBit, 0x2)\\n            }\\n            if gt(number_, 0x1) {\\n                lastBit := add(lastBit, 1)\\n            }\\n            if gt(number_, 0) {\\n                lastBit := add(lastBit, 1)\\n            }\\n        }\\n    }\\n}\",\"versionPragma\":\"0.8.21\"},\"contracts/payloads/libraries/liquiditySlotsLink.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @notice library that helps in reading / working with storage slot data of Fluid Liquidity.\\n/// @dev as all data for Fluid Liquidity is internal, any data must be fetched directly through manual\\n/// slot reading through this library or, if gas usage is less important, through the FluidLiquidityResolver.\\nlibrary LiquiditySlotsLink {\\n    /// @dev storage slot for status at Liquidity\\n    uint256 internal constant LIQUIDITY_STATUS_SLOT = 1;\\n    /// @dev storage slot for auths mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_AUTHS_MAPPING_SLOT = 2;\\n    /// @dev storage slot for guardians mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_GUARDIANS_MAPPING_SLOT = 3;\\n    /// @dev storage slot for user class mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_CLASS_MAPPING_SLOT = 4;\\n    /// @dev storage slot for exchangePricesAndConfig mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_EXCHANGE_PRICES_MAPPING_SLOT = 5;\\n    /// @dev storage slot for rateData mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_RATE_DATA_MAPPING_SLOT = 6;\\n    /// @dev storage slot for totalAmounts mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_TOTAL_AMOUNTS_MAPPING_SLOT = 7;\\n    /// @dev storage slot for user supply double mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_SUPPLY_DOUBLE_MAPPING_SLOT = 8;\\n    /// @dev storage slot for user borrow double mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_BORROW_DOUBLE_MAPPING_SLOT = 9;\\n    /// @dev storage slot for listed tokens array at Liquidity\\n    uint256 internal constant LIQUIDITY_LISTED_TOKENS_ARRAY_SLOT = 10;\\n\\n    // --------------------------------\\n    // @dev stacked uint256 storage slots bits position data for each:\\n\\n    // ExchangePricesAndConfig\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_RATE = 0;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_FEE = 16;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_UTILIZATION = 30;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_UPDATE_THRESHOLD = 44;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_LAST_TIMESTAMP = 58;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_SUPPLY_EXCHANGE_PRICE = 91;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_EXCHANGE_PRICE = 155;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_SUPPLY_RATIO = 219;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_RATIO = 234;\\n\\n    // RateData:\\n    uint256 internal constant BITS_RATE_DATA_VERSION = 0;\\n    // RateData: V1\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_ZERO = 4;\\n    uint256 internal constant BITS_RATE_DATA_V1_UTILIZATION_AT_KINK = 20;\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_KINK = 36;\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_MAX = 52;\\n    // RateData: V2\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_ZERO = 4;\\n    uint256 internal constant BITS_RATE_DATA_V2_UTILIZATION_AT_KINK1 = 20;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK1 = 36;\\n    uint256 internal constant BITS_RATE_DATA_V2_UTILIZATION_AT_KINK2 = 52;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK2 = 68;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_MAX = 84;\\n\\n    // TotalAmounts\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_SUPPLY_WITH_INTEREST = 0;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_SUPPLY_INTEREST_FREE = 64;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_BORROW_WITH_INTEREST = 128;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_BORROW_INTEREST_FREE = 192;\\n\\n    // UserSupplyData\\n    uint256 internal constant BITS_USER_SUPPLY_MODE = 0;\\n    uint256 internal constant BITS_USER_SUPPLY_AMOUNT = 1;\\n    uint256 internal constant BITS_USER_SUPPLY_PREVIOUS_WITHDRAWAL_LIMIT = 65;\\n    uint256 internal constant BITS_USER_SUPPLY_LAST_UPDATE_TIMESTAMP = 129;\\n    uint256 internal constant BITS_USER_SUPPLY_EXPAND_PERCENT = 162;\\n    uint256 internal constant BITS_USER_SUPPLY_EXPAND_DURATION = 176;\\n    uint256 internal constant BITS_USER_SUPPLY_BASE_WITHDRAWAL_LIMIT = 200;\\n    uint256 internal constant BITS_USER_SUPPLY_IS_PAUSED = 255;\\n\\n    // UserBorrowData\\n    uint256 internal constant BITS_USER_BORROW_MODE = 0;\\n    uint256 internal constant BITS_USER_BORROW_AMOUNT = 1;\\n    uint256 internal constant BITS_USER_BORROW_PREVIOUS_BORROW_LIMIT = 65;\\n    uint256 internal constant BITS_USER_BORROW_LAST_UPDATE_TIMESTAMP = 129;\\n    uint256 internal constant BITS_USER_BORROW_EXPAND_PERCENT = 162;\\n    uint256 internal constant BITS_USER_BORROW_EXPAND_DURATION = 176;\\n    uint256 internal constant BITS_USER_BORROW_BASE_BORROW_LIMIT = 200;\\n    uint256 internal constant BITS_USER_BORROW_MAX_BORROW_LIMIT = 218;\\n    uint256 internal constant BITS_USER_BORROW_IS_PAUSED = 255;\\n\\n    // --------------------------------\\n\\n    /// @notice Calculating the slot ID for Liquidity contract for single mapping at `slot_` for `key_`\\n    function calculateMappingStorageSlot(uint256 slot_, address key_) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(key_, slot_));\\n    }\\n\\n    /// @notice Calculating the slot ID for Liquidity contract for double mapping at `slot_` for `key1_` and `key2_`\\n    function calculateDoubleMappingStorageSlot(\\n        uint256 slot_,\\n        address key1_,\\n        address key2_\\n    ) internal pure returns (bytes32) {\\n        bytes32 intermediateSlot_ = keccak256(abi.encode(key1_, slot_));\\n        return keccak256(abi.encode(key2_, intermediateSlot_));\\n    }\\n}\\n\",\"versionPragma\":\"0.8.21\"},\"contracts/payloads/libraries/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary LibsErrorTypes {\\n    /***********************************|\\n    |         LiquidityCalcs            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when supply or borrow exchange price is zero at calc token data (token not configured yet)\\n    uint256 internal constant LiquidityCalcs__ExchangePriceZero = 70001;\\n\\n    /// @notice thrown when rate data is set to a version that is not implemented\\n    uint256 internal constant LiquidityCalcs__UnsupportedRateVersion = 70002;\\n\\n    /// @notice thrown when the calculated borrow rate turns negative. This should never happen.\\n    uint256 internal constant LiquidityCalcs__BorrowRateNegative = 70003;\\n\\n    /***********************************|\\n    |           SafeTransfer            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe transfer from for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFromFailed = 71001;\\n\\n    /// @notice thrown when safe transfer for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFailed = 71002;\\n}\",\"versionPragma\":\"0.8.21\"},\"contracts/payloads/libraries/liquidityCalcs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { LibsErrorTypes as ErrorTypes } from \\\"./errorTypes.sol\\\";\\nimport { LiquiditySlotsLink } from \\\"./liquiditySlotsLink.sol\\\";\\nimport { BigMathMinified } from \\\"./bigMathMinified.sol\\\";\\n\\n/// @notice implements calculation methods used for Fluid liquidity such as updated exchange prices,\\n/// borrow rate, withdrawal / borrow limits, revenue amount.\\nlibrary LiquidityCalcs {\\n    error FluidLiquidityCalcsError(uint256 errorId_);\\n\\n    /// @notice emitted if the calculated borrow rate surpassed max borrow rate (16 bits) and was capped at maximum value 65535\\n    event BorrowRateMaxCap();\\n\\n    /// @dev constants as from Liquidity variables.sol\\n    uint256 internal constant EXCHANGE_PRICES_PRECISION = 1e12;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n    // constants used for BigMath conversion from and to storage\\n    uint256 internal constant DEFAULT_EXPONENT_SIZE = 8;\\n    uint256 internal constant DEFAULT_EXPONENT_MASK = 0xFF;\\n\\n    uint256 internal constant FOUR_DECIMALS = 1e4;\\n    uint256 internal constant TWELVE_DECIMALS = 1e12;\\n    uint256 internal constant X14 = 0x3fff;\\n    uint256 internal constant X15 = 0x7fff;\\n    uint256 internal constant X16 = 0xffff;\\n    uint256 internal constant X18 = 0x3ffff;\\n    uint256 internal constant X24 = 0xffffff;\\n    uint256 internal constant X33 = 0x1ffffffff;\\n    uint256 internal constant X64 = 0xffffffffffffffff;\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                  CALC EXCHANGE PRICES                  /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev calculates interest (exchange prices) for a token given its' exchangePricesAndConfig from storage.\\n    /// @param exchangePricesAndConfig_ exchange prices and config packed uint256 read from storage\\n    /// @return supplyExchangePrice_ updated supplyExchangePrice\\n    /// @return borrowExchangePrice_ updated borrowExchangePrice\\n    function calcExchangePrices(\\n        uint256 exchangePricesAndConfig_\\n    ) internal view returns (uint256 supplyExchangePrice_, uint256 borrowExchangePrice_) {\\n        // Extracting exchange prices\\n        supplyExchangePrice_ =\\n            (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_SUPPLY_EXCHANGE_PRICE) &\\n            X64;\\n        borrowExchangePrice_ =\\n            (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_BORROW_EXCHANGE_PRICE) &\\n            X64;\\n\\n        if (supplyExchangePrice_ == 0 || borrowExchangePrice_ == 0) {\\n            revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__ExchangePriceZero);\\n        }\\n\\n        uint256 temp_ = exchangePricesAndConfig_ & X16; // temp_ = borrowRate\\n\\n        unchecked {\\n            // last timestamp can not be > current timestamp\\n            uint256 secondsSinceLastUpdate_ = block.timestamp -\\n                ((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_LAST_TIMESTAMP) & X33);\\n\\n            uint256 borrowRatio_ = (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_BORROW_RATIO) &\\n                X15;\\n            if (secondsSinceLastUpdate_ == 0 || temp_ == 0 || borrowRatio_ == 1) {\\n                // if no time passed, borrow rate is 0, or no raw borrowings: no exchange price update needed\\n                // (if borrowRatio_ == 1 means there is only borrowInterestFree, as first bit is 1 and rest is 0)\\n                return (supplyExchangePrice_, borrowExchangePrice_);\\n            }\\n\\n            // calculate new borrow exchange price.\\n            // formula borrowExchangePriceIncrease: previous price * borrow rate * secondsSinceLastUpdate_.\\n            // nominator is max uint112 (uint64 * uint16 * uint32). Divisor can not be 0.\\n            borrowExchangePrice_ +=\\n                (borrowExchangePrice_ * temp_ * secondsSinceLastUpdate_) /\\n                (SECONDS_PER_YEAR * FOUR_DECIMALS);\\n\\n            // FOR SUPPLY EXCHANGE PRICE:\\n            // all yield paid by borrowers (in mode with interest) goes to suppliers in mode with interest.\\n            // formula: previous price * supply rate * secondsSinceLastUpdate_.\\n            // where supply rate = (borrow rate  - revenueFee%) * ratioSupplyYield. And\\n            // ratioSupplyYield = utilization * supplyRatio * borrowRatio\\n            //\\n            // Example:\\n            // supplyRawInterest is 80, supplyInterestFree is 20. totalSupply is 100. BorrowedRawInterest is 50.\\n            // BorrowInterestFree is 10. TotalBorrow is 60. borrow rate 40%, revenueFee 10%.\\n            // yield is 10 (so half a year must have passed).\\n            // supplyRawInterest must become worth 89. totalSupply must become 109. BorrowedRawInterest must become 60.\\n            // borrowInterestFree must still be 10. supplyInterestFree still 20. totalBorrow 70.\\n            // supplyExchangePrice would have to go from 1 to 1,125 (+ 0.125). borrowExchangePrice from 1 to 1,2 (+0.2).\\n            // utilization is 60%. supplyRatio = 20 / 80 = 25% (only 80% of lenders receiving yield).\\n            // borrowRatio = 10 / 50 = 20% (only 83,333% of borrowers paying yield):\\n            // x of borrowers paying yield = 100% - (20 / (100 + 20)) = 100% - 16.6666666% = 83,333%.\\n            // ratioSupplyYield = 60% * 83,33333% * (100% + 20%) = 62,5%\\n            // supplyRate = (40% * (100% - 10%)) * = 36% * 62,5% = 22.5%\\n            // increase in supplyExchangePrice, assuming 100 as previous price.\\n            // 100 * 22,5% * 1/2 (half a year) = 0,1125.\\n            // cross-check supplyRawInterest worth = 80 * 1.1125 = 89. totalSupply worth = 89 + 20.\\n\\n            // -------------- 1. calculate ratioSupplyYield --------------------------------\\n            // step1: utilization * supplyRatio (or actually part of lenders receiving yield)\\n\\n            // temp_ => supplyRatio (in 1e2: 100% = 10_000; 1% = 100 -> max value 16_383)\\n            // if first bit 0 then ratio is supplyInterestFree / supplyWithInterest (supplyWithInterest is bigger)\\n            // else ratio is supplyWithInterest / supplyInterestFree (supplyInterestFree is bigger)\\n            temp_ = (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_SUPPLY_RATIO) & X15;\\n\\n            if (temp_ == 1) {\\n                // if no raw supply: no exchange price update needed\\n                // (if supplyRatio_ == 1 means there is only supplyInterestFree, as first bit is 1 and rest is 0)\\n                return (supplyExchangePrice_, borrowExchangePrice_);\\n            }\\n\\n            // ratioSupplyYield precision is 1e27 as 100% for increased precision when supplyInterestFree > supplyWithInterest\\n            if (temp_ & 1 == 1) {\\n                // ratio is supplyWithInterest / supplyInterestFree (supplyInterestFree is bigger)\\n                temp_ = temp_ >> 1;\\n\\n                // Note: case where temp_ == 0 (only supplyInterestFree, no yield) already covered by early return\\n                // in the if statement a little above.\\n\\n                // based on above example but supplyRawInterest is 20, supplyInterestFree is 80. no fee.\\n                // supplyRawInterest must become worth 30. totalSupply must become 110.\\n                // supplyExchangePrice would have to go from 1 to 1,5. borrowExchangePrice from 1 to 1,2.\\n                // so ratioSupplyYield must come out as 2.5 (250%).\\n                // supplyRatio would be (20 * 10_000 / 80) = 2500. but must be inverted.\\n                temp_ = (1e27 * FOUR_DECIMALS) / temp_; // e.g. 1e31 / 2500 = 4e27. (* 1e27 for precision)\\n                // e.g. 5_000 * (1e27 + 4e27) / 1e27 = 25_000 (=250%).\\n                temp_ =\\n                    // utilization * (100% + 100% / supplyRatio)\\n                    (((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_UTILIZATION) & X14) *\\n                        (1e27 + temp_)) / // extract utilization (max 16_383 so there is no way this can overflow).\\n                    (FOUR_DECIMALS);\\n                // max possible value of temp_ here is 16383 * (1e27 + 1e31) / 1e4 = ~1.64e31\\n            } else {\\n                // ratio is supplyInterestFree / supplyWithInterest (supplyWithInterest is bigger)\\n                temp_ = temp_ >> 1;\\n                // if temp_ == 0 then only supplyWithInterest => full yield. temp_ is already 0\\n\\n                // e.g. 5_000 * 10_000 + (20 * 10_000 / 80) / 10_000 = 5000 * 12500 / 10000 = 6250 (=62.5%).\\n                temp_ =\\n                    // 1e27 * utilization * (100% + supplyRatio) / 100%\\n                    (1e27 *\\n                        ((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_UTILIZATION) & X14) * // extract utilization (max 16_383 so there is no way this can overflow).\\n                        (FOUR_DECIMALS + temp_)) /\\n                    (FOUR_DECIMALS * FOUR_DECIMALS);\\n                // max possible temp_ value: 1e27 * 16383 * 2e4 / 1e8 = 3.2766e27\\n            }\\n            // from here temp_ => ratioSupplyYield (utilization * supplyRatio part) scaled by 1e27. max possible value ~1.64e31\\n\\n            // step2 of ratioSupplyYield: add borrowRatio (only x% of borrowers paying yield)\\n            if (borrowRatio_ & 1 == 1) {\\n                // ratio is borrowWithInterest / borrowInterestFree (borrowInterestFree is bigger)\\n                borrowRatio_ = borrowRatio_ >> 1;\\n                // borrowRatio_ => x of total bororwers paying yield. scale to 1e27.\\n\\n                // Note: case where borrowRatio_ == 0 (only borrowInterestFree, no yield) already covered\\n                // at the beginning of the method by early return if `borrowRatio_ == 1`.\\n\\n                // based on above example but borrowRawInterest is 10, borrowInterestFree is 50. no fee. borrowRatio = 20%.\\n                // so only 16.66% of borrowers are paying yield. so the 100% - part of the formula is not needed.\\n                // x of borrowers paying yield = (borrowRatio / (100 + borrowRatio)) = 16.6666666%\\n                // borrowRatio_ => x of total bororwers paying yield. scale to 1e27.\\n                borrowRatio_ = (borrowRatio_ * 1e27) / (FOUR_DECIMALS + borrowRatio_);\\n                // max value here for borrowRatio_ is (1e31 / (1e4 + 1e4))= 5e26 (= 50% of borrowers paying yield).\\n            } else {\\n                // ratio is borrowInterestFree / borrowWithInterest (borrowWithInterest is bigger)\\n                borrowRatio_ = borrowRatio_ >> 1;\\n\\n                // borrowRatio_ => x of total bororwers paying yield. scale to 1e27.\\n                // x of borrowers paying yield = 100% - (borrowRatio / (100 + borrowRatio)) = 100% - 16.6666666% = 83,333%.\\n                borrowRatio_ = (1e27 - ((borrowRatio_ * 1e27) / (FOUR_DECIMALS + borrowRatio_)));\\n                // borrowRatio can never be > 100%. so max subtraction can be 100% - 100% / 200%.\\n                // or if borrowRatio_ is 0 -> 100% - 0. or if borrowRatio_ is 1 -> 100% - 1 / 101.\\n                // max value here for borrowRatio_ is 1e27 - 0 = 1e27 (= 100% of borrowers paying yield).\\n            }\\n\\n            // temp_ => ratioSupplyYield. scaled down from 1e25 = 1% each to normal percent precision 1e2 = 1%.\\n            // max nominator value is ~1.64e31 * 1e27 = 1.64e58. max result = 1.64e8\\n            temp_ = (FOUR_DECIMALS * temp_ * borrowRatio_) / 1e54;\\n\\n            // 2. calculate supply rate\\n            // temp_ => supply rate (borrow rate  - revenueFee%) * ratioSupplyYield.\\n            // division part is done in next step to increase precision. (divided by 2x FOUR_DECIMALS, fee + borrowRate)\\n            // Note that all calculation divisions for supplyExchangePrice are rounded down.\\n            // Note supply rate can be bigger than the borrowRate, e.g. if there are only few lenders with interest\\n            // but more suppliers not earning interest.\\n            temp_ = ((exchangePricesAndConfig_ & X16) * // borrow rate\\n                temp_ * // ratioSupplyYield\\n                (FOUR_DECIMALS - ((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_FEE) & X14))); // revenueFee\\n            // fee can not be > 100%. max possible = 65535 * ~1.64e8 * 1e4 =~1.074774e17.\\n\\n            // 3. calculate increase in supply exchange price\\n            supplyExchangePrice_ += ((supplyExchangePrice_ * temp_ * secondsSinceLastUpdate_) /\\n                (SECONDS_PER_YEAR * FOUR_DECIMALS * FOUR_DECIMALS * FOUR_DECIMALS));\\n            // max possible nominator = max uint 64 * 1.074774e17 * max uint32 = ~8.52e45. Denominator can not be 0.\\n        }\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                     CALC REVENUE                       /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev gets the `revenueAmount_` for a token given its' totalAmounts and exchangePricesAndConfig from storage\\n    /// and the current balance of the Fluid liquidity contract for the token.\\n    /// @param totalAmounts_ total amounts packed uint256 read from storage\\n    /// @param exchangePricesAndConfig_ exchange prices and config packed uint256 read from storage\\n    /// @param liquidityTokenBalance_   current balance of Liquidity contract (IERC20(token_).balanceOf(address(this)))\\n    /// @return revenueAmount_ collectable revenue amount\\n    function calcRevenue(\\n        uint256 totalAmounts_,\\n        uint256 exchangePricesAndConfig_,\\n        uint256 liquidityTokenBalance_\\n    ) internal view returns (uint256 revenueAmount_) {\\n        // @dev no need to super-optimize this method as it is only used by admin\\n\\n        // calculate the new exchange prices based on earned interest\\n        (uint256 supplyExchangePrice_, uint256 borrowExchangePrice_) = calcExchangePrices(exchangePricesAndConfig_);\\n\\n        // total supply = interest free + with interest converted from raw\\n        uint256 totalSupply_ = getTotalSupply(totalAmounts_, supplyExchangePrice_);\\n\\n        if (totalSupply_ > 0) {\\n            // available revenue: balanceOf(token) + totalBorrowings - totalLendings.\\n            revenueAmount_ = liquidityTokenBalance_ + getTotalBorrow(totalAmounts_, borrowExchangePrice_);\\n            // ensure there is no possible case because of rounding etc. where this would revert,\\n            // explicitly check if >\\n            revenueAmount_ = revenueAmount_ > totalSupply_ ? revenueAmount_ - totalSupply_ : 0;\\n            // Note: if utilization > 100% (totalSupply < totalBorrow), then all the amount above 100% utilization\\n            // can only be revenue.\\n        } else {\\n            // if supply is 0, then rest of balance can be withdrawn as revenue so that no amounts get stuck\\n            revenueAmount_ = liquidityTokenBalance_;\\n        }\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                      CALC LIMITS                       /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev calculates withdrawal limit before an operate execution:\\n    /// amount of user supply that must stay supplied (not amount that can be withdrawn).\\n    /// i.e. if user has supplied 100m and can withdraw 5M, this method returns the 95M, not the withdrawable amount 5M\\n    /// @param userSupplyData_ user supply data packed uint256 from storage\\n    /// @param userSupply_ current user supply amount already extracted from `userSupplyData_` and converted from BigMath\\n    /// @return currentWithdrawalLimit_ current withdrawal limit updated for expansion since last interaction.\\n    ///         returned value is in raw for with interest mode, normal amount for interest free mode!\\n    function calcWithdrawalLimitBeforeOperate(\\n        uint256 userSupplyData_,\\n        uint256 userSupply_\\n    ) internal view returns (uint256 currentWithdrawalLimit_) {\\n        // @dev must support handling the case where timestamp is 0 (config is set but no interactions yet).\\n        // first tx where timestamp is 0 will enter `if (lastWithdrawalLimit_ == 0)` because lastWithdrawalLimit_ is not set yet.\\n        // returning max withdrawal allowed, which is not exactly right but doesn't matter because the first interaction must be\\n        // a deposit anyway. Important is that it would not revert.\\n\\n        // Note the first time a deposit brings the user supply amount to above the base withdrawal limit, the active limit\\n        // is the fully expanded limit immediately.\\n\\n        // extract last set withdrawal limit\\n        uint256 lastWithdrawalLimit_ = (userSupplyData_ >>\\n            LiquiditySlotsLink.BITS_USER_SUPPLY_PREVIOUS_WITHDRAWAL_LIMIT) & X64;\\n        lastWithdrawalLimit_ =\\n            (lastWithdrawalLimit_ >> DEFAULT_EXPONENT_SIZE) <<\\n            (lastWithdrawalLimit_ & DEFAULT_EXPONENT_MASK);\\n        if (lastWithdrawalLimit_ == 0) {\\n            // withdrawal limit is not activated. Max withdrawal allowed\\n            return 0;\\n        }\\n\\n        uint256 maxWithdrawableLimit_;\\n        uint256 temp_;\\n        unchecked {\\n            // extract max withdrawable percent of user supply and\\n            // calculate maximum withdrawable amount expandPercentage of user supply at full expansion duration elapsed\\n            // e.g.: if 10% expandPercentage, meaning 10% is withdrawable after full expandDuration has elapsed.\\n\\n            // userSupply_ needs to be atleast 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            maxWithdrawableLimit_ =\\n                (((userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_PERCENT) & X14) * userSupply_) /\\n                FOUR_DECIMALS;\\n\\n            // time elapsed since last withdrawal limit was set (in seconds)\\n            // @dev last process timestamp is guaranteed to exist for withdrawal, as a supply must have happened before.\\n            // last timestamp can not be > current timestamp\\n            temp_ =\\n                block.timestamp -\\n                ((userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_LAST_UPDATE_TIMESTAMP) & X33);\\n        }\\n        // calculate withdrawable amount of expandPercent that is elapsed of expandDuration.\\n        // e.g. if 60% of expandDuration has elapsed, then user should be able to withdraw 6% of user supply, down to 94%.\\n        // Note: no explicit check for this needed, it is covered by setting minWithdrawalLimit_ if needed.\\n        temp_ =\\n            (maxWithdrawableLimit_ * temp_) /\\n            // extract expand duration: After this, decrement won't happen (user can withdraw 100% of withdraw limit)\\n            ((userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_DURATION) & X24); // expand duration can never be 0\\n        // calculate expanded withdrawal limit: last withdrawal limit - withdrawable amount.\\n        // Note: withdrawable amount here can grow bigger than userSupply if timeElapsed is a lot bigger than expandDuration,\\n        // which would cause the subtraction `lastWithdrawalLimit_ - withdrawableAmount_` to revert. In that case, set 0\\n        // which will cause minimum (fully expanded) withdrawal limit to be set in lines below.\\n        unchecked {\\n            // underflow explicitly checked & handled\\n            currentWithdrawalLimit_ = lastWithdrawalLimit_ > temp_ ? lastWithdrawalLimit_ - temp_ : 0;\\n            // calculate minimum withdrawal limit: minimum amount of user supply that must stay supplied at full expansion.\\n            // subtraction can not underflow as maxWithdrawableLimit_ is a percentage amount (<=100%) of userSupply_\\n            temp_ = userSupply_ - maxWithdrawableLimit_;\\n        }\\n        // if withdrawal limit is decreased below minimum then set minimum\\n        // (e.g. when more than expandDuration time has elapsed)\\n        if (temp_ > currentWithdrawalLimit_) {\\n            currentWithdrawalLimit_ = temp_;\\n        }\\n    }\\n\\n    /// @dev calculates withdrawal limit after an operate execution:\\n    /// amount of user supply that must stay supplied (not amount that can be withdrawn).\\n    /// i.e. if user has supplied 100m and can withdraw 5M, this method returns the 95M, not the withdrawable amount 5M\\n    /// @param userSupplyData_ user supply data packed uint256 from storage\\n    /// @param userSupply_ current user supply amount already extracted from `userSupplyData_` and added / subtracted with the executed operate amount\\n    /// @param newWithdrawalLimit_ current withdrawal limit updated for expansion since last interaction, result from `calcWithdrawalLimitBeforeOperate`\\n    /// @return withdrawalLimit_ updated withdrawal limit that should be written to storage. returned value is in\\n    ///                          raw for with interest mode, normal amount for interest free mode!\\n    function calcWithdrawalLimitAfterOperate(\\n        uint256 userSupplyData_,\\n        uint256 userSupply_,\\n        uint256 newWithdrawalLimit_\\n    ) internal pure returns (uint256) {\\n        // temp_ => base withdrawal limit. below this, maximum withdrawals are allowed\\n        uint256 temp_ = (userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_BASE_WITHDRAWAL_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        // if user supply is below base limit then max withdrawals are allowed\\n        if (userSupply_ < temp_) {\\n            return 0;\\n        }\\n        // temp_ => withdrawal limit expandPercent (is in 1e2 decimals)\\n        temp_ = (userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_PERCENT) & X14;\\n        unchecked {\\n            // temp_ => minimum withdrawal limit: userSupply - max withdrawable limit (userSupply * expandPercent))\\n            // userSupply_ needs to be atleast 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            // subtraction can not underflow as maxWithdrawableLimit_ is a percentage amount (<=100%) of userSupply_\\n            temp_ = userSupply_ - ((userSupply_ * temp_) / FOUR_DECIMALS);\\n        }\\n        // if new (before operation) withdrawal limit is less than minimum limit then set minimum limit.\\n        // e.g. can happen on new deposits. withdrawal limit is instantly fully expanded in a scenario where\\n        // increased deposit amount outpaces withrawals.\\n        if (temp_ > newWithdrawalLimit_) {\\n            return temp_;\\n        }\\n        return newWithdrawalLimit_;\\n    }\\n\\n    /// @dev calculates borrow limit before an operate execution:\\n    /// total amount user borrow can reach (not borrowable amount in current operation).\\n    /// i.e. if user has borrowed 50M and can still borrow 5M, this method returns the total 55M, not the borrowable amount 5M\\n    /// @param userBorrowData_ user borrow data packed uint256 from storage\\n    /// @param userBorrow_ current user borrow amount already extracted from `userBorrowData_`\\n    /// @return currentBorrowLimit_ current borrow limit updated for expansion since last interaction. returned value is in\\n    ///                             raw for with interest mode, normal amount for interest free mode!\\n    function calcBorrowLimitBeforeOperate(\\n        uint256 userBorrowData_,\\n        uint256 userBorrow_\\n    ) internal view returns (uint256 currentBorrowLimit_) {\\n        // @dev must support handling the case where timestamp is 0 (config is set but no interactions yet) -> base limit.\\n        // first tx where timestamp is 0 will enter `if (maxExpandedBorrowLimit_ < baseBorrowLimit_)` because `userBorrow_` and thus\\n        // `maxExpansionLimit_` and thus `maxExpandedBorrowLimit_` is 0 and `baseBorrowLimit_` can not be 0.\\n\\n        // temp_ = extract borrow expand percent (is in 1e2 decimals)\\n        uint256 temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_PERCENT) & X14;\\n\\n        uint256 maxExpansionLimit_;\\n        uint256 maxExpandedBorrowLimit_;\\n        unchecked {\\n            // calculate max expansion limit: Max amount limit can expand to since last interaction\\n            // userBorrow_ needs to be atleast 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            maxExpansionLimit_ = ((userBorrow_ * temp_) / FOUR_DECIMALS);\\n\\n            // calculate max borrow limit: Max point limit can increase to since last interaction\\n            maxExpandedBorrowLimit_ = userBorrow_ + maxExpansionLimit_;\\n        }\\n\\n        // currentBorrowLimit_ = extract base borrow limit\\n        currentBorrowLimit_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_BASE_BORROW_LIMIT) & X18;\\n        currentBorrowLimit_ =\\n            (currentBorrowLimit_ >> DEFAULT_EXPONENT_SIZE) <<\\n            (currentBorrowLimit_ & DEFAULT_EXPONENT_MASK);\\n\\n        if (maxExpandedBorrowLimit_ < currentBorrowLimit_) {\\n            return currentBorrowLimit_;\\n        }\\n        // time elapsed since last borrow limit was set (in seconds)\\n        unchecked {\\n            // temp_ = timeElapsed_ (last timestamp can not be > current timestamp)\\n            temp_ =\\n                block.timestamp -\\n                ((userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_LAST_UPDATE_TIMESTAMP) & X33); // extract last update timestamp\\n        }\\n\\n        // currentBorrowLimit_ = expandedBorrowableAmount + extract last set borrow limit\\n        currentBorrowLimit_ =\\n            // calculate borrow limit expansion since last interaction for `expandPercent` that is elapsed of `expandDuration`.\\n            // divisor is extract expand duration (after this, full expansion to expandPercentage happened).\\n            ((maxExpansionLimit_ * temp_) /\\n                ((userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_DURATION) & X24)) + // expand duration can never be 0\\n            //  extract last set borrow limit\\n            BigMathMinified.fromBigNumber(\\n                (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_PREVIOUS_BORROW_LIMIT) & X64,\\n                DEFAULT_EXPONENT_SIZE,\\n                DEFAULT_EXPONENT_MASK\\n            );\\n\\n        // if timeElapsed is bigger than expandDuration, new borrow limit would be > max expansion,\\n        // so set to `maxExpandedBorrowLimit_` in that case.\\n        // also covers the case where last process timestamp = 0 (timeElapsed would simply be very big)\\n        if (currentBorrowLimit_ > maxExpandedBorrowLimit_) {\\n            currentBorrowLimit_ = maxExpandedBorrowLimit_;\\n        }\\n        // temp_ = extract hard max borrow limit. Above this user can never borrow (not expandable above)\\n        temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_MAX_BORROW_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        if (currentBorrowLimit_ > temp_) {\\n            currentBorrowLimit_ = temp_;\\n        }\\n    }\\n\\n    /// @dev calculates borrow limit after an operate execution:\\n    /// total amount user borrow can reach (not borrowable amount in current operation).\\n    /// i.e. if user has borrowed 50M and can still borrow 5M, this method returns the total 55M, not the borrowable amount 5M\\n    /// @param userBorrowData_ user borrow data packed uint256 from storage\\n    /// @param userBorrow_ current user borrow amount already extracted from `userBorrowData_` and added / subtracted with the executed operate amount\\n    /// @param newBorrowLimit_ current borrow limit updated for expansion since last interaction, result from `calcBorrowLimitBeforeOperate`\\n    /// @return borrowLimit_ updated borrow limit that should be written to storage.\\n    ///                      returned value is in raw for with interest mode, normal amount for interest free mode!\\n    function calcBorrowLimitAfterOperate(\\n        uint256 userBorrowData_,\\n        uint256 userBorrow_,\\n        uint256 newBorrowLimit_\\n    ) internal pure returns (uint256 borrowLimit_) {\\n        // temp_ = extract borrow expand percent\\n        uint256 temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_PERCENT) & X14; // (is in 1e2 decimals)\\n\\n        unchecked {\\n            // borrowLimit_ = calculate maximum borrow limit at full expansion.\\n            // userBorrow_ needs to be at least 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            borrowLimit_ = userBorrow_ + ((userBorrow_ * temp_) / FOUR_DECIMALS);\\n        }\\n\\n        // temp_ = extract base borrow limit\\n        temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_BASE_BORROW_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        if (borrowLimit_ < temp_) {\\n            // below base limit, borrow limit is always base limit\\n            return temp_;\\n        }\\n        // temp_ = extract hard max borrow limit. Above this user can never borrow (not expandable above)\\n        temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_MAX_BORROW_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        // make sure fully expanded borrow limit is not above hard max borrow limit\\n        if (borrowLimit_ > temp_) {\\n            borrowLimit_ = temp_;\\n        }\\n        // if new borrow limit (from before operate) is > max borrow limit, set max borrow limit.\\n        // (e.g. on a repay shrinking instantly to fully expanded borrow limit from new borrow amount. shrinking is instant)\\n        if (newBorrowLimit_ > borrowLimit_) {\\n            return borrowLimit_;\\n        }\\n        return newBorrowLimit_;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                      CALC RATES                        /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev Calculates new borrow rate from utilization for a token\\n    /// @param rateData_ rate data packed uint256 from storage for the token\\n    /// @param utilization_ totalBorrow / totalSupply. 1e4 = 100% utilization\\n    /// @return rate_ rate for that particular token in 1e2 precision (e.g. 5% rate = 500)\\n    function calcBorrowRateFromUtilization(uint256 rateData_, uint256 utilization_) internal returns (uint256 rate_) {\\n        // extract rate version: 4 bits (0xF) starting from bit 0\\n        uint256 rateVersion_ = (rateData_ & 0xF);\\n\\n        if (rateVersion_ == 1) {\\n            rate_ = calcRateV1(rateData_, utilization_);\\n        } else if (rateVersion_ == 2) {\\n            rate_ = calcRateV2(rateData_, utilization_);\\n        } else {\\n            revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__UnsupportedRateVersion);\\n        }\\n\\n        if (rate_ > X16) {\\n            // hard cap for borrow rate at maximum value 16 bits (65535) to make sure it does not overflow storage space.\\n            // this is unlikely to ever happen if configs stay within expected levels.\\n            rate_ = X16;\\n            // emit event to more easily become aware\\n            emit BorrowRateMaxCap();\\n        }\\n    }\\n\\n    /// @dev calculates the borrow rate based on utilization for rate data version 1 (with one kink) in 1e2 precision\\n    /// @param rateData_ rate data packed uint256 from storage for the token\\n    /// @param utilization_  in 1e2 (100% = 1e4)\\n    /// @return rate_ rate in 1e2 precision\\n    function calcRateV1(uint256 rateData_, uint256 utilization_) internal pure returns (uint256 rate_) {\\n        /// For rate v1 (one kink) ------------------------------------------------------\\n        /// Next 16  bits =>  4 - 19 => Rate at utilization 0% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  20- 35 => Utilization at kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  36- 51 => Rate at utilization kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  52- 67 => Rate at utilization 100% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Last 188 bits =>  68-255 => blank, might come in use in future\\n\\n        // y = mx + c.\\n        // y is borrow rate\\n        // x is utilization\\n        // m = slope (m can also be negative for declining rates)\\n        // c is constant (c can be negative)\\n\\n        uint256 y1_;\\n        uint256 y2_;\\n        uint256 x1_;\\n        uint256 x2_;\\n\\n        // extract kink1: 16 bits (0xFFFF) starting from bit 20\\n        // kink is in 1e2, same as utilization, so no conversion needed for direct comparison of the two\\n        uint256 kink1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_UTILIZATION_AT_KINK) & X16;\\n        if (utilization_ < kink1_) {\\n            // if utilization is less than kink\\n            y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_ZERO) & X16;\\n            y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_KINK) & X16;\\n            x1_ = 0; // 0%\\n            x2_ = kink1_;\\n        } else {\\n            // else utilization is greater than kink\\n            y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_KINK) & X16;\\n            y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_MAX) & X16;\\n            x1_ = kink1_;\\n            x2_ = FOUR_DECIMALS; // 100%\\n        }\\n\\n        int256 constant_;\\n        int256 slope_;\\n        unchecked {\\n            // calculating slope with twelve decimal precision. m = (y2 - y1) / (x2 - x1).\\n            // utilization of x2 can not be <= utilization of x1 (so no underflow or 0 divisor)\\n            // y is in 1e2 so can not overflow when multiplied with TWELVE_DECIMALS\\n            slope_ = (int256(y2_ - y1_) * int256(TWELVE_DECIMALS)) / int256((x2_ - x1_));\\n\\n            // calculating constant at 12 decimal precision. slope is already in 12 decimal hence only multiple with y1. c = y - mx.\\n            // maximum y1_ value is 65535. 65535 * 1e12 can not overflow int256\\n            // maximum slope is 65535 - 0 * TWELVE_DECIMALS / 1 = 65535 * 1e12;\\n            // maximum x1_ is 100% (9_999 actually) => slope_ * x1_ can not overflow int256\\n            // subtraction most extreme case would be  0 - max value slope_ * x1_ => can not underflow int256\\n            constant_ = int256(y1_ * TWELVE_DECIMALS) - (slope_ * int256(x1_));\\n\\n            // calculating new borrow rate\\n            // - slope_ max value is 65535 * 1e12,\\n            // - utilization max value is let's say 500% (extreme case where borrow rate increases borrow amount without new supply)\\n            // - constant max value is 65535 * 1e12\\n            // so max values are 65535 * 1e12 * 50_000 + 65535 * 1e12 -> 3.2768*10^21, which easily fits int256\\n            // divisor TWELVE_DECIMALS can not be 0\\n            slope_ = (slope_ * int256(utilization_)) + constant_; // reusing `slope_` as variable for gas savings\\n            if (slope_ < 0) {\\n                revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__BorrowRateNegative);\\n            }\\n            rate_ = uint256(slope_) / TWELVE_DECIMALS;\\n        }\\n    }\\n\\n    /// @dev calculates the borrow rate based on utilization for rate data version 2 (with two kinks) in 1e4 precision\\n    /// @param rateData_ rate data packed uint256 from storage for the token\\n    /// @param utilization_  in 1e2 (100% = 1e4)\\n    /// @return rate_ rate in 1e4 precision\\n    function calcRateV2(uint256 rateData_, uint256 utilization_) internal pure returns (uint256 rate_) {\\n        /// For rate v2 (two kinks) -----------------------------------------------------\\n        /// Next 16  bits =>  4 - 19 => Rate at utilization 0% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  20- 35 => Utilization at kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  36- 51 => Rate at utilization kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  52- 67 => Utilization at kink2 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  68- 83 => Rate at utilization kink2 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  84- 99 => Rate at utilization 100% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Last 156 bits => 100-255 => blank, might come in use in future\\n\\n        // y = mx + c.\\n        // y is borrow rate\\n        // x is utilization\\n        // m = slope (m can also be negative for declining rates)\\n        // c is constant (c can be negative)\\n\\n        uint256 y1_;\\n        uint256 y2_;\\n        uint256 x1_;\\n        uint256 x2_;\\n\\n        // extract kink1: 16 bits (0xFFFF) starting from bit 20\\n        // kink is in 1e2, same as utilization, so no conversion needed for direct comparison of the two\\n        uint256 kink1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_UTILIZATION_AT_KINK1) & X16;\\n        if (utilization_ < kink1_) {\\n            // if utilization is less than kink1\\n            y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_ZERO) & X16;\\n            y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK1) & X16;\\n            x1_ = 0; // 0%\\n            x2_ = kink1_;\\n        } else {\\n            // extract kink2: 16 bits (0xFFFF) starting from bit 52\\n            uint256 kink2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_UTILIZATION_AT_KINK2) & X16;\\n            if (utilization_ < kink2_) {\\n                // if utilization is less than kink2\\n                y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK1) & X16;\\n                y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK2) & X16;\\n                x1_ = kink1_;\\n                x2_ = kink2_;\\n            } else {\\n                // else utilization is greater than kink2\\n                y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK2) & X16;\\n                y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_MAX) & X16;\\n                x1_ = kink2_;\\n                x2_ = FOUR_DECIMALS;\\n            }\\n        }\\n\\n        int256 constant_;\\n        int256 slope_;\\n        unchecked {\\n            // calculating slope with twelve decimal precision. m = (y2 - y1) / (x2 - x1).\\n            // utilization of x2 can not be <= utilization of x1 (so no underflow or 0 divisor)\\n            // y is in 1e2 so can not overflow when multiplied with TWELVE_DECIMALS\\n            slope_ = (int256(y2_ - y1_) * int256(TWELVE_DECIMALS)) / int256((x2_ - x1_));\\n\\n            // calculating constant at 12 decimal precision. slope is already in 12 decimal hence only multiple with y1. c = y - mx.\\n            // maximum y1_ value is 65535. 65535 * 1e12 can not overflow int256\\n            // maximum slope is 65535 - 0 * TWELVE_DECIMALS / 1 = 65535 * 1e12;\\n            // maximum x1_ is 100% (9_999 actually) => slope_ * x1_ can not overflow int256\\n            // subtraction most extreme case would be  0 - max value slope_ * x1_ => can not underflow int256\\n            constant_ = int256(y1_ * TWELVE_DECIMALS) - (slope_ * int256(x1_));\\n\\n            // calculating new borrow rate\\n            // - slope_ max value is 65535 * 1e12,\\n            // - utilization max value is let's say 500% (extreme case where borrow rate increases borrow amount without new supply)\\n            // - constant max value is 65535 * 1e12\\n            // so max values are 65535 * 1e12 * 50_000 + 65535 * 1e12 -> 3.2768*10^21, which easily fits int256\\n            // divisor TWELVE_DECIMALS can not be 0\\n            slope_ = (slope_ * int256(utilization_)) + constant_; // reusing `slope_` as variable for gas savings\\n            if (slope_ < 0) {\\n                revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__BorrowRateNegative);\\n            }\\n            rate_ = uint256(slope_) / TWELVE_DECIMALS;\\n        }\\n    }\\n\\n    /// @dev reads the total supply out of Liquidity packed storage `totalAmounts_` for `supplyExchangePrice_`\\n    function getTotalSupply(\\n        uint256 totalAmounts_,\\n        uint256 supplyExchangePrice_\\n    ) internal pure returns (uint256 totalSupply_) {\\n        // totalSupply_ => supplyInterestFree\\n        totalSupply_ = (totalAmounts_ >> LiquiditySlotsLink.BITS_TOTAL_AMOUNTS_SUPPLY_INTEREST_FREE) & X64;\\n        totalSupply_ = (totalSupply_ >> DEFAULT_EXPONENT_SIZE) << (totalSupply_ & DEFAULT_EXPONENT_MASK);\\n\\n        uint256 totalSupplyRaw_ = totalAmounts_ & X64; // no shifting as supplyRaw is first 64 bits\\n        totalSupplyRaw_ = (totalSupplyRaw_ >> DEFAULT_EXPONENT_SIZE) << (totalSupplyRaw_ & DEFAULT_EXPONENT_MASK);\\n\\n        // totalSupply = supplyInterestFree + supplyRawInterest normalized from raw\\n        totalSupply_ += ((totalSupplyRaw_ * supplyExchangePrice_) / EXCHANGE_PRICES_PRECISION);\\n    }\\n\\n    /// @dev reads the total borrow out of Liquidity packed storage `totalAmounts_` for `borrowExchangePrice_`\\n    function getTotalBorrow(\\n        uint256 totalAmounts_,\\n        uint256 borrowExchangePrice_\\n    ) internal pure returns (uint256 totalBorrow_) {\\n        // totalBorrow_ => borrowInterestFree\\n        // no & mask needed for borrow interest free as it occupies the last bits in the storage slot\\n        totalBorrow_ = (totalAmounts_ >> LiquiditySlotsLink.BITS_TOTAL_AMOUNTS_BORROW_INTEREST_FREE);\\n        totalBorrow_ = (totalBorrow_ >> DEFAULT_EXPONENT_SIZE) << (totalBorrow_ & DEFAULT_EXPONENT_MASK);\\n\\n        uint256 totalBorrowRaw_ = (totalAmounts_ >> LiquiditySlotsLink.BITS_TOTAL_AMOUNTS_BORROW_WITH_INTEREST) & X64;\\n        totalBorrowRaw_ = (totalBorrowRaw_ >> DEFAULT_EXPONENT_SIZE) << (totalBorrowRaw_ & DEFAULT_EXPONENT_MASK);\\n\\n        // totalBorrow = borrowInterestFree + borrowRawInterest normalized from raw\\n        totalBorrow_ += ((totalBorrowRaw_ * borrowExchangePrice_) / EXCHANGE_PRICES_PRECISION);\\n    }\\n}\",\"versionPragma\":\"0.8.21\"}}}","address":"0xb7D42206cAef6a49E65637a06Bbb21142bb185AE","bytecode":"0x60c0604052732386dc45added673317ef068992f19421b481f4c60805234801561002857600080fd5b503060a05260805160a051613206610067600039600081816104cb0152610b7601526000818161031f0152818161052e0152610ab501526132066000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638a1c73641161010f578063b6966495116100a2578063c189205811610071578063c1892058146104ab578063cc025f7c146104c6578063d45f9d95146104ed578063dca95fbf1461050857600080fd5b8063b69664951461043f578063b788f3a11461045a578063bb09d9b714610475578063bffa7f0f1461049057600080fd5b8063a734f06e116100de578063a734f06e146103db578063aa98df39146103f6578063aae7ae0714610409578063aaff04931461042457600080fd5b80638a1c7364146103775780639d3d2a7814610392578063a4485598146103a5578063a64f5693146103c057600080fd5b8063544dd383116101875780636dc0ae22116101565780636dc0ae22146102ff5780637aadef8b1461031a5780637e2f35fa1461034157806383ba27d81461035c57600080fd5b8063544dd383146102bf578063588c77e6146102da57806361461954146102f557806366760d7d146102fd57600080fd5b80632861c7d1116101c35780632861c7d1146102535780632d2c55651461026e578063308baf3314610289578063349fd186146102a457600080fd5b8063040141e5146101ea5780630bc9136e1461022257806325ad7f4d14610238575b600080fd5b61020573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6040516001600160a01b0390911681526020015b60405180910390f35b61022a602981565b604051908152602001610219565b610205739efde135ca4832abf0408c44c6f5f370eb0f35e881565b6102057352aa899454998be5b000ad077a46bbe360f4e49781565b6102057328849d2b63fa8d361e5fc15cb8abb13019884d0981565b61020573ae7ab96520de3a18e5e111b5eaab095312d7fe8481565b6102057393dd426446b5370f094a1e31f19991aaa6ac0be081565b61020573cbb7c0000ab88b473b1f5afd9ef808440eed33bf81565b610205735c43aac965ff230ac1cf63e924d0153291d78bad81565b6102fd610523565b005b610205730204cd037b2ec03605cfdfe482d8e257c765fa1b81565b6102057f000000000000000000000000000000000000000000000000000000000000000081565b61020573059a94a72451c0ae1cc1ce4bf0db52421bbe821081565b610205739fb7b4477576fe5b32be4c1843afb1e55f251b3381565b61020573324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d81565b61022a6103a0366004612964565b6105cd565b610205737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b6102057397b0b3a8bdefe8cb9563a3c610019ad10db8ad1181565b61020573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6102fd6104043660046129f3565b6108e8565b610205735c20b550819128074fd538edf79791733ccedd1881565b61020573cd5fe23c85820f7b72d0926fc9b05b43e359b7ee81565b61020573264786ef916af64a1db19f513f24a3681734ce9281565b610205734f6f977acdd1177dcd81ab83074855ecb9c2d49e81565b61020573a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b61020573a45f7bd6a5ff45d31aace6bcd3d426d9328cea0181565b61020573dac17f958d2ee523a2206206994597c13d831ec781565b6102057f000000000000000000000000000000000000000000000000000000000000000081565b610205732260fac5e5542a773aa44fbcfedf7c193bc2c59981565b610205739d39a5de30e57443bff2a8307a4256c8797a349781565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105935760405162461bcd60e51b815260206004820152601060248201526f3737ba16bb30b634b216b1b0b63632b960811b60448201526064015b60405180910390fd5b61059b610ca1565b6105a36112f6565b6105ab611449565b6105b361158b565b6105bb611a06565b6105c3611a56565b6105cb611aba565b565b600080841180156105de5750600083115b1561062b5760405162461bcd60e51b815260206004820181905260248201527f626f74682075736420616e6420616d6f756e7420617265206e6f74207a65726f604482015260640161058a565b60007352aa899454998be5b000ad077a46bbe360f4e49763b5c736e4610652600589611b7d565b6040518263ffffffff1660e01b815260040161067091815260200190565b602060405180830381865afa15801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b19190612aa4565b90506000806106bf83611bbb565b90925090506000601273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038b16016106fa575061092e90506012610874565b737f39c581f595b53c5cb19bd0b3f8da6c935e2c9f196001600160a01b038b160161072c5750610abe90506012610874565b73cd5fe23c85820f7b72d0926fc9b05b43e359b7ed196001600160a01b038b160161075e575061099290506012610874565b6001600160a01b038a1673cbb7c0000ab88b473b1f5afd9ef808440eed33bf14806107a557506001600160a01b038a16732260fac5e5542a773aa44fbcfedf7c193bc2c599145b156107b7575061ec5490506008610874565b6001600160a01b038a1673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4814806107fe57506001600160a01b038a1673dac17f958d2ee523a2206206994597c13d831ec7145b1561080f5750600190506006610874565b739d39a5de30e57443bff2a8307a4256c8797a3496196001600160a01b038b16016108405750600190506012610874565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd0b599bdd5b9960ba1b604482015260640161058a565b6000876108815783610883565b845b905089156108b2578061089b8b64e8d4a51000612ad3565b6108a59190612b00565b96505050505050506108e0565b6108bc8184612ad3565b6108c783600a612c06565b6108d68b64e8d4a51000612ad3565b61089b9190612ad3565b949350505050565b3373a45f7bd6a5ff45d31aace6bcd3d426d9328cea01148061091d575033734f6f977acdd1177dcd81ab83074855ecb9c2d49e145b8061093b57503073059a94a72451c0ae1cc1ce4bf0db52421bbe8210145b80610959575030739efde135ca4832abf0408c44c6f5f370eb0f35e8145b80610962575060015b6109a75760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c8b5b9bdd0b585b1b1bddd95960521b604482015260640161058a565b604080516001808252818301909252600090826020808301908036833701905050905060008267ffffffffffffffff8111156109e5576109e56129b3565b604051908082528060200260200182016040528015610a0e578160200160208202803683370190505b50905060008367ffffffffffffffff811115610a2c57610a2c6129b3565b604051908082528060200260200182016040528015610a5f57816020015b6060815260200190600190039081610a4a5790505b50905060008467ffffffffffffffff811115610a7d57610a7d6129b3565b604051908082528060200260200182016040528015610ab057816020015b6060815260200190600190039081610a9b5790505b5090507f000000000000000000000000000000000000000000000000000000000000000084600081518110610ae757610ae7612c19565b60200260200101906001600160a01b031690816001600160a01b031681525050600083600081518110610b1c57610b1c612c19565b6020026020010181815250506040518060600160405280602481526020016131ad6024913982600081518110610b5457610b54612c19565b60209081029190910181019190915260408051600081529182018152610b9d917f0000000000000000000000000000000000000000000000000000000000000000918101612c7f565b60405160208183030381529060405281600081518110610bbf57610bbf612c19565b6020908102919091010152604051636d4ab48d60e11b8152600090730204cd037b2ec03605cfdfe482d8e257c765fa1b9063da95691a90610c0c9088908890889088908e90600401612d89565b6020604051808303816000875af1158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f9190612aa4565b905060298114610c985760405162461bcd60e51b815260206004820152601460248201527350524f504f53414c5f49535f4e4f545f53414d4560601b604482015260640161058a565b50505050505050565b60408051600480825260a082019092526000916020820160808036833701905050905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81600081518110610cec57610cec612c19565b60200260200101906001600160a01b031690816001600160a01b031681525050737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081600181518110610d3457610d34612c19565b60200260200101906001600160a01b031690816001600160a01b03168152505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881600281518110610d7c57610d7c612c19565b60200260200101906001600160a01b031690816001600160a01b03168152505073dac17f958d2ee523a2206206994597c13d831ec781600381518110610dc457610dc4612c19565b6001600160a01b039092166020928302919091019091015260405163564315fd60e11b81527352aa899454998be5b000ad077a46bbe360f4e4979063ac862bfa90610e13908490600401612df6565b600060405180830381600087803b158015610e2d57600080fd5b505af1158015610e41573d6000803e3d6000fd5b506000935060049250610e52915050565b604051908082528060200260200182016040528015610e8557816020015b6060815260200190600190039081610e705790505b5060408051600480825260a0820190925291925060009190816020015b6060815260200190600190039081610ea2579050509050600060405180606001604052806031815260200161317c6031913990506040518060400160405280600781526020016642415349432d4160c81b81525083600081518110610f0957610f09612c19565b60200260200101819052508073ae7ab96520de3a18e5e111b5eaab095312d7fe84600019734f6f977acdd1177dcd81ab83074855ecb9c2d49e600080604051602401610f59959493929190612e09565b60408051601f198184030181529082905291610f7491612e3f565b60405180910390206001600160e01b0319166020820180516001600160e01b03838183161783525050505082600081518110610fb257610fb2612c19565b60200260200101819052506040518060400160405280600781526020016642415349432d4160c81b81525083600181518110610ff057610ff0612c19565b602002602001018190525080737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0600019734f6f977acdd1177dcd81ab83074855ecb9c2d49e600080604051602401611040959493929190612e09565b60408051601f19818403018152908290529161105b91612e3f565b60405180910390206001600160e01b0319166020820180516001600160e01b0383818316178352505050508260018151811061109957611099612c19565b60200260200101819052506040518060400160405280600781526020016642415349432d4160c81b815250836002815181106110d7576110d7612c19565b602002602001018190525080732260fac5e5542a773aa44fbcfedf7c193bc2c599600019734f6f977acdd1177dcd81ab83074855ecb9c2d49e600080604051602401611127959493929190612e09565b60408051601f19818403018152908290529161114291612e3f565b60405180910390206001600160e01b0319166020820180516001600160e01b0383818316178352505050508260028151811061118057611180612c19565b60200260200101819052506040518060400160405280600781526020016642415349432d4160c81b815250836003815181106111be576111be612c19565b60200260200101819052508073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2600019734f6f977acdd1177dcd81ab83074855ecb9c2d49e60008060405160240161120e959493929190612e09565b60408051601f19818403018152908290529161122991612e3f565b60405180910390206001600160e01b0319166020820180516001600160e01b0383818316178352505050508260038151811061126757611267612c19565b60209081029190910101526040516324c1324d60e21b81527328849d2b63fa8d361e5fc15cb8abb13019884d0990639304c934906112ad90869086903090600401612e5b565b6020604051808303816000875af11580156112cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f09190612aa4565b50505050565b60408051600280825260608201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161130e579050509050604051806040016040528073b5af15a931da1b1a7b8dcf6e2cd31c8a3dd1e1346001600160a01b03168152602001600015158152508160008151811061137f5761137f612c19565b602002602001018190525060405180604001604052807382a2a351aae9c35e7ca17d05367cba533caa21d76001600160a01b0316815260200160011515815250816001815181106113d2576113d2612c19565b6020908102919091010152604051633f66feff60e01b81527352aa899454998be5b000ad077a46bbe360f4e49790633f66feff90611414908490600401612e99565b600060405180830381600087803b15801561142e57600080fd5b505af1158015611442573d6000803e3d6000fd5b5050505050565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d2161146d6015611db0565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152734605fc1e6a49d92d97179407e823023f06d5aa0e602482015260006044820152606401600060405180830381600087803b1580156114cf57600080fd5b505af11580156114e3573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d216115146016611db0565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015273ba379afc2829cbf5dea14b8bc135a820e144456d6024820152600060448201526064015b600060405180830381600087803b15801561157757600080fd5b505af11580156112f0573d6000803e3d6000fd5b60408051600280825260608201835260009260208301908036833750506040805160028082526060820183529394506000939092509060208301908036833750506040805160028082526060820183529394506000939092509060208301908036833701905050604051635fd6196560e01b815273512ac5b6cf04f042486a198edb3c28c6f2c6285a6004820152909150739fb7b4477576fe5b32be4c1843afb1e55f251b3390635fd6196590602401600060405180830381600087803b15801561165557600080fd5b505af1158015611669573d6000803e3d6000fd5b5050604051636eb1769f60e11b815273264786ef916af64a1db19f513f24a3681734ce926004820152739fb7b4477576fe5b32be4c1843afb1e55f251b3360248201526000925073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48915063dd62ed3e90604401602060405180830381865afa1580156116ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117119190612aa4565b9050739fb7b4477576fe5b32be4c1843afb1e55f251b338460008151811061173b5761173b612c19565b60200260200101906001600160a01b031690816001600160a01b03168152505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb488360008151811061178357611783612c19565b6001600160a01b03909216602092830291909101909101526117aa81643a35294400612ee6565b826000815181106117bd576117bd612c19565b602090810291909101015250604051635fd6196560e01b815273512ac5b6cf04f042486a198edb3c28c6f2c6285a6004820152735c20b550819128074fd538edf79791733ccedd1890635fd6196590602401600060405180830381600087803b15801561182957600080fd5b505af115801561183d573d6000803e3d6000fd5b5050604051636eb1769f60e11b815273264786ef916af64a1db19f513f24a3681734ce926004820152735c20b550819128074fd538edf79791733ccedd1860248201526000925073dac17f958d2ee523a2206206994597c13d831ec7915063dd62ed3e90604401602060405180830381865afa1580156118c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e59190612aa4565b9050735c20b550819128074fd538edf79791733ccedd188460018151811061190f5761190f612c19565b60200260200101906001600160a01b031690816001600160a01b03168152505073dac17f958d2ee523a2206206994597c13d831ec78360018151811061195757611957612c19565b6001600160a01b039092166020928302919091019091015261197e81643a35294400612ee6565b8260018151811061199157611991612c19565b6020908102919091010152506040516303e8046160e01b815273264786ef916af64a1db19f513f24a3681734ce92906303e80461906119d890869086908690600401612ef9565b600060405180830381600087803b1580156119f257600080fd5b505af1158015610c98573d6000803e3d6000fd5b611a12601d6015611e27565b50611a1f601e6016611e27565b50611a2c601c6017611e27565b50611a39601f6018611e27565b50611a4660216019611e27565b50611a536020601a611e27565b50565b611a60600161244e565b611a6a600261244e565b611a74600361244e565b611a7e600461244e565b611a88600561244e565b611a92600661244e565b611a9c600761244e565b611aa6600861244e565b611ab0600961244e565b6105cb600a61244e565b60405163081607ff60e11b8152734f6f977acdd1177dcd81ab83074855ecb9c2d49e60048201527397b0b3a8bdefe8cb9563a3c610019ad10db8ad119063102c0ffe90602401600060405180830381600087803b158015611b1a57600080fd5b505af1158015611b2e573d6000803e3d6000fd5b505060405163081607ff60e11b815273a6aec494aa19dc910944e2374e9ea159dc919c5960048201527397b0b3a8bdefe8cb9563a3c610019ad10db8ad11925063102c0ffe915060240161155d565b604080516001600160a01b03831660208201529081018390526000906060016040516020818303038152906040528051906020012090505b92915050565b67ffffffffffffffff605b82901c811690609b83901c16811580611bdd575080155b15611c0057604051636a86ba8960e11b815262011171600482015260240161058a565b61ffff8316603a84901c6401ffffffff16428181039160ea87901c617fff16911480611c2a575082155b80611c355750806001145b15611c4257505050915091565b64496cebb80084840283020484019350617fff60db87901c16925082600103611c6d57505050915091565b82600116600103611cc25760019290921c91826c7e37be2022c0914b268000000081611c9b57611c9b612aea565b049250612710601e87901c613fff166b033b2e3c9fd0803ce8000000850102049250611cef565b60019290921c916305f5e100601e87901c613fff166127108501026b033b2e3c9fd0803ce8000000020492505b80600116600103611d265760011c61271081016b033b2e3c9fd0803ce8000000820281611d1e57611d1e612aea565b049050611d5c565b60011c61271081016b033b2e3c9fd0803ce8000000820281611d4a57611d4a612aea565b046b033b2e3c9fd0803ce80000000390505b760a70c3c40a64e6c51999090b65f67d92400000000000008382026127100261ffff881691900402601087901c613fff16612710030292506801b5a660ea44b8000085840283020485019450505050915091565b60405163735e935160e11b81526004810182905260009073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a290602401602060405180830381865afa158015611e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb59190612f4c565b60405163735e935160e11b81526004810183905260009073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a290602401602060405180830381865afa158015611e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9e9190612f4c565b60405163735e935160e11b815260048101849052909150600090611f219073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a290602401602060405180830381865afa158015611ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1c9190612f4c565b612740565b805160208201516040808401516060850151608086015160a087015160c088015160e089015195516354b04ef560e01b81526004810198909852602488019690965260448701939093526064860191909152608485015260a484015260c483019190915260e48201529091506001600160a01b038316906354b04ef59061010401600060405180830381600087803b158015611fbc57600080fd5b505af1158015611fd0573d6000803e3d6000fd5b505050506000826001600160a01b031663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa158015612015573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120399190612f7a565b6080015190506000836001600160a01b031663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa158015612080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a49190612f7a565b60a00151905060007352aa899454998be5b000ad077a46bbe360f4e49763b5c736e46120d26008888761289d565b6040518263ffffffff1660e01b81526004016120f091815260200190565b602060405180830381865afa15801561210d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121319190612aa4565b60408051600180825281830190925291925060009190816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a0820152825260001990920191018161214c5790505090506040518060c00160405280876001600160a01b03168152602001856001600160a01b031681526020018360011660ff168152602001613fff60a285901c16815260200162ffffff60b085901c1681526020016121f3866000627270e060016105cd565b8152508160008151811061220957612209612c19565b60209081029190910101526040516301635db560e11b81527352aa899454998be5b000ad077a46bbe360f4e497906302c6bb6a9061224b908490600401613057565b600060405180830381600087803b15801561226557600080fd5b505af1158015612279573d6000803e3d6000fd5b50505050505060007352aa899454998be5b000ad077a46bbe360f4e4976001600160a01b031663b5c736e46122b06009888661289d565b6040518263ffffffff1660e01b81526004016122ce91815260200190565b602060405180830381865afa1580156122eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230f9190612aa4565b60408051600180825281830190925291925060009190816020015b6123326128fd565b81526020019060019003908161232a5750506040805160e0810182526001600160a01b03808a16825286166020820152600185169181019190915260a284901c613fff16606082015260b084901c62ffffff16608082015290915060a081016103ff60d085901c1660c885901c60ff161b81526020016123ba856000630bebc20060006105cd565b815250816000815181106123d0576123d0612c19565b602090810291909101015260405162dc47c360e11b81527352aa899454998be5b000ad077a46bbe360f4e497906301b88f86906124119084906004016130d1565b600060405180830381600087803b15801561242b57600080fd5b505af115801561243f573d6000803e3d6000fd5b50505050505050505092915050565b60405163735e935160e11b81526004810182905260009073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a290602401602060405180830381865afa1580156124a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c59190612f4c565b90506000816001600160a01b031663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa158015612508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252c9190612f7a565b60a00151905060007352aa899454998be5b000ad077a46bbe360f4e49763b5c736e461255a6009868661289d565b6040518263ffffffff1660e01b815260040161257891815260200190565b602060405180830381865afa158015612595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b99190612aa4565b9050600981901c66ffffffffffffff16600182901c60ff161b60006125e284826103e8816105cd565b60408051600180825281830190925291925060009190816020015b6126056128fd565b8152602001906001900390816125fd5790505090506040518060e00160405280876001600160a01b03168152602001866001600160a01b031681526020018560011660ff168152602001613fff60a287901c16815260200162ffffff60b087901c1681526020018385106126795783612692565b6103e8612688866103e9612ad3565b6126929190612b00565b815260200160646126a4866069612ad3565b6126ae9190612b00565b815250816000815181106126c4576126c4612c19565b602090810291909101015260405162dc47c360e11b81527352aa899454998be5b000ad077a46bbe360f4e497906301b88f86906127059084906004016130d1565b600060405180830381600087803b15801561271f57600080fd5b505af1158015612733573d6000803e3d6000fd5b5050505050505050505050565b61278860405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051632d71cdb960e21b8152600160048201526000906001600160a01b0384169063b5c736e490602401602060405180830381865afa1580156127d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f49190612aa4565b61ffff8082168452601082901c166020808501919091529091506128209082901c6103ff16600a613155565b61ffff16604083015261283c602a82901c6103ff16600a613155565b61ffff166060830152612858603482901c6103ff16600a613155565b61ffff166080830152612874603e82901c6103ff16600a613155565b61ffff1660a08301526103ff604882901c811660c084015260529190911c1660e0820152919050565b604080516001600160a01b039384166020808301919091528183019590955281518082038301815260608201835280519086012092909316608084015260a0808401929092528051808403909201825260c0909201909152805191012090565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600060ff168152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0381168114611a5357600080fd5b6000806000806080858703121561297a57600080fd5b84356129858161294f565b93506020850135925060408501359150606085013580151581146129a857600080fd5b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff811182821017156129ed576129ed6129b3565b60405290565b600060208284031215612a0557600080fd5b813567ffffffffffffffff80821115612a1d57600080fd5b818401915084601f830112612a3157600080fd5b813581811115612a4357612a436129b3565b604051601f8201601f19908116603f01168101908382118183101715612a6b57612a6b6129b3565b81604052828152876020848701011115612a8457600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208284031215612ab657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417611bb557611bb5612abd565b634e487b7160e01b600052601260045260246000fd5b600082612b1d57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612b5d578160001904821115612b4357612b43612abd565b80851615612b5057918102915b93841c9390800290612b27565b509250929050565b600082612b7457506001611bb5565b81612b8157506000611bb5565b8160018114612b975760028114612ba157612bbd565b6001915050611bb5565b60ff841115612bb257612bb2612abd565b50506001821b611bb5565b5060208310610133831016604e8410600b8410161715612be0575081810a611bb5565b612bea8383612b22565b8060001904821115612bfe57612bfe612abd565b029392505050565b6000612c128383612b65565b9392505050565b634e487b7160e01b600052603260045260246000fd5b60005b83811015612c4a578181015183820152602001612c32565b50506000910152565b60008151808452612c6b816020860160208601612c2f565b601f01601f19169290920160200192915050565b60018060a01b038316815260606020820152600960608201526865786563757465282960b81b608082015260a0604082015260006108e060a0830184612c53565b600081518084526020808501945080840160005b83811015612cf95781516001600160a01b031687529582019590820190600101612cd4565b509495945050505050565b600081518084526020808501945080840160005b83811015612cf957815187529582019590820190600101612d18565b600081518084526020808501808196508360051b8101915082860160005b85811015612d7c578284038952612d6a848351612c53565b98850198935090840190600101612d52565b5091979650505050505050565b60a081526000612d9c60a0830188612cc0565b8281036020840152612dae8188612d04565b90508281036040840152612dc28187612d34565b90508281036060840152612dd68186612d34565b90508281036080840152612dea8185612c53565b98975050505050505050565b602081526000612c126020830184612cc0565b6001600160a01b039586168152602081019490945291909316604083015260ff9283166060830152909116608082015260a00190565b60008251612e51818460208701612c2f565b9190910192915050565b606081526000612e6e6060830186612d34565b8281036020840152612e808186612d34565b91505060018060a01b0383166040830152949350505050565b602080825282518282018190526000919060409081850190868401855b82811015612d7c57815180516001600160a01b031685528601511515868501529284019290850190600101612eb6565b80820180821115611bb557611bb5612abd565b606081526000612f0c6060830186612cc0565b8281036020840152612f1e8186612cc0565b90508281036040840152612f328185612d04565b9695505050505050565b8051612f478161294f565b919050565b600060208284031215612f5e57600080fd5b8151612c128161294f565b805160ff81168114612f4757600080fd5b60006101a08284031215612f8d57600080fd5b612f956129c9565b612f9e83612f3c565b8152612fac60208401612f3c565b6020820152612fbd60408401612f3c565b6040820152612fce60608401612f3c565b6060820152612fdf60808401612f3c565b6080820152612ff060a08401612f3c565b60a082015261300160c08401612f69565b60c082015261301260e08401612f69565b60e08201526101008381015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b602080825282518282018190526000919060409081850190868401855b82811015612d7c57815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0908101519085015260c09093019290850190600101613074565b602080825282518282018190526000919060409081850190868401855b82811015612d7c57815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0808201519086015260c0908101519085015260e090930192908501906001016130ee565b61ffff81811683821602808216919082811461317357613173612abd565b50509291505056fe776974686472617728616464726573732c75696e743235362c616464726573732c75696e743235362c75696e7432353629657865637574655061796c6f616428616464726573732c737472696e672c627974657329a264697066735822122095e8096948d295d2b6b1486a16b3aa8d5e1944dd09adf2cf508fe539299ab5d864736f6c63430008150033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80638a1c73641161010f578063b6966495116100a2578063c189205811610071578063c1892058146104ab578063cc025f7c146104c6578063d45f9d95146104ed578063dca95fbf1461050857600080fd5b8063b69664951461043f578063b788f3a11461045a578063bb09d9b714610475578063bffa7f0f1461049057600080fd5b8063a734f06e116100de578063a734f06e146103db578063aa98df39146103f6578063aae7ae0714610409578063aaff04931461042457600080fd5b80638a1c7364146103775780639d3d2a7814610392578063a4485598146103a5578063a64f5693146103c057600080fd5b8063544dd383116101875780636dc0ae22116101565780636dc0ae22146102ff5780637aadef8b1461031a5780637e2f35fa1461034157806383ba27d81461035c57600080fd5b8063544dd383146102bf578063588c77e6146102da57806361461954146102f557806366760d7d146102fd57600080fd5b80632861c7d1116101c35780632861c7d1146102535780632d2c55651461026e578063308baf3314610289578063349fd186146102a457600080fd5b8063040141e5146101ea5780630bc9136e1461022257806325ad7f4d14610238575b600080fd5b61020573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6040516001600160a01b0390911681526020015b60405180910390f35b61022a602981565b604051908152602001610219565b610205739efde135ca4832abf0408c44c6f5f370eb0f35e881565b6102057352aa899454998be5b000ad077a46bbe360f4e49781565b6102057328849d2b63fa8d361e5fc15cb8abb13019884d0981565b61020573ae7ab96520de3a18e5e111b5eaab095312d7fe8481565b6102057393dd426446b5370f094a1e31f19991aaa6ac0be081565b61020573cbb7c0000ab88b473b1f5afd9ef808440eed33bf81565b610205735c43aac965ff230ac1cf63e924d0153291d78bad81565b6102fd610523565b005b610205730204cd037b2ec03605cfdfe482d8e257c765fa1b81565b6102057f000000000000000000000000000000000000000000000000000000000000000081565b61020573059a94a72451c0ae1cc1ce4bf0db52421bbe821081565b610205739fb7b4477576fe5b32be4c1843afb1e55f251b3381565b61020573324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d81565b61022a6103a0366004612964565b6105cd565b610205737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b6102057397b0b3a8bdefe8cb9563a3c610019ad10db8ad1181565b61020573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6102fd6104043660046129f3565b6108e8565b610205735c20b550819128074fd538edf79791733ccedd1881565b61020573cd5fe23c85820f7b72d0926fc9b05b43e359b7ee81565b61020573264786ef916af64a1db19f513f24a3681734ce9281565b610205734f6f977acdd1177dcd81ab83074855ecb9c2d49e81565b61020573a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b61020573a45f7bd6a5ff45d31aace6bcd3d426d9328cea0181565b61020573dac17f958d2ee523a2206206994597c13d831ec781565b6102057f000000000000000000000000000000000000000000000000000000000000000081565b610205732260fac5e5542a773aa44fbcfedf7c193bc2c59981565b610205739d39a5de30e57443bff2a8307a4256c8797a349781565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105935760405162461bcd60e51b815260206004820152601060248201526f3737ba16bb30b634b216b1b0b63632b960811b60448201526064015b60405180910390fd5b61059b610ca1565b6105a36112f6565b6105ab611449565b6105b361158b565b6105bb611a06565b6105c3611a56565b6105cb611aba565b565b600080841180156105de5750600083115b1561062b5760405162461bcd60e51b815260206004820181905260248201527f626f74682075736420616e6420616d6f756e7420617265206e6f74207a65726f604482015260640161058a565b60007352aa899454998be5b000ad077a46bbe360f4e49763b5c736e4610652600589611b7d565b6040518263ffffffff1660e01b815260040161067091815260200190565b602060405180830381865afa15801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b19190612aa4565b90506000806106bf83611bbb565b90925090506000601273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038b16016106fa575061092e90506012610874565b737f39c581f595b53c5cb19bd0b3f8da6c935e2c9f196001600160a01b038b160161072c5750610abe90506012610874565b73cd5fe23c85820f7b72d0926fc9b05b43e359b7ed196001600160a01b038b160161075e575061099290506012610874565b6001600160a01b038a1673cbb7c0000ab88b473b1f5afd9ef808440eed33bf14806107a557506001600160a01b038a16732260fac5e5542a773aa44fbcfedf7c193bc2c599145b156107b7575061ec5490506008610874565b6001600160a01b038a1673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4814806107fe57506001600160a01b038a1673dac17f958d2ee523a2206206994597c13d831ec7145b1561080f5750600190506006610874565b739d39a5de30e57443bff2a8307a4256c8797a3496196001600160a01b038b16016108405750600190506012610874565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd0b599bdd5b9960ba1b604482015260640161058a565b6000876108815783610883565b845b905089156108b2578061089b8b64e8d4a51000612ad3565b6108a59190612b00565b96505050505050506108e0565b6108bc8184612ad3565b6108c783600a612c06565b6108d68b64e8d4a51000612ad3565b61089b9190612ad3565b949350505050565b3373a45f7bd6a5ff45d31aace6bcd3d426d9328cea01148061091d575033734f6f977acdd1177dcd81ab83074855ecb9c2d49e145b8061093b57503073059a94a72451c0ae1cc1ce4bf0db52421bbe8210145b80610959575030739efde135ca4832abf0408c44c6f5f370eb0f35e8145b80610962575060015b6109a75760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c8b5b9bdd0b585b1b1bddd95960521b604482015260640161058a565b604080516001808252818301909252600090826020808301908036833701905050905060008267ffffffffffffffff8111156109e5576109e56129b3565b604051908082528060200260200182016040528015610a0e578160200160208202803683370190505b50905060008367ffffffffffffffff811115610a2c57610a2c6129b3565b604051908082528060200260200182016040528015610a5f57816020015b6060815260200190600190039081610a4a5790505b50905060008467ffffffffffffffff811115610a7d57610a7d6129b3565b604051908082528060200260200182016040528015610ab057816020015b6060815260200190600190039081610a9b5790505b5090507f000000000000000000000000000000000000000000000000000000000000000084600081518110610ae757610ae7612c19565b60200260200101906001600160a01b031690816001600160a01b031681525050600083600081518110610b1c57610b1c612c19565b6020026020010181815250506040518060600160405280602481526020016131ad6024913982600081518110610b5457610b54612c19565b60209081029190910181019190915260408051600081529182018152610b9d917f0000000000000000000000000000000000000000000000000000000000000000918101612c7f565b60405160208183030381529060405281600081518110610bbf57610bbf612c19565b6020908102919091010152604051636d4ab48d60e11b8152600090730204cd037b2ec03605cfdfe482d8e257c765fa1b9063da95691a90610c0c9088908890889088908e90600401612d89565b6020604051808303816000875af1158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f9190612aa4565b905060298114610c985760405162461bcd60e51b815260206004820152601460248201527350524f504f53414c5f49535f4e4f545f53414d4560601b604482015260640161058a565b50505050505050565b60408051600480825260a082019092526000916020820160808036833701905050905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81600081518110610cec57610cec612c19565b60200260200101906001600160a01b031690816001600160a01b031681525050737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081600181518110610d3457610d34612c19565b60200260200101906001600160a01b031690816001600160a01b03168152505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881600281518110610d7c57610d7c612c19565b60200260200101906001600160a01b031690816001600160a01b03168152505073dac17f958d2ee523a2206206994597c13d831ec781600381518110610dc457610dc4612c19565b6001600160a01b039092166020928302919091019091015260405163564315fd60e11b81527352aa899454998be5b000ad077a46bbe360f4e4979063ac862bfa90610e13908490600401612df6565b600060405180830381600087803b158015610e2d57600080fd5b505af1158015610e41573d6000803e3d6000fd5b506000935060049250610e52915050565b604051908082528060200260200182016040528015610e8557816020015b6060815260200190600190039081610e705790505b5060408051600480825260a0820190925291925060009190816020015b6060815260200190600190039081610ea2579050509050600060405180606001604052806031815260200161317c6031913990506040518060400160405280600781526020016642415349432d4160c81b81525083600081518110610f0957610f09612c19565b60200260200101819052508073ae7ab96520de3a18e5e111b5eaab095312d7fe84600019734f6f977acdd1177dcd81ab83074855ecb9c2d49e600080604051602401610f59959493929190612e09565b60408051601f198184030181529082905291610f7491612e3f565b60405180910390206001600160e01b0319166020820180516001600160e01b03838183161783525050505082600081518110610fb257610fb2612c19565b60200260200101819052506040518060400160405280600781526020016642415349432d4160c81b81525083600181518110610ff057610ff0612c19565b602002602001018190525080737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0600019734f6f977acdd1177dcd81ab83074855ecb9c2d49e600080604051602401611040959493929190612e09565b60408051601f19818403018152908290529161105b91612e3f565b60405180910390206001600160e01b0319166020820180516001600160e01b0383818316178352505050508260018151811061109957611099612c19565b60200260200101819052506040518060400160405280600781526020016642415349432d4160c81b815250836002815181106110d7576110d7612c19565b602002602001018190525080732260fac5e5542a773aa44fbcfedf7c193bc2c599600019734f6f977acdd1177dcd81ab83074855ecb9c2d49e600080604051602401611127959493929190612e09565b60408051601f19818403018152908290529161114291612e3f565b60405180910390206001600160e01b0319166020820180516001600160e01b0383818316178352505050508260028151811061118057611180612c19565b60200260200101819052506040518060400160405280600781526020016642415349432d4160c81b815250836003815181106111be576111be612c19565b60200260200101819052508073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2600019734f6f977acdd1177dcd81ab83074855ecb9c2d49e60008060405160240161120e959493929190612e09565b60408051601f19818403018152908290529161122991612e3f565b60405180910390206001600160e01b0319166020820180516001600160e01b0383818316178352505050508260038151811061126757611267612c19565b60209081029190910101526040516324c1324d60e21b81527328849d2b63fa8d361e5fc15cb8abb13019884d0990639304c934906112ad90869086903090600401612e5b565b6020604051808303816000875af11580156112cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f09190612aa4565b50505050565b60408051600280825260608201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161130e579050509050604051806040016040528073b5af15a931da1b1a7b8dcf6e2cd31c8a3dd1e1346001600160a01b03168152602001600015158152508160008151811061137f5761137f612c19565b602002602001018190525060405180604001604052807382a2a351aae9c35e7ca17d05367cba533caa21d76001600160a01b0316815260200160011515815250816001815181106113d2576113d2612c19565b6020908102919091010152604051633f66feff60e01b81527352aa899454998be5b000ad077a46bbe360f4e49790633f66feff90611414908490600401612e99565b600060405180830381600087803b15801561142e57600080fd5b505af1158015611442573d6000803e3d6000fd5b5050505050565b73324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d637faa1d2161146d6015611db0565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152734605fc1e6a49d92d97179407e823023f06d5aa0e602482015260006044820152606401600060405180830381600087803b1580156114cf57600080fd5b505af11580156114e3573d6000803e3d6000fd5b5050505073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d6001600160a01b0316637faa1d216115146016611db0565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015273ba379afc2829cbf5dea14b8bc135a820e144456d6024820152600060448201526064015b600060405180830381600087803b15801561157757600080fd5b505af11580156112f0573d6000803e3d6000fd5b60408051600280825260608201835260009260208301908036833750506040805160028082526060820183529394506000939092509060208301908036833750506040805160028082526060820183529394506000939092509060208301908036833701905050604051635fd6196560e01b815273512ac5b6cf04f042486a198edb3c28c6f2c6285a6004820152909150739fb7b4477576fe5b32be4c1843afb1e55f251b3390635fd6196590602401600060405180830381600087803b15801561165557600080fd5b505af1158015611669573d6000803e3d6000fd5b5050604051636eb1769f60e11b815273264786ef916af64a1db19f513f24a3681734ce926004820152739fb7b4477576fe5b32be4c1843afb1e55f251b3360248201526000925073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48915063dd62ed3e90604401602060405180830381865afa1580156116ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117119190612aa4565b9050739fb7b4477576fe5b32be4c1843afb1e55f251b338460008151811061173b5761173b612c19565b60200260200101906001600160a01b031690816001600160a01b03168152505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb488360008151811061178357611783612c19565b6001600160a01b03909216602092830291909101909101526117aa81643a35294400612ee6565b826000815181106117bd576117bd612c19565b602090810291909101015250604051635fd6196560e01b815273512ac5b6cf04f042486a198edb3c28c6f2c6285a6004820152735c20b550819128074fd538edf79791733ccedd1890635fd6196590602401600060405180830381600087803b15801561182957600080fd5b505af115801561183d573d6000803e3d6000fd5b5050604051636eb1769f60e11b815273264786ef916af64a1db19f513f24a3681734ce926004820152735c20b550819128074fd538edf79791733ccedd1860248201526000925073dac17f958d2ee523a2206206994597c13d831ec7915063dd62ed3e90604401602060405180830381865afa1580156118c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e59190612aa4565b9050735c20b550819128074fd538edf79791733ccedd188460018151811061190f5761190f612c19565b60200260200101906001600160a01b031690816001600160a01b03168152505073dac17f958d2ee523a2206206994597c13d831ec78360018151811061195757611957612c19565b6001600160a01b039092166020928302919091019091015261197e81643a35294400612ee6565b8260018151811061199157611991612c19565b6020908102919091010152506040516303e8046160e01b815273264786ef916af64a1db19f513f24a3681734ce92906303e80461906119d890869086908690600401612ef9565b600060405180830381600087803b1580156119f257600080fd5b505af1158015610c98573d6000803e3d6000fd5b611a12601d6015611e27565b50611a1f601e6016611e27565b50611a2c601c6017611e27565b50611a39601f6018611e27565b50611a4660216019611e27565b50611a536020601a611e27565b50565b611a60600161244e565b611a6a600261244e565b611a74600361244e565b611a7e600461244e565b611a88600561244e565b611a92600661244e565b611a9c600761244e565b611aa6600861244e565b611ab0600961244e565b6105cb600a61244e565b60405163081607ff60e11b8152734f6f977acdd1177dcd81ab83074855ecb9c2d49e60048201527397b0b3a8bdefe8cb9563a3c610019ad10db8ad119063102c0ffe90602401600060405180830381600087803b158015611b1a57600080fd5b505af1158015611b2e573d6000803e3d6000fd5b505060405163081607ff60e11b815273a6aec494aa19dc910944e2374e9ea159dc919c5960048201527397b0b3a8bdefe8cb9563a3c610019ad10db8ad11925063102c0ffe915060240161155d565b604080516001600160a01b03831660208201529081018390526000906060016040516020818303038152906040528051906020012090505b92915050565b67ffffffffffffffff605b82901c811690609b83901c16811580611bdd575080155b15611c0057604051636a86ba8960e11b815262011171600482015260240161058a565b61ffff8316603a84901c6401ffffffff16428181039160ea87901c617fff16911480611c2a575082155b80611c355750806001145b15611c4257505050915091565b64496cebb80084840283020484019350617fff60db87901c16925082600103611c6d57505050915091565b82600116600103611cc25760019290921c91826c7e37be2022c0914b268000000081611c9b57611c9b612aea565b049250612710601e87901c613fff166b033b2e3c9fd0803ce8000000850102049250611cef565b60019290921c916305f5e100601e87901c613fff166127108501026b033b2e3c9fd0803ce8000000020492505b80600116600103611d265760011c61271081016b033b2e3c9fd0803ce8000000820281611d1e57611d1e612aea565b049050611d5c565b60011c61271081016b033b2e3c9fd0803ce8000000820281611d4a57611d4a612aea565b046b033b2e3c9fd0803ce80000000390505b760a70c3c40a64e6c51999090b65f67d92400000000000008382026127100261ffff881691900402601087901c613fff16612710030292506801b5a660ea44b8000085840283020485019450505050915091565b60405163735e935160e11b81526004810182905260009073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a290602401602060405180830381865afa158015611e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb59190612f4c565b60405163735e935160e11b81526004810183905260009073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a290602401602060405180830381865afa158015611e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9e9190612f4c565b60405163735e935160e11b815260048101849052909150600090611f219073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a290602401602060405180830381865afa158015611ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1c9190612f4c565b612740565b805160208201516040808401516060850151608086015160a087015160c088015160e089015195516354b04ef560e01b81526004810198909852602488019690965260448701939093526064860191909152608485015260a484015260c483019190915260e48201529091506001600160a01b038316906354b04ef59061010401600060405180830381600087803b158015611fbc57600080fd5b505af1158015611fd0573d6000803e3d6000fd5b505050506000826001600160a01b031663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa158015612015573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120399190612f7a565b6080015190506000836001600160a01b031663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa158015612080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a49190612f7a565b60a00151905060007352aa899454998be5b000ad077a46bbe360f4e49763b5c736e46120d26008888761289d565b6040518263ffffffff1660e01b81526004016120f091815260200190565b602060405180830381865afa15801561210d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121319190612aa4565b60408051600180825281830190925291925060009190816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a0820152825260001990920191018161214c5790505090506040518060c00160405280876001600160a01b03168152602001856001600160a01b031681526020018360011660ff168152602001613fff60a285901c16815260200162ffffff60b085901c1681526020016121f3866000627270e060016105cd565b8152508160008151811061220957612209612c19565b60209081029190910101526040516301635db560e11b81527352aa899454998be5b000ad077a46bbe360f4e497906302c6bb6a9061224b908490600401613057565b600060405180830381600087803b15801561226557600080fd5b505af1158015612279573d6000803e3d6000fd5b50505050505060007352aa899454998be5b000ad077a46bbe360f4e4976001600160a01b031663b5c736e46122b06009888661289d565b6040518263ffffffff1660e01b81526004016122ce91815260200190565b602060405180830381865afa1580156122eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230f9190612aa4565b60408051600180825281830190925291925060009190816020015b6123326128fd565b81526020019060019003908161232a5750506040805160e0810182526001600160a01b03808a16825286166020820152600185169181019190915260a284901c613fff16606082015260b084901c62ffffff16608082015290915060a081016103ff60d085901c1660c885901c60ff161b81526020016123ba856000630bebc20060006105cd565b815250816000815181106123d0576123d0612c19565b602090810291909101015260405162dc47c360e11b81527352aa899454998be5b000ad077a46bbe360f4e497906301b88f86906124119084906004016130d1565b600060405180830381600087803b15801561242b57600080fd5b505af115801561243f573d6000803e3d6000fd5b50505050505050505092915050565b60405163735e935160e11b81526004810182905260009073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a290602401602060405180830381865afa1580156124a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c59190612f4c565b90506000816001600160a01b031663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa158015612508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252c9190612f7a565b60a00151905060007352aa899454998be5b000ad077a46bbe360f4e49763b5c736e461255a6009868661289d565b6040518263ffffffff1660e01b815260040161257891815260200190565b602060405180830381865afa158015612595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b99190612aa4565b9050600981901c66ffffffffffffff16600182901c60ff161b60006125e284826103e8816105cd565b60408051600180825281830190925291925060009190816020015b6126056128fd565b8152602001906001900390816125fd5790505090506040518060e00160405280876001600160a01b03168152602001866001600160a01b031681526020018560011660ff168152602001613fff60a287901c16815260200162ffffff60b087901c1681526020018385106126795783612692565b6103e8612688866103e9612ad3565b6126929190612b00565b815260200160646126a4866069612ad3565b6126ae9190612b00565b815250816000815181106126c4576126c4612c19565b602090810291909101015260405162dc47c360e11b81527352aa899454998be5b000ad077a46bbe360f4e497906301b88f86906127059084906004016130d1565b600060405180830381600087803b15801561271f57600080fd5b505af1158015612733573d6000803e3d6000fd5b5050505050505050505050565b61278860405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051632d71cdb960e21b8152600160048201526000906001600160a01b0384169063b5c736e490602401602060405180830381865afa1580156127d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f49190612aa4565b61ffff8082168452601082901c166020808501919091529091506128209082901c6103ff16600a613155565b61ffff16604083015261283c602a82901c6103ff16600a613155565b61ffff166060830152612858603482901c6103ff16600a613155565b61ffff166080830152612874603e82901c6103ff16600a613155565b61ffff1660a08301526103ff604882901c811660c084015260529190911c1660e0820152919050565b604080516001600160a01b039384166020808301919091528183019590955281518082038301815260608201835280519086012092909316608084015260a0808401929092528051808403909201825260c0909201909152805191012090565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600060ff168152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0381168114611a5357600080fd5b6000806000806080858703121561297a57600080fd5b84356129858161294f565b93506020850135925060408501359150606085013580151581146129a857600080fd5b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff811182821017156129ed576129ed6129b3565b60405290565b600060208284031215612a0557600080fd5b813567ffffffffffffffff80821115612a1d57600080fd5b818401915084601f830112612a3157600080fd5b813581811115612a4357612a436129b3565b604051601f8201601f19908116603f01168101908382118183101715612a6b57612a6b6129b3565b81604052828152876020848701011115612a8457600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208284031215612ab657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417611bb557611bb5612abd565b634e487b7160e01b600052601260045260246000fd5b600082612b1d57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612b5d578160001904821115612b4357612b43612abd565b80851615612b5057918102915b93841c9390800290612b27565b509250929050565b600082612b7457506001611bb5565b81612b8157506000611bb5565b8160018114612b975760028114612ba157612bbd565b6001915050611bb5565b60ff841115612bb257612bb2612abd565b50506001821b611bb5565b5060208310610133831016604e8410600b8410161715612be0575081810a611bb5565b612bea8383612b22565b8060001904821115612bfe57612bfe612abd565b029392505050565b6000612c128383612b65565b9392505050565b634e487b7160e01b600052603260045260246000fd5b60005b83811015612c4a578181015183820152602001612c32565b50506000910152565b60008151808452612c6b816020860160208601612c2f565b601f01601f19169290920160200192915050565b60018060a01b038316815260606020820152600960608201526865786563757465282960b81b608082015260a0604082015260006108e060a0830184612c53565b600081518084526020808501945080840160005b83811015612cf95781516001600160a01b031687529582019590820190600101612cd4565b509495945050505050565b600081518084526020808501945080840160005b83811015612cf957815187529582019590820190600101612d18565b600081518084526020808501808196508360051b8101915082860160005b85811015612d7c578284038952612d6a848351612c53565b98850198935090840190600101612d52565b5091979650505050505050565b60a081526000612d9c60a0830188612cc0565b8281036020840152612dae8188612d04565b90508281036040840152612dc28187612d34565b90508281036060840152612dd68186612d34565b90508281036080840152612dea8185612c53565b98975050505050505050565b602081526000612c126020830184612cc0565b6001600160a01b039586168152602081019490945291909316604083015260ff9283166060830152909116608082015260a00190565b60008251612e51818460208701612c2f565b9190910192915050565b606081526000612e6e6060830186612d34565b8281036020840152612e808186612d34565b91505060018060a01b0383166040830152949350505050565b602080825282518282018190526000919060409081850190868401855b82811015612d7c57815180516001600160a01b031685528601511515868501529284019290850190600101612eb6565b80820180821115611bb557611bb5612abd565b606081526000612f0c6060830186612cc0565b8281036020840152612f1e8186612cc0565b90508281036040840152612f328185612d04565b9695505050505050565b8051612f478161294f565b919050565b600060208284031215612f5e57600080fd5b8151612c128161294f565b805160ff81168114612f4757600080fd5b60006101a08284031215612f8d57600080fd5b612f956129c9565b612f9e83612f3c565b8152612fac60208401612f3c565b6020820152612fbd60408401612f3c565b6040820152612fce60608401612f3c565b6060820152612fdf60808401612f3c565b6080820152612ff060a08401612f3c565b60a082015261300160c08401612f69565b60c082015261301260e08401612f69565b60e08201526101008381015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b602080825282518282018190526000919060409081850190868401855b82811015612d7c57815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0908101519085015260c09093019290850190600101613074565b602080825282518282018190526000919060409081850190868401855b82811015612d7c57815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0808201519086015260c0908101519085015260e090930192908501906001016130ee565b61ffff81811683821602808216919082811461317357613173612abd565b50509291505056fe776974686472617728616464726573732c75696e743235362c616464726573732c75696e743235362c75696e7432353629657865637574655061796c6f616428616464726573732c737472696e672c627974657329a264697066735822122095e8096948d295d2b6b1486a16b3aa8d5e1944dd09adf2cf508fe539299ab5d864736f6c63430008150033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"errorId_","type":"uint256"}],"name":"FluidLiquidityCalcsError","type":"error"},{"inputs":[],"name":"ADDRESS_THIS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DSA_CONNECTORS_V2","outputs":[{"internalType":"contract IDSAConnectorsV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FLUID_DEX_FACTORY","outputs":[{"internalType":"contract IFluidDexFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FLUID_RESERVE","outputs":[{"internalType":"contract IFluidReserveContract","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"F_USDC","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"F_USDT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GOVERNOR","outputs":[{"internalType":"contract IGovernorBravo","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LIQUIDITY","outputs":[{"internalType":"contract IFluidLiquidityAdmin","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSAL_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG_2","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG_3","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TEAM_MULTISIG","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TIMELOCK","outputs":[{"internalType":"contract ITimelock","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TREASURY","outputs":[{"internalType":"contract IDSAV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"USDC_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"USDT_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VAULT_T1_FACTORY","outputs":[{"internalType":"contract IFluidVaultT1Factory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cbBTC_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"execute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"amountInUSD","type":"uint256"},{"internalType":"bool","name":"isSupply","type":"bool"}],"name":"getRawAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"description","type":"string"}],"name":"propose","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"sUSDe_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"verifyProposal","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wBTC_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"weETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wstETH_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}