{"metadata":"{\"defaultCompiler\":{\"version\":\"0.7.3\"},\"sources\":{\"contracts/payloads/IGP44/PayloadIGP44.sol\":{\"content\":\"pragma solidity ^0.8.21;\\npragma experimental ABIEncoderV2;\\n\\nimport {LiquidityCalcs} from \\\"../libraries/liquidityCalcs.sol\\\";\\nimport {LiquiditySlotsLink} from \\\"../libraries/liquiditySlotsLink.sol\\\";\\n\\ninterface IGovernorBravo {\\n    function _acceptAdmin() external;\\n\\n    function _setVotingDelay(uint256 newVotingDelay) external;\\n\\n    function _setVotingPeriod(uint256 newVotingPeriod) external;\\n\\n    function _acceptAdminOnTimelock() external;\\n\\n    function _setImplementation(address implementation_) external;\\n\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) external returns (uint256);\\n\\n    function admin() external view returns (address);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function timelock() external view returns (address);\\n\\n    function votingDelay() external view returns (uint256);\\n\\n    function votingPeriod() external view returns (uint256);\\n}\\n\\ninterface ITimelock {\\n    function acceptAdmin() external;\\n\\n    function setDelay(uint256 delay_) external;\\n\\n    function setPendingAdmin(address pendingAdmin_) external;\\n\\n    function queueTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) external returns (bytes32);\\n\\n    function executeTransaction(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) external payable returns (bytes memory);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function delay() external view returns (uint256);\\n}\\n\\ninterface AdminModuleStructs {\\n    struct AddressBool {\\n        address addr;\\n        bool value;\\n    }\\n\\n    struct AddressUint256 {\\n        address addr;\\n        uint256 value;\\n    }\\n\\n    struct RateDataV1Params {\\n        address token;\\n        uint256 kink;\\n        uint256 rateAtUtilizationZero;\\n        uint256 rateAtUtilizationKink;\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    struct RateDataV2Params {\\n        address token;\\n        uint256 kink1;\\n        uint256 kink2;\\n        uint256 rateAtUtilizationZero;\\n        uint256 rateAtUtilizationKink1;\\n        uint256 rateAtUtilizationKink2;\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    struct TokenConfig {\\n        address token;\\n        uint256 fee;\\n        uint256 threshold;\\n    }\\n\\n    struct UserSupplyConfig {\\n        address user;\\n        address token;\\n        uint8 mode;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseWithdrawalLimit;\\n    }\\n\\n    struct UserBorrowConfig {\\n        address user;\\n        address token;\\n        uint8 mode;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseDebtCeiling;\\n        uint256 maxDebtCeiling;\\n    }\\n}\\n\\ninterface IFluidLiquidityAdmin {\\n    /// @notice adds/removes auths. Auths generally could be contracts which can have restricted actions defined on contract.\\n    ///         auths can be helpful in reducing governance overhead where it's not needed.\\n    /// @param authsStatus_ array of structs setting allowed status for an address.\\n    ///                     status true => add auth, false => remove auth\\n    function updateAuths(\\n        AdminModuleStructs.AddressBool[] calldata authsStatus_\\n    ) external;\\n\\n    /// @notice adds/removes guardians. Only callable by Governance.\\n    /// @param guardiansStatus_ array of structs setting allowed status for an address.\\n    ///                         status true => add guardian, false => remove guardian\\n    function updateGuardians(\\n        AdminModuleStructs.AddressBool[] calldata guardiansStatus_\\n    ) external;\\n\\n    /// @notice changes the revenue collector address (contract that is sent revenue). Only callable by Governance.\\n    /// @param revenueCollector_  new revenue collector address\\n    function updateRevenueCollector(address revenueCollector_) external;\\n\\n    /// @notice changes current status, e.g. for pausing or unpausing all user operations. Only callable by Auths.\\n    /// @param newStatus_ new status\\n    ///        status = 2 -> pause, status = 1 -> resume.\\n    function changeStatus(uint256 newStatus_) external;\\n\\n    /// @notice                  update tokens rate data version 1. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV1Params with rate data to set for each token\\n    function updateRateDataV1s(\\n        AdminModuleStructs.RateDataV1Params[] calldata tokensRateData_\\n    ) external;\\n\\n    /// @notice                  update tokens rate data version 2. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV2Params with rate data to set for each token\\n    function updateRateDataV2s(\\n        AdminModuleStructs.RateDataV2Params[] calldata tokensRateData_\\n    ) external;\\n\\n    /// @notice updates token configs: fee charge on borrowers interest & storage update utilization threshold.\\n    ///         Only callable by Auths.\\n    /// @param tokenConfigs_ contains token address, fee & utilization threshold\\n    function updateTokenConfigs(\\n        AdminModuleStructs.TokenConfig[] calldata tokenConfigs_\\n    ) external;\\n\\n    /// @notice updates user classes: 0 is for new protocols, 1 is for established protocols.\\n    ///         Only callable by Auths.\\n    /// @param userClasses_ struct array of uint256 value to assign for each user address\\n    function updateUserClasses(\\n        AdminModuleStructs.AddressUint256[] calldata userClasses_\\n    ) external;\\n\\n    /// @notice sets user supply configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userSupplyConfigs_ struct array containing user supply config, see `UserSupplyConfig` struct for more info\\n    function updateUserSupplyConfigs(\\n        AdminModuleStructs.UserSupplyConfig[] memory userSupplyConfigs_\\n    ) external;\\n\\n    /// @notice setting user borrow configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userBorrowConfigs_ struct array containing user borrow config, see `UserBorrowConfig` struct for more info\\n    function updateUserBorrowConfigs(\\n        AdminModuleStructs.UserBorrowConfig[] memory userBorrowConfigs_\\n    ) external;\\n\\n    /// @notice pause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to pause operations for\\n    /// @param supplyTokens_  token addresses to pause withdrawals for\\n    /// @param borrowTokens_  token addresses to pause borrowings for\\n    function pauseUser(\\n        address user_,\\n        address[] calldata supplyTokens_,\\n        address[] calldata borrowTokens_\\n    ) external;\\n\\n    /// @notice unpause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to unpause operations for\\n    /// @param supplyTokens_  token addresses to unpause withdrawals for\\n    /// @param borrowTokens_  token addresses to unpause borrowings for\\n    function unpauseUser(\\n        address user_,\\n        address[] calldata supplyTokens_,\\n        address[] calldata borrowTokens_\\n    ) external;\\n\\n    /// @notice         collects revenue for tokens to configured revenueCollector address.\\n    /// @param tokens_  array of tokens to collect revenue for\\n    /// @dev            Note that this can revert if token balance is < revenueAmount (utilization > 100%)\\n    function collectRevenue(address[] calldata tokens_) external;\\n\\n    /// @notice gets the current updated exchange prices for n tokens and updates all prices, rates related data in storage.\\n    /// @param tokens_ tokens to update exchange prices for\\n    /// @return supplyExchangePrices_ new supply rates of overall system for each token\\n    /// @return borrowExchangePrices_ new borrow rates of overall system for each token\\n    function updateExchangePrices(\\n        address[] calldata tokens_\\n    )\\n        external\\n        returns (\\n            uint256[] memory supplyExchangePrices_,\\n            uint256[] memory borrowExchangePrices_\\n        );\\n\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n}\\n\\ninterface FluidVaultFactory {\\n    /// @notice                         Sets an address as allowed vault deployment logic (`deploymentLogic_`) contract or not.\\n    ///                                 This function can only be called by the owner.\\n    /// @param deploymentLogic_         The address of the vault deployment logic contract to be set.\\n    /// @param allowed_                 A boolean indicating whether the specified address is allowed to deploy new type of vault.\\n    function setVaultDeploymentLogic(\\n        address deploymentLogic_,\\n        bool allowed_\\n    ) external;\\n\\n    /// @notice                         Sets an address (`vaultAuth_`) as allowed vault authorization or not for a specific vault (`vault_`).\\n    ///                                 This function can only be called by the owner.\\n    /// @param vault_                   The address of the vault for which the authorization is being set.\\n    /// @param vaultAuth_               The address to be set as vault authorization.\\n    /// @param allowed_                 A boolean indicating whether the specified address is allowed to update the specific vault config.\\n    function setVaultAuth(\\n        address vault_,\\n        address vaultAuth_,\\n        bool allowed_\\n    ) external;\\n\\n    /// @notice                         Computes the address of a vault based on its given ID (`vaultId_`).\\n    /// @param vaultId_                 The ID of the vault.\\n    /// @return vault_                  Returns the computed address of the vault.\\n    function getVaultAddress(\\n        uint256 vaultId_\\n    ) external view returns (address vault_);\\n}\\n\\ninterface FluidDexFactory {\\n    /// @notice                         Computes the address of a dex based on its given ID (`dexId_`).\\n    /// @param dexId_                   The ID of the dex.\\n    /// @return dex_                    Returns the computed address of the dex.\\n    function getDexAddress(uint256 dexId_) external view returns (address dex_);\\n}\\n\\ninterface ILite {\\n    function setAdmin(address newAdmin) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function removeImplementation(address implementation_) external;\\n\\n    function addImplementation(\\n        address implementation_,\\n        bytes4[] calldata sigs_\\n    ) external;\\n\\n    function setDummyImplementation(address newDummyImplementation_) external;\\n\\n    function updateMaxRiskRatio(\\n        uint8[] memory protocolId_,\\n        uint256[] memory newRiskRatio_\\n    ) external;\\n\\n    function updateAggrMaxVaultRatio(uint256 newAggrMaxVaultRatio_) external;\\n\\n    function getImplementationSigs(\\n        address impl_\\n    ) external view returns (bytes4[] memory);\\n}\\n\\ninterface IProxy {\\n    function setAdmin(address newAdmin_) external;\\n\\n    function setDummyImplementation(address newDummyImplementation_) external;\\n\\n    function addImplementation(\\n        address implementation_,\\n        bytes4[] calldata sigs_\\n    ) external;\\n\\n    function removeImplementation(address implementation_) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function getDummyImplementation() external view returns (address);\\n\\n    function getImplementationSigs(\\n        address impl_\\n    ) external view returns (bytes4[] memory);\\n\\n    function getSigsImplementation(bytes4 sig_) external view returns (address);\\n\\n    function readFromStorage(\\n        bytes32 slot_\\n    ) external view returns (uint256 result_);\\n}\\n\\ninterface ILiteSigs {\\n    // Claim Module\\n    function claimFromAaveV3Lido() external;\\n\\n    // Leverage Dex Module \\n    function leverageDexRefinance(\\n        uint8 protocolId_,\\n        uint256 route_,\\n        uint256 wstETHflashAmount_,\\n        uint256 wETHBorrowAmount_,\\n        uint256 withdrawAmount_,\\n        int256 perfectColShares_,\\n        int256 colToken0MinMax_, // if +, max to deposit, if -, min to withdraw\\n        int256 colToken1MinMax_, // if +, max to deposit, if -, min to withdraw\\n        int256 perfectDebtShares_,\\n        int256 debtToken0MinMax_, // if +, min to borrow, if -, max to payback\\n        int256 debtToken1MinMax_ // if +, min to borrow, if -, max to payback\\n    )\\n        external\\n        returns (uint256 ratioFromProtocol_, uint256 ratioToProtocol_);\\n\\n    // Unwind Dex Module\\n    function unwindDexRefinance(\\n        uint8 protocolId_,\\n        uint256 route_,\\n        uint256 wstETHflashAmount_,\\n        uint256 wETHPaybackAmount_,\\n        uint256 withdrawAmount_,\\n        int256 perfectColShares_,\\n        int256 colToken0MinMax_, // if +, max to deposit, if -, min to withdraw\\n        int256 colToken1MinMax_, // if +, max to deposit, if -, min to withdraw\\n        int256 perfectDebtShares_,\\n        int256 debtToken0MinMax_, // if +, min to borrow, if -, max to payback\\n        int256 debtToken1MinMax_ // if +, min to borrow, if -, max to payback\\n    )\\n        external\\n        returns (uint256 ratioFromProtocol_, uint256 ratioToProtocol_);\\n\\n    // View Module\\n    function getRatioFluidDex(\\n        uint256 stEthPerWsteth_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 wstEthColAmount_,\\n            uint256 stEthColAmount_,\\n            uint256 ethColAmount_,\\n            uint256 wstEthDebtAmount_,\\n            uint256 stEthDebtAmount_,\\n            uint256 ethDebtAmount_,\\n            uint256 ratio_\\n        );\\n}\\n\\ncontract PayloadIGP44 {\\n    uint256 public constant PROPOSAL_ID = 44;\\n\\n    address public constant PROPOSER =\\n        0xA45f7bD6A5Ff45D31aaCE6bCD3d426D9328cea01;\\n    address public constant PROPOSER_AVO_MULTISIG =\\n        0x059a94a72451c0ae1Cc1cE4bf0Db52421Bbe8210;\\n    address public constant PROPOSER_AVO_MULTISIG_2 =\\n        0x9efdE135CA4832AbF0408c44c6f5f370eB0f35e8;\\n    address public constant PROPOSER_AVO_MULTISIG_3 =\\n        0x5C43AAC965ff230AC1cF63e924D0153291D78BaD;\\n\\n    IGovernorBravo public constant GOVERNOR =\\n        IGovernorBravo(0x0204Cd037B2ec03605CFdFe482D8e257C765fA1B);\\n    ITimelock public constant TIMELOCK =\\n        ITimelock(0x2386DC45AdDed673317eF068992F19421B481F4c);\\n\\n    address public constant TEAM_MULTISIG =\\n        0x4F6F977aCDD1177DCD81aB83074855EcB9C2D49e;\\n\\n    address public immutable ADDRESS_THIS;\\n\\n    IFluidLiquidityAdmin public constant LIQUIDITY =\\n        IFluidLiquidityAdmin(0x52Aa899454998Be5b000Ad077a46Bbe360F4e497);\\n\\n    FluidVaultFactory public constant VAULT_FACTORY =\\n        FluidVaultFactory(0x324c5Dc1fC42c7a4D43d92df1eBA58a54d13Bf2d);\\n    FluidDexFactory public constant DEX_FACTORY =\\n        FluidDexFactory(0xF9b539Cd37Fc81bBEA1F078240d16b988BBae073);\\n\\n    ILite public constant LITE =\\n        ILite(0xA0D3707c569ff8C87FA923d3823eC5D81c98Be78);\\n\\n    address internal constant ETH_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant wstETH_ADDRESS =\\n        0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\n    address internal constant weETH_ADDRESS =\\n        0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee;\\n\\n    address internal constant USDC_ADDRESS =\\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT_ADDRESS =\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal constant sUSDe_ADDRESS =\\n        0x9D39A5DE30e57443BfF2A8307A4256c8797A3497;\\n\\n    address internal constant WBTC_ADDRESS =\\n        0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    address internal constant cbBTC_ADDRESS =\\n        0xcbB7C0000aB88B473b1f5aFd9ef808440eed33Bf;\\n\\n    struct Dex {\\n        address dex;\\n        address tokenA;\\n        address tokenB;\\n        bool smartCollateral;\\n        bool smartDebt;\\n        uint256 baseWithdrawalLimitInUSD;\\n        uint256 baseBorrowLimitInUSD;\\n        uint256 maxBorrowLimitInUSD;\\n    }\\n\\n    enum TYPE {\\n        TYPE_2,\\n        TYPE_3,\\n        TYPE_4\\n    }\\n\\n    struct Vault {\\n        address vault;\\n        TYPE vaultType;\\n        address supplyToken;\\n        address borrowToken;\\n    }\\n\\n    constructor() {\\n        ADDRESS_THIS = address(this);\\n    }\\n\\n    function propose(string memory description) external {\\n        require(\\n            msg.sender == PROPOSER ||\\n                msg.sender == TEAM_MULTISIG ||\\n                address(this) == PROPOSER_AVO_MULTISIG ||\\n                address(this) == PROPOSER_AVO_MULTISIG_2 ||\\n                address(PROPOSER_AVO_MULTISIG_3) == PROPOSER_AVO_MULTISIG_3,\\n            \\\"msg.sender-not-allowed\\\"\\n        );\\n\\n        uint256 totalActions = 1;\\n        address[] memory targets = new address[](totalActions);\\n        uint256[] memory values = new uint256[](totalActions);\\n        string[] memory signatures = new string[](totalActions);\\n        bytes[] memory calldatas = new bytes[](totalActions);\\n\\n        // Action 1: call executePayload on timelock contract to execute payload related to Fluid and Lite\\n        targets[0] = address(TIMELOCK);\\n        values[0] = 0;\\n        signatures[0] = \\\"executePayload(address,string,bytes)\\\";\\n        calldatas[0] = abi.encode(ADDRESS_THIS, \\\"execute()\\\", abi.encode());\\n\\n        uint256 proposedId = GOVERNOR.propose(\\n            targets,\\n            values,\\n            signatures,\\n            calldatas,\\n            description\\n        );\\n\\n        require(proposedId == PROPOSAL_ID, \\\"PROPOSAL_IS_NOT_SAME\\\");\\n    }\\n\\n    function execute() external {\\n        require(address(this) == address(TIMELOCK), \\\"not-valid-caller\\\");\\n\\n        // Action 1: Set supply and borrow limit for Dexes on Liquidity Layer\\n        action1();\\n\\n        // Action 2: Set Vault limits on liquidity layer and remove team multisig as auth on vaultFactory\\n        action2();\\n\\n        // Action 3: Update Liquidity User Module Implementation\\n        action3();\\n\\n        // Action 4: Adjust market rates for wstETH, WBTC & cbBTC\\n        action4();\\n\\n        // Action 5: Update iETHv2 Lite Vault to Support wstETH-ETH dex\\n        action5();\\n    }\\n\\n    function verifyProposal() external view {}\\n\\n    /**\\n     * |\\n     * |     Proposal Payload Actions      |\\n     * |__________________________________\\n     */\\n\\n    /// @notice Action 1: Set supply and borrow limit for Dexes on Liquidity Layer\\n    function action1() internal {\\n        {\\n            Dex memory DEX_wstETH_ETH = Dex({\\n                dex: getDexAddress(1),\\n                tokenA: wstETH_ADDRESS,\\n                tokenB: ETH_ADDRESS,\\n                smartCollateral: true,\\n                smartDebt: true,\\n                baseWithdrawalLimitInUSD: 12_000_000, // $12M\\n                baseBorrowLimitInUSD: 12_000_000, // $12M\\n                maxBorrowLimitInUSD: 25_000_000 // $25M\\n            });\\n            setDexLimits(DEX_wstETH_ETH); // Smart Collateral & Smart Debt\\n        }\\n\\n        {\\n            Dex memory DEX_USDC_USDT = Dex({\\n                dex: getDexAddress(2),\\n                tokenA: USDC_ADDRESS,\\n                tokenB: USDT_ADDRESS,\\n                smartCollateral: false,\\n                smartDebt: true,\\n                baseWithdrawalLimitInUSD: 0, // $0\\n                baseBorrowLimitInUSD: 10_000_000, // $10M\\n                maxBorrowLimitInUSD: 20_000_000 // $20M\\n            });\\n            setDexLimits(DEX_USDC_USDT); // Smart Debt\\n        }\\n\\n        {\\n            Dex memory DEX_cbBTC_WBTC = Dex({\\n                dex: getDexAddress(3),\\n                tokenA: cbBTC_ADDRESS,\\n                tokenB: WBTC_ADDRESS,\\n                smartCollateral: true,\\n                smartDebt: true,\\n                baseWithdrawalLimitInUSD: 7_500_000, // $7.5M\\n                baseBorrowLimitInUSD: 7_500_000, // $7.5M\\n                maxBorrowLimitInUSD: 10_000_000 // $10M\\n            });\\n            setDexLimits(DEX_cbBTC_WBTC); // Smart Collateral & Smart Debt\\n        }\\n    }\\n\\n    /// @notice Action 2: Set Vault limits on liquidity layer and Remove Team Multisig as auth on vaultFactory\\n    function action2() internal {\\n        {\\n            // [TYPE 4] wstETH-ETH  | wstETH-ETH | Smart collateral & smart debt\\n            Vault memory VAULT_wstETH_ETH_AND_wsETH_ETH = Vault({\\n                vault: getVaultAddress(34),\\n                vaultType: TYPE.TYPE_4,\\n                supplyToken: address(0),\\n                borrowToken: address(0)\\n            });\\n            setVaultLimitsAndAuth(VAULT_wstETH_ETH_AND_wsETH_ETH); // TYPE_4 => 34\\n        }\\n\\n        {\\n            // [TYPE 3] ETH | USDC-USDT | Smart Debt only\\n            Vault memory VAULT_ETH_AND_USDC_USDT = Vault({\\n                vault: getVaultAddress(35),\\n                vaultType: TYPE.TYPE_3,\\n                supplyToken: ETH_ADDRESS,\\n                borrowToken: address(0)\\n            });\\n            setVaultLimitsAndAuth(VAULT_ETH_AND_USDC_USDT); // TYPE_3 => 35\\n        }\\n\\n        {\\n            // [TYPE 3] wstETH | USDC-USDT | Smart Debt only\\n            Vault memory VAULT_wstETH_AND_USDC_USDT = Vault({\\n                vault: getVaultAddress(36),\\n                vaultType: TYPE.TYPE_3,\\n                supplyToken: wstETH_ADDRESS,\\n                borrowToken: address(0)\\n            });\\n            setVaultLimitsAndAuth(VAULT_wstETH_AND_USDC_USDT); // TYPE_3 => 36\\n        }\\n\\n        {\\n            // [TYPE 3] weETH | USDC-USDT | Smart Debt only\\n            Vault memory VAULT_weETH_AND_USDC_USDT = Vault({\\n                vault: getVaultAddress(37),\\n                vaultType: TYPE.TYPE_3,\\n                supplyToken: weETH_ADDRESS,\\n                borrowToken: address(0)\\n            });\\n            setVaultLimitsAndAuth(VAULT_weETH_AND_USDC_USDT); // TYPE_3 => 37\\n        }\\n\\n        {\\n            // [TYPE 3] WBTC | USDC-USDT | Smart Debt only\\n            Vault memory VAULT_WBTC_AND_USDC_USDT = Vault({\\n                vault: getVaultAddress(38),\\n                vaultType: TYPE.TYPE_3,\\n                supplyToken: WBTC_ADDRESS,\\n                borrowToken: address(0)\\n            });\\n            setVaultLimitsAndAuth(VAULT_WBTC_AND_USDC_USDT); // TYPE_3 => 38\\n        }\\n\\n        {\\n            // [TYPE 3] cbBTC | USDC-USDT | Smart Debt only\\n            Vault memory VAULT_cbBTC_AND_USDC_USDT = Vault({\\n                vault: getVaultAddress(39),\\n                vaultType: TYPE.TYPE_3,\\n                supplyToken: cbBTC_ADDRESS,\\n                borrowToken: address(0)\\n            });\\n            setVaultLimitsAndAuth(VAULT_cbBTC_AND_USDC_USDT); // TYPE_3 => 39\\n        }\\n\\n        {\\n            // [TYPE 3] sUSDe | USDC-USDT | Smart Debt only\\n            Vault memory VAULT_sUSDe_AND_USDC_USDT = Vault({\\n                vault: getVaultAddress(40),\\n                vaultType: TYPE.TYPE_3,\\n                supplyToken: sUSDe_ADDRESS,\\n                borrowToken: address(0)\\n            });\\n            setVaultLimitsAndAuth(VAULT_sUSDe_AND_USDC_USDT); // TYPE_3 => 40\\n        }\\n\\n        {\\n            // [TYPE 4] cbBTC-WBTC | cbBTC-WBTC | Smart collateral & smart debt\\n            Vault memory VAULT_cbBTC_WBTC_AND_cbBTC_WBTC = Vault({\\n                vault: getVaultAddress(41),\\n                vaultType: TYPE.TYPE_4,\\n                supplyToken: address(0),\\n                borrowToken: address(0)\\n            });\\n            setVaultLimitsAndAuth(VAULT_cbBTC_WBTC_AND_cbBTC_WBTC); // TYPE_4 => 41\\n        }\\n\\n        {\\n            // [TYPE 2] cbBTC-WBTC | USDC | Smart Collateral only\\n            Vault memory VAULT_cbBTC_WBTC_AND_USDC = Vault({\\n                vault: getVaultAddress(42),\\n                vaultType: TYPE.TYPE_2,\\n                supplyToken: address(0),\\n                borrowToken: USDC_ADDRESS\\n            });\\n            setVaultLimitsAndAuth(VAULT_cbBTC_WBTC_AND_USDC); // TYPE_2 => 42\\n        }\\n\\n        {\\n            // [TYPE 2] cbBTC-WBTC | USDT | Smart Collateral only\\n            Vault memory VAULT_cbBTC_WBTC_AND_USDT = Vault({\\n                vault: getVaultAddress(43),\\n                vaultType: TYPE.TYPE_2,\\n                supplyToken: address(0),\\n                borrowToken: USDT_ADDRESS\\n            });\\n            setVaultLimitsAndAuth(VAULT_cbBTC_WBTC_AND_USDT); // TYPE_2 => 43\\n        }\\n    }\\n\\n    /// @notice Action 3: Updating Liquidity User Module\\n    function action3() internal {\\n        address oldImplementation_ = 0x8eC5e29eA39b2f64B21e32cB9Ff11D5059982F8C; // Old User Module Implementation Address\\n        address newImplementation_ = 0x6967e68F7f9b3921181f27E66Aa9c3ac7e13dBc0; // New User Module Implementation Address\\n\\n        bytes4[] memory sigs_ = IProxy(address(LIQUIDITY))\\n            .getImplementationSigs(oldImplementation_);\\n        IProxy(address(LIQUIDITY)).removeImplementation(oldImplementation_);\\n\\n        IProxy(address(LIQUIDITY)).addImplementation(newImplementation_, sigs_);\\n    }\\n\\n    /// @notice Action 4: Adjust market rates for wstETH, WBTC & cbBTC\\n    function action4() internal {\\n        AdminModuleStructs.RateDataV2Params[]\\n            memory params_ = new AdminModuleStructs.RateDataV2Params[](3);\\n\\n        params_[0] = AdminModuleStructs.RateDataV2Params({\\n            token: wstETH_ADDRESS,\\n            kink1: 80 * 1e2, // 80%\\n            kink2: 90 * 1e2, // 90%\\n            rateAtUtilizationZero: 0.5 * 1e2, // 0.5%\\n            rateAtUtilizationKink1: 1 * 1e2, // 1%\\n            rateAtUtilizationKink2: 5 * 1e2, // 5%\\n            rateAtUtilizationMax: 100 * 1e2 // 100%\\n        });\\n\\n        params_[1] = AdminModuleStructs.RateDataV2Params({\\n            token: cbBTC_ADDRESS,\\n            kink1: 80 * 1e2, // 80%\\n            kink2: 90 * 1e2, // 90%\\n            rateAtUtilizationZero: 1 * 1e2, // 1%\\n            rateAtUtilizationKink1: 3 * 1e2, // 3%\\n            rateAtUtilizationKink2: 10 * 1e2, // 10%\\n            rateAtUtilizationMax: 100 * 1e2 // 100%\\n        });\\n\\n        params_[2] = AdminModuleStructs.RateDataV2Params({\\n            token: WBTC_ADDRESS,\\n            kink1: 80 * 1e2, // 80%\\n            kink2: 90 * 1e2, // 90%\\n            rateAtUtilizationZero: 1 * 1e2, // 1%\\n            rateAtUtilizationKink1: 3 * 1e2, // 3%\\n            rateAtUtilizationKink2: 10 * 1e2, // 10%\\n            rateAtUtilizationMax: 100 * 1e2 // 100%\\n        });\\n\\n        LIQUIDITY.updateRateDataV2s(params_);\\n    }\\n\\n    /// @notice Action 5: Adding new lite implementation\\n    function action5() internal {\\n        {\\n            // Claim Module\\n            bytes4[] memory newSigs_ = new bytes4[](1);\\n\\n            newSigs_[0] = ILiteSigs.claimFromAaveV3Lido.selector;\\n\\n            _updateLiteImplementation(\\n                0xc10A855055Eb3939FCaA512253Ec3f671C4Ab839,\\n                0xB00df786d3611acE29D19De744B4147f378715f4,\\n                newSigs_,\\n                false\\n            );\\n        }\\n\\n        {\\n            // LeverageDex Module\\n            bytes4[] memory newSigs_ = new bytes4[](1);\\n\\n            newSigs_[0] = ILiteSigs.leverageDexRefinance.selector;\\n\\n            _updateLiteImplementation(\\n                address(0),\\n                0x88eBAD0F40AE93EA196B0094362525FAe28Ae326,\\n                newSigs_,\\n                false\\n            );\\n        }\\n\\n        {\\n            // UnwindDex Module\\n            bytes4[] memory newSigs_ = new bytes4[](1);\\n\\n            newSigs_[0] = ILiteSigs.unwindDexRefinance.selector;\\n\\n            _updateLiteImplementation(\\n                address(0),\\n                0xa82BD4a64644054D85fA0D7A7643CAF5A15f534B,\\n                newSigs_,\\n                false\\n            );\\n        }\\n\\n        {\\n            // View Module\\n            bytes4[] memory newSigs_ = new bytes4[](1);\\n\\n            newSigs_[0] = ILiteSigs.getRatioFluidDex.selector;\\n\\n            _updateLiteImplementation(\\n                address(0x24d58FcFA6d74c5aCc1E4b6814BF5703e1CDd8a8),\\n                0x952Cf2869Dc2c59aAAF2311ec6C7c0A43f9CB6cf,\\n                newSigs_,\\n                false\\n            );\\n        }\\n\\n        // Update Dummy Implementation\\n        LITE.setDummyImplementation(0xbA15A31c8F9Cc3CB1b6E08755D8b22A6AF18d83d);\\n\\n        // Set Max Risk Ratio for Fluid Dex\\n        {\\n            uint8[] memory protocolId_ = new uint8[](1);\\n            uint256[] memory newRiskRatio_ = new uint256[](1);\\n\\n            {\\n                protocolId_[0] = 11;\\n                newRiskRatio_[0] = 95_0000;\\n            }\\n\\n            LITE.updateMaxRiskRatio(protocolId_, newRiskRatio_);\\n        }\\n    }\\n\\n    /**\\n     * |\\n     * |     Proposal Payload Helpers      |\\n     * |__________________________________\\n     */\\n    function getVaultAddress(uint256 vaultId_) public view returns (address) {\\n        return VAULT_FACTORY.getVaultAddress(vaultId_);\\n    }\\n\\n    function getDexAddress(uint256 dexId_) public view returns (address) {\\n        return DEX_FACTORY.getDexAddress(dexId_);\\n    }\\n\\n    function setDexLimits(Dex memory dex_) internal {\\n        // Smart Collateral\\n        if (dex_.smartCollateral) {\\n            SupplyProtocolConfig memory protocolConfigTokenA_ = SupplyProtocolConfig({\\n                protocol: dex_.dex,\\n                supplyToken: dex_.tokenA,\\n                expandPercent: 50 * 1e2, // 50%\\n                expandDuration: 1 hours, // 1 hour\\n                baseWithdrawalLimitInUSD: dex_.baseWithdrawalLimitInUSD\\n            });\\n\\n            setSupplyProtocolLimits(protocolConfigTokenA_);\\n\\n            SupplyProtocolConfig memory protocolConfigTokenB_ = SupplyProtocolConfig({\\n                protocol: dex_.dex,\\n                supplyToken: dex_.tokenB,\\n                expandPercent: 50 * 1e2, // 50%\\n                expandDuration: 1 hours, // 1 hour\\n                baseWithdrawalLimitInUSD: dex_.baseWithdrawalLimitInUSD\\n            });\\n\\n            setSupplyProtocolLimits(protocolConfigTokenB_);\\n        }\\n\\n        // Smart Debt\\n        if (dex_.smartDebt) {\\n            BorrowProtocolConfig memory protocolConfigTokenA_ = BorrowProtocolConfig({\\n                protocol: dex_.dex,\\n                borrowToken: dex_.tokenA,\\n                expandPercent: 50 * 1e2, // 50%\\n                expandDuration: 1 hours, // 1 hour\\n                baseBorrowLimitInUSD: dex_.baseBorrowLimitInUSD,\\n                maxBorrowLimitInUSD: dex_.maxBorrowLimitInUSD\\n            });\\n\\n            setBorrowProtocolLimits(protocolConfigTokenA_);\\n\\n            BorrowProtocolConfig memory protocolConfigTokenB_ = BorrowProtocolConfig({\\n                protocol: dex_.dex,\\n                borrowToken: dex_.tokenB,\\n                expandPercent: 50 * 1e2, // 50%\\n                expandDuration: 1 hours, // 1 hour\\n                baseBorrowLimitInUSD: dex_.baseBorrowLimitInUSD,\\n                maxBorrowLimitInUSD: dex_.maxBorrowLimitInUSD\\n            });\\n\\n            setBorrowProtocolLimits(protocolConfigTokenB_);\\n        }\\n    }\\n\\n    function setVaultLimitsAndAuth(Vault memory vault_) internal {\\n        if (vault_.vaultType == TYPE.TYPE_3) {\\n            SupplyProtocolConfig memory protocolConfig_ = SupplyProtocolConfig({\\n                protocol: vault_.vault,\\n                supplyToken: vault_.supplyToken,\\n                expandPercent: 25 * 1e2, // 25%\\n                expandDuration: 12 hours, // 12 hours\\n                baseWithdrawalLimitInUSD: 7_500_000 // $7.5M\\n            });\\n\\n            setSupplyProtocolLimits(protocolConfig_);\\n        }\\n\\n        if (vault_.vaultType == TYPE.TYPE_2) {\\n            BorrowProtocolConfig memory protocolConfig_ = BorrowProtocolConfig({\\n                protocol: vault_.vault,\\n                borrowToken: vault_.borrowToken,\\n                expandPercent: 20 * 1e2, // 20%\\n                expandDuration: 12 hours, // 12 hours\\n                baseBorrowLimitInUSD: 7_500_000, // $7.5M\\n                maxBorrowLimitInUSD: 20_000_000 // $20M\\n            });\\n\\n            setBorrowProtocolLimits(protocolConfig_);\\n        }\\n\\n        VAULT_FACTORY.setVaultAuth(vault_.vault, TEAM_MULTISIG, false);\\n    }\\n\\n    struct SupplyProtocolConfig {\\n        address protocol;\\n        address supplyToken;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseWithdrawalLimitInUSD;\\n    }\\n\\n    struct BorrowProtocolConfig {\\n        address protocol;\\n        address borrowToken;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseBorrowLimitInUSD;\\n        uint256 maxBorrowLimitInUSD;\\n    }\\n\\n    function setSupplyProtocolLimits(\\n        SupplyProtocolConfig memory protocolConfig_\\n    ) internal {\\n        {\\n            // Supply Limits\\n            AdminModuleStructs.UserSupplyConfig[]\\n                memory configs_ = new AdminModuleStructs.UserSupplyConfig[](1);\\n\\n            configs_[0] = AdminModuleStructs.UserSupplyConfig({\\n                user: address(protocolConfig_.protocol),\\n                token: protocolConfig_.supplyToken,\\n                mode: 1,\\n                expandPercent: protocolConfig_.expandPercent,\\n                expandDuration: protocolConfig_.expandDuration,\\n                baseWithdrawalLimit: getRawAmount(\\n                    protocolConfig_.supplyToken,\\n                    0,\\n                    protocolConfig_.baseWithdrawalLimitInUSD,\\n                    true\\n                )\\n            });\\n\\n            LIQUIDITY.updateUserSupplyConfigs(configs_);\\n        }\\n    }\\n\\n    function setBorrowProtocolLimits(\\n        BorrowProtocolConfig memory protocolConfig_\\n    ) internal {\\n        {\\n            // Borrow Limits\\n            AdminModuleStructs.UserBorrowConfig[]\\n                memory configs_ = new AdminModuleStructs.UserBorrowConfig[](1);\\n\\n            configs_[0] = AdminModuleStructs.UserBorrowConfig({\\n                user: address(protocolConfig_.protocol),\\n                token: protocolConfig_.borrowToken,\\n                mode: 1,\\n                expandPercent: protocolConfig_.expandPercent,\\n                expandDuration: protocolConfig_.expandDuration,\\n                baseDebtCeiling: getRawAmount(\\n                    protocolConfig_.borrowToken,\\n                    0,\\n                    protocolConfig_.baseBorrowLimitInUSD,\\n                    false\\n                ),\\n                maxDebtCeiling: getRawAmount(\\n                    protocolConfig_.borrowToken,\\n                    0,\\n                    protocolConfig_.maxBorrowLimitInUSD,\\n                    false\\n                )\\n            });\\n\\n            LIQUIDITY.updateUserBorrowConfigs(configs_);\\n        }\\n    }\\n\\n    function getRawAmount(\\n        address token,\\n        uint256 amount,\\n        uint256 amountInUSD,\\n        bool isSupply\\n    ) public view returns (uint256) {\\n        if (amount > 0 && amountInUSD > 0) {\\n            revert(\\\"both usd and amount are not zero\\\");\\n        }\\n        uint256 exchangePriceAndConfig_ = LIQUIDITY.readFromStorage(\\n            LiquiditySlotsLink.calculateMappingStorageSlot(\\n                LiquiditySlotsLink.LIQUIDITY_EXCHANGE_PRICES_MAPPING_SLOT,\\n                token\\n            )\\n        );\\n\\n        (\\n            uint256 supplyExchangePrice,\\n            uint256 borrowExchangePrice\\n        ) = LiquidityCalcs.calcExchangePrices(exchangePriceAndConfig_);\\n\\n        uint256 usdPrice = 0;\\n        uint256 decimals = 18;\\n        if (token == ETH_ADDRESS) {\\n            usdPrice = 2_650 * 1e2;\\n            decimals = 18;\\n        } else if (token == wstETH_ADDRESS) {\\n            usdPrice = 3_150 * 1e2;\\n            decimals = 18;\\n        } else if (token == weETH_ADDRESS) {\\n            usdPrice = 2_775 * 1e2;\\n            decimals = 18;\\n        } else if (token == cbBTC_ADDRESS || token == WBTC_ADDRESS) {\\n            usdPrice = 68_100 * 1e2;\\n            decimals = 8;\\n        } else if (token == USDC_ADDRESS || token == USDT_ADDRESS) {\\n            usdPrice = 1 * 1e2;\\n            decimals = 6;\\n        } else if (token == sUSDe_ADDRESS) {\\n            usdPrice = 1.1 * 1e2;\\n            decimals = 18;\\n        } else {\\n            revert(\\\"not-found\\\");\\n        }\\n\\n        uint256 exchangePrice = isSupply\\n            ? supplyExchangePrice\\n            : borrowExchangePrice;\\n\\n        if (amount > 0) {\\n            return (amount * 1e12) / exchangePrice;\\n        } else {\\n            return\\n                (amountInUSD * 1e12 * (10 ** decimals)) /\\n                ((usdPrice * exchangePrice) / 1e2);\\n        }\\n    }\\n\\n    function _updateLiteImplementation(\\n        address oldImplementation_,\\n        address newImplementation_,\\n        bytes4[] memory newSigs_,\\n        bool replace_\\n    ) internal {\\n        bytes4[] memory oldSigs_;\\n\\n        if (oldImplementation_ != address(0) && !replace_) {\\n            oldSigs_ = LITE.getImplementationSigs(oldImplementation_);\\n        }\\n\\n        bytes4[] memory allSigs_ = new bytes4[](\\n            oldSigs_.length + newSigs_.length\\n        );\\n        uint256 j_;\\n        for (uint256 i = 0; i < oldSigs_.length; i++) {\\n            allSigs_[j_++] = oldSigs_[i];\\n        }\\n\\n        for (uint256 i = 0; i < newSigs_.length; i++) {\\n            allSigs_[j_++] = newSigs_[i];\\n        }\\n\\n        if (oldImplementation_ != address(0)) {\\n            LITE.removeImplementation(oldImplementation_);\\n        }\\n        LITE.addImplementation(newImplementation_, allSigs_);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.21\"},\"contracts/payloads/libraries/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary LibsErrorTypes {\\n    /***********************************|\\n    |         LiquidityCalcs            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when supply or borrow exchange price is zero at calc token data (token not configured yet)\\n    uint256 internal constant LiquidityCalcs__ExchangePriceZero = 70001;\\n\\n    /// @notice thrown when rate data is set to a version that is not implemented\\n    uint256 internal constant LiquidityCalcs__UnsupportedRateVersion = 70002;\\n\\n    /// @notice thrown when the calculated borrow rate turns negative. This should never happen.\\n    uint256 internal constant LiquidityCalcs__BorrowRateNegative = 70003;\\n\\n    /***********************************|\\n    |           SafeTransfer            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe transfer from for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFromFailed = 71001;\\n\\n    /// @notice thrown when safe transfer for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFailed = 71002;\\n}\",\"versionPragma\":\"0.8.21\"},\"contracts/payloads/libraries/bigMathMinified.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @title library that represents a number in BigNumber(coefficient and exponent) format to store in smaller bits.\\n/// @notice the number is divided into two parts: a coefficient and an exponent. This comes at a cost of losing some precision\\n/// at the end of the number because the exponent simply fills it with zeroes. This precision is oftentimes negligible and can\\n/// result in significant gas cost reduction due to storage space reduction.\\n/// Also note, a valid big number is as follows: if the exponent is > 0, then coefficient last bits should be occupied to have max precision.\\n/// @dev roundUp is more like a increase 1, which happens everytime for the same number.\\n/// roundDown simply sets trailing digits after coefficientSize to zero (floor), only once for the same number.\\nlibrary BigMathMinified {\\n    /// @dev constants to use for `roundUp` input param to increase readability\\n    bool internal constant ROUND_DOWN = false;\\n    bool internal constant ROUND_UP = true;\\n\\n    /// @dev converts `normal` number to BigNumber with `exponent` and `coefficient` (or precision).\\n    /// e.g.:\\n    /// 5035703444687813576399599 (normal) = (coefficient[32bits], exponent[8bits])[40bits]\\n    /// 5035703444687813576399599 (decimal) => 10000101010010110100000011111011110010100110100000000011100101001101001101011101111 (binary)\\n    ///                                     => 10000101010010110100000011111011000000000000000000000000000000000000000000000000000\\n    ///                                                                        ^-------------------- 51(exponent) -------------- ^\\n    /// coefficient = 1000,0101,0100,1011,0100,0000,1111,1011               (2236301563)\\n    /// exponent =                                            0011,0011     (51)\\n    /// bigNumber =   1000,0101,0100,1011,0100,0000,1111,1011,0011,0011     (572493200179)\\n    ///\\n    /// @param normal number which needs to be converted into Big Number\\n    /// @param coefficientSize at max how many bits of precision there should be (64 = uint64 (64 bits precision))\\n    /// @param exponentSize at max how many bits of exponent there should be (8 = uint8 (8 bits exponent))\\n    /// @param roundUp signals if result should be rounded down or up\\n    /// @return bigNumber converted bigNumber (coefficient << exponent)\\n    function toBigNumber(\\n        uint256 normal,\\n        uint256 coefficientSize,\\n        uint256 exponentSize,\\n        bool roundUp\\n    ) internal pure returns (uint256 bigNumber) {\\n        assembly {\\n            let lastBit_\\n            let number_ := normal\\n            if gt(number_, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x80, number_)\\n                lastBit_ := 0x80\\n            }\\n            if gt(number_, 0xFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x40, number_)\\n                lastBit_ := add(lastBit_, 0x40)\\n            }\\n            if gt(number_, 0xFFFFFFFF) {\\n                number_ := shr(0x20, number_)\\n                lastBit_ := add(lastBit_, 0x20)\\n            }\\n            if gt(number_, 0xFFFF) {\\n                number_ := shr(0x10, number_)\\n                lastBit_ := add(lastBit_, 0x10)\\n            }\\n            if gt(number_, 0xFF) {\\n                number_ := shr(0x8, number_)\\n                lastBit_ := add(lastBit_, 0x8)\\n            }\\n            if gt(number_, 0xF) {\\n                number_ := shr(0x4, number_)\\n                lastBit_ := add(lastBit_, 0x4)\\n            }\\n            if gt(number_, 0x3) {\\n                number_ := shr(0x2, number_)\\n                lastBit_ := add(lastBit_, 0x2)\\n            }\\n            if gt(number_, 0x1) {\\n                lastBit_ := add(lastBit_, 1)\\n            }\\n            if gt(number_, 0) {\\n                lastBit_ := add(lastBit_, 1)\\n            }\\n            if lt(lastBit_, coefficientSize) {\\n                // for throw exception\\n                lastBit_ := coefficientSize\\n            }\\n            let exponent := sub(lastBit_, coefficientSize)\\n            let coefficient := shr(exponent, normal)\\n            if and(roundUp, gt(exponent, 0)) {\\n                // rounding up is only needed if exponent is > 0, as otherwise the coefficient fully holds the original number\\n                coefficient := add(coefficient, 1)\\n                if eq(shl(coefficientSize, 1), coefficient) {\\n                    // case were coefficient was e.g. 111, with adding 1 it became 1000 (in binary) and coefficientSize 3 bits\\n                    // final coefficient would exceed it's size. -> reduce coefficent to 100 and increase exponent by 1.\\n                    coefficient := shl(sub(coefficientSize, 1), 1)\\n                    exponent := add(exponent, 1)\\n                }\\n            }\\n            if iszero(lt(exponent, shl(exponentSize, 1))) {\\n                // if exponent is >= exponentSize, the normal number is too big to fit within\\n                // BigNumber with too small sizes for coefficient and exponent\\n                revert(0, 0)\\n            }\\n            bigNumber := shl(exponentSize, coefficient)\\n            bigNumber := add(bigNumber, exponent)\\n        }\\n    }\\n\\n    /// @dev get `normal` number from `bigNumber`, `exponentSize` and `exponentMask`\\n    function fromBigNumber(\\n        uint256 bigNumber,\\n        uint256 exponentSize,\\n        uint256 exponentMask\\n    ) internal pure returns (uint256 normal) {\\n        assembly {\\n            let coefficient := shr(exponentSize, bigNumber)\\n            let exponent := and(bigNumber, exponentMask)\\n            normal := shl(exponent, coefficient)\\n        }\\n    }\\n\\n    /// @dev gets the most significant bit `lastBit` of a `normal` number (length of given number of binary format).\\n    /// e.g.\\n    /// 5035703444687813576399599 = 10000101010010110100000011111011110010100110100000000011100101001101001101011101111\\n    /// lastBit =                   ^---------------------------------   83   ----------------------------------------^\\n    function mostSignificantBit(uint256 normal) internal pure returns (uint lastBit) {\\n        assembly {\\n            let number_ := normal\\n            if gt(normal, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x80, number_)\\n                lastBit := 0x80\\n            }\\n            if gt(number_, 0xFFFFFFFFFFFFFFFF) {\\n                number_ := shr(0x40, number_)\\n                lastBit := add(lastBit, 0x40)\\n            }\\n            if gt(number_, 0xFFFFFFFF) {\\n                number_ := shr(0x20, number_)\\n                lastBit := add(lastBit, 0x20)\\n            }\\n            if gt(number_, 0xFFFF) {\\n                number_ := shr(0x10, number_)\\n                lastBit := add(lastBit, 0x10)\\n            }\\n            if gt(number_, 0xFF) {\\n                number_ := shr(0x8, number_)\\n                lastBit := add(lastBit, 0x8)\\n            }\\n            if gt(number_, 0xF) {\\n                number_ := shr(0x4, number_)\\n                lastBit := add(lastBit, 0x4)\\n            }\\n            if gt(number_, 0x3) {\\n                number_ := shr(0x2, number_)\\n                lastBit := add(lastBit, 0x2)\\n            }\\n            if gt(number_, 0x1) {\\n                lastBit := add(lastBit, 1)\\n            }\\n            if gt(number_, 0) {\\n                lastBit := add(lastBit, 1)\\n            }\\n        }\\n    }\\n}\",\"versionPragma\":\"0.8.21\"},\"contracts/payloads/libraries/liquiditySlotsLink.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @notice library that helps in reading / working with storage slot data of Fluid Liquidity.\\n/// @dev as all data for Fluid Liquidity is internal, any data must be fetched directly through manual\\n/// slot reading through this library or, if gas usage is less important, through the FluidLiquidityResolver.\\nlibrary LiquiditySlotsLink {\\n    /// @dev storage slot for status at Liquidity\\n    uint256 internal constant LIQUIDITY_STATUS_SLOT = 1;\\n    /// @dev storage slot for auths mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_AUTHS_MAPPING_SLOT = 2;\\n    /// @dev storage slot for guardians mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_GUARDIANS_MAPPING_SLOT = 3;\\n    /// @dev storage slot for user class mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_CLASS_MAPPING_SLOT = 4;\\n    /// @dev storage slot for exchangePricesAndConfig mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_EXCHANGE_PRICES_MAPPING_SLOT = 5;\\n    /// @dev storage slot for rateData mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_RATE_DATA_MAPPING_SLOT = 6;\\n    /// @dev storage slot for totalAmounts mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_TOTAL_AMOUNTS_MAPPING_SLOT = 7;\\n    /// @dev storage slot for user supply double mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_SUPPLY_DOUBLE_MAPPING_SLOT = 8;\\n    /// @dev storage slot for user borrow double mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_BORROW_DOUBLE_MAPPING_SLOT = 9;\\n    /// @dev storage slot for listed tokens array at Liquidity\\n    uint256 internal constant LIQUIDITY_LISTED_TOKENS_ARRAY_SLOT = 10;\\n\\n    // --------------------------------\\n    // @dev stacked uint256 storage slots bits position data for each:\\n\\n    // ExchangePricesAndConfig\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_RATE = 0;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_FEE = 16;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_UTILIZATION = 30;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_UPDATE_THRESHOLD = 44;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_LAST_TIMESTAMP = 58;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_SUPPLY_EXCHANGE_PRICE = 91;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_EXCHANGE_PRICE = 155;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_SUPPLY_RATIO = 219;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_RATIO = 234;\\n\\n    // RateData:\\n    uint256 internal constant BITS_RATE_DATA_VERSION = 0;\\n    // RateData: V1\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_ZERO = 4;\\n    uint256 internal constant BITS_RATE_DATA_V1_UTILIZATION_AT_KINK = 20;\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_KINK = 36;\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_MAX = 52;\\n    // RateData: V2\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_ZERO = 4;\\n    uint256 internal constant BITS_RATE_DATA_V2_UTILIZATION_AT_KINK1 = 20;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK1 = 36;\\n    uint256 internal constant BITS_RATE_DATA_V2_UTILIZATION_AT_KINK2 = 52;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK2 = 68;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_MAX = 84;\\n\\n    // TotalAmounts\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_SUPPLY_WITH_INTEREST = 0;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_SUPPLY_INTEREST_FREE = 64;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_BORROW_WITH_INTEREST = 128;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_BORROW_INTEREST_FREE = 192;\\n\\n    // UserSupplyData\\n    uint256 internal constant BITS_USER_SUPPLY_MODE = 0;\\n    uint256 internal constant BITS_USER_SUPPLY_AMOUNT = 1;\\n    uint256 internal constant BITS_USER_SUPPLY_PREVIOUS_WITHDRAWAL_LIMIT = 65;\\n    uint256 internal constant BITS_USER_SUPPLY_LAST_UPDATE_TIMESTAMP = 129;\\n    uint256 internal constant BITS_USER_SUPPLY_EXPAND_PERCENT = 162;\\n    uint256 internal constant BITS_USER_SUPPLY_EXPAND_DURATION = 176;\\n    uint256 internal constant BITS_USER_SUPPLY_BASE_WITHDRAWAL_LIMIT = 200;\\n    uint256 internal constant BITS_USER_SUPPLY_IS_PAUSED = 255;\\n\\n    // UserBorrowData\\n    uint256 internal constant BITS_USER_BORROW_MODE = 0;\\n    uint256 internal constant BITS_USER_BORROW_AMOUNT = 1;\\n    uint256 internal constant BITS_USER_BORROW_PREVIOUS_BORROW_LIMIT = 65;\\n    uint256 internal constant BITS_USER_BORROW_LAST_UPDATE_TIMESTAMP = 129;\\n    uint256 internal constant BITS_USER_BORROW_EXPAND_PERCENT = 162;\\n    uint256 internal constant BITS_USER_BORROW_EXPAND_DURATION = 176;\\n    uint256 internal constant BITS_USER_BORROW_BASE_BORROW_LIMIT = 200;\\n    uint256 internal constant BITS_USER_BORROW_MAX_BORROW_LIMIT = 218;\\n    uint256 internal constant BITS_USER_BORROW_IS_PAUSED = 255;\\n\\n    // --------------------------------\\n\\n    /// @notice Calculating the slot ID for Liquidity contract for single mapping at `slot_` for `key_`\\n    function calculateMappingStorageSlot(uint256 slot_, address key_) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(key_, slot_));\\n    }\\n\\n    /// @notice Calculating the slot ID for Liquidity contract for double mapping at `slot_` for `key1_` and `key2_`\\n    function calculateDoubleMappingStorageSlot(\\n        uint256 slot_,\\n        address key1_,\\n        address key2_\\n    ) internal pure returns (bytes32) {\\n        bytes32 intermediateSlot_ = keccak256(abi.encode(key1_, slot_));\\n        return keccak256(abi.encode(key2_, intermediateSlot_));\\n    }\\n}\\n\",\"versionPragma\":\"0.8.21\"},\"contracts/payloads/libraries/liquidityCalcs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { LibsErrorTypes as ErrorTypes } from \\\"./errorTypes.sol\\\";\\nimport { LiquiditySlotsLink } from \\\"./liquiditySlotsLink.sol\\\";\\nimport { BigMathMinified } from \\\"./bigMathMinified.sol\\\";\\n\\n/// @notice implements calculation methods used for Fluid liquidity such as updated exchange prices,\\n/// borrow rate, withdrawal / borrow limits, revenue amount.\\nlibrary LiquidityCalcs {\\n    error FluidLiquidityCalcsError(uint256 errorId_);\\n\\n    /// @notice emitted if the calculated borrow rate surpassed max borrow rate (16 bits) and was capped at maximum value 65535\\n    event BorrowRateMaxCap();\\n\\n    /// @dev constants as from Liquidity variables.sol\\n    uint256 internal constant EXCHANGE_PRICES_PRECISION = 1e12;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n    // constants used for BigMath conversion from and to storage\\n    uint256 internal constant DEFAULT_EXPONENT_SIZE = 8;\\n    uint256 internal constant DEFAULT_EXPONENT_MASK = 0xFF;\\n\\n    uint256 internal constant FOUR_DECIMALS = 1e4;\\n    uint256 internal constant TWELVE_DECIMALS = 1e12;\\n    uint256 internal constant X14 = 0x3fff;\\n    uint256 internal constant X15 = 0x7fff;\\n    uint256 internal constant X16 = 0xffff;\\n    uint256 internal constant X18 = 0x3ffff;\\n    uint256 internal constant X24 = 0xffffff;\\n    uint256 internal constant X33 = 0x1ffffffff;\\n    uint256 internal constant X64 = 0xffffffffffffffff;\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                  CALC EXCHANGE PRICES                  /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev calculates interest (exchange prices) for a token given its' exchangePricesAndConfig from storage.\\n    /// @param exchangePricesAndConfig_ exchange prices and config packed uint256 read from storage\\n    /// @return supplyExchangePrice_ updated supplyExchangePrice\\n    /// @return borrowExchangePrice_ updated borrowExchangePrice\\n    function calcExchangePrices(\\n        uint256 exchangePricesAndConfig_\\n    ) internal view returns (uint256 supplyExchangePrice_, uint256 borrowExchangePrice_) {\\n        // Extracting exchange prices\\n        supplyExchangePrice_ =\\n            (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_SUPPLY_EXCHANGE_PRICE) &\\n            X64;\\n        borrowExchangePrice_ =\\n            (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_BORROW_EXCHANGE_PRICE) &\\n            X64;\\n\\n        if (supplyExchangePrice_ == 0 || borrowExchangePrice_ == 0) {\\n            revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__ExchangePriceZero);\\n        }\\n\\n        uint256 temp_ = exchangePricesAndConfig_ & X16; // temp_ = borrowRate\\n\\n        unchecked {\\n            // last timestamp can not be > current timestamp\\n            uint256 secondsSinceLastUpdate_ = block.timestamp -\\n                ((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_LAST_TIMESTAMP) & X33);\\n\\n            uint256 borrowRatio_ = (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_BORROW_RATIO) &\\n                X15;\\n            if (secondsSinceLastUpdate_ == 0 || temp_ == 0 || borrowRatio_ == 1) {\\n                // if no time passed, borrow rate is 0, or no raw borrowings: no exchange price update needed\\n                // (if borrowRatio_ == 1 means there is only borrowInterestFree, as first bit is 1 and rest is 0)\\n                return (supplyExchangePrice_, borrowExchangePrice_);\\n            }\\n\\n            // calculate new borrow exchange price.\\n            // formula borrowExchangePriceIncrease: previous price * borrow rate * secondsSinceLastUpdate_.\\n            // nominator is max uint112 (uint64 * uint16 * uint32). Divisor can not be 0.\\n            borrowExchangePrice_ +=\\n                (borrowExchangePrice_ * temp_ * secondsSinceLastUpdate_) /\\n                (SECONDS_PER_YEAR * FOUR_DECIMALS);\\n\\n            // FOR SUPPLY EXCHANGE PRICE:\\n            // all yield paid by borrowers (in mode with interest) goes to suppliers in mode with interest.\\n            // formula: previous price * supply rate * secondsSinceLastUpdate_.\\n            // where supply rate = (borrow rate  - revenueFee%) * ratioSupplyYield. And\\n            // ratioSupplyYield = utilization * supplyRatio * borrowRatio\\n            //\\n            // Example:\\n            // supplyRawInterest is 80, supplyInterestFree is 20. totalSupply is 100. BorrowedRawInterest is 50.\\n            // BorrowInterestFree is 10. TotalBorrow is 60. borrow rate 40%, revenueFee 10%.\\n            // yield is 10 (so half a year must have passed).\\n            // supplyRawInterest must become worth 89. totalSupply must become 109. BorrowedRawInterest must become 60.\\n            // borrowInterestFree must still be 10. supplyInterestFree still 20. totalBorrow 70.\\n            // supplyExchangePrice would have to go from 1 to 1,125 (+ 0.125). borrowExchangePrice from 1 to 1,2 (+0.2).\\n            // utilization is 60%. supplyRatio = 20 / 80 = 25% (only 80% of lenders receiving yield).\\n            // borrowRatio = 10 / 50 = 20% (only 83,333% of borrowers paying yield):\\n            // x of borrowers paying yield = 100% - (20 / (100 + 20)) = 100% - 16.6666666% = 83,333%.\\n            // ratioSupplyYield = 60% * 83,33333% * (100% + 20%) = 62,5%\\n            // supplyRate = (40% * (100% - 10%)) * = 36% * 62,5% = 22.5%\\n            // increase in supplyExchangePrice, assuming 100 as previous price.\\n            // 100 * 22,5% * 1/2 (half a year) = 0,1125.\\n            // cross-check supplyRawInterest worth = 80 * 1.1125 = 89. totalSupply worth = 89 + 20.\\n\\n            // -------------- 1. calculate ratioSupplyYield --------------------------------\\n            // step1: utilization * supplyRatio (or actually part of lenders receiving yield)\\n\\n            // temp_ => supplyRatio (in 1e2: 100% = 10_000; 1% = 100 -> max value 16_383)\\n            // if first bit 0 then ratio is supplyInterestFree / supplyWithInterest (supplyWithInterest is bigger)\\n            // else ratio is supplyWithInterest / supplyInterestFree (supplyInterestFree is bigger)\\n            temp_ = (exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_SUPPLY_RATIO) & X15;\\n\\n            if (temp_ == 1) {\\n                // if no raw supply: no exchange price update needed\\n                // (if supplyRatio_ == 1 means there is only supplyInterestFree, as first bit is 1 and rest is 0)\\n                return (supplyExchangePrice_, borrowExchangePrice_);\\n            }\\n\\n            // ratioSupplyYield precision is 1e27 as 100% for increased precision when supplyInterestFree > supplyWithInterest\\n            if (temp_ & 1 == 1) {\\n                // ratio is supplyWithInterest / supplyInterestFree (supplyInterestFree is bigger)\\n                temp_ = temp_ >> 1;\\n\\n                // Note: case where temp_ == 0 (only supplyInterestFree, no yield) already covered by early return\\n                // in the if statement a little above.\\n\\n                // based on above example but supplyRawInterest is 20, supplyInterestFree is 80. no fee.\\n                // supplyRawInterest must become worth 30. totalSupply must become 110.\\n                // supplyExchangePrice would have to go from 1 to 1,5. borrowExchangePrice from 1 to 1,2.\\n                // so ratioSupplyYield must come out as 2.5 (250%).\\n                // supplyRatio would be (20 * 10_000 / 80) = 2500. but must be inverted.\\n                temp_ = (1e27 * FOUR_DECIMALS) / temp_; // e.g. 1e31 / 2500 = 4e27. (* 1e27 for precision)\\n                // e.g. 5_000 * (1e27 + 4e27) / 1e27 = 25_000 (=250%).\\n                temp_ =\\n                    // utilization * (100% + 100% / supplyRatio)\\n                    (((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_UTILIZATION) & X14) *\\n                        (1e27 + temp_)) / // extract utilization (max 16_383 so there is no way this can overflow).\\n                    (FOUR_DECIMALS);\\n                // max possible value of temp_ here is 16383 * (1e27 + 1e31) / 1e4 = ~1.64e31\\n            } else {\\n                // ratio is supplyInterestFree / supplyWithInterest (supplyWithInterest is bigger)\\n                temp_ = temp_ >> 1;\\n                // if temp_ == 0 then only supplyWithInterest => full yield. temp_ is already 0\\n\\n                // e.g. 5_000 * 10_000 + (20 * 10_000 / 80) / 10_000 = 5000 * 12500 / 10000 = 6250 (=62.5%).\\n                temp_ =\\n                    // 1e27 * utilization * (100% + supplyRatio) / 100%\\n                    (1e27 *\\n                        ((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_UTILIZATION) & X14) * // extract utilization (max 16_383 so there is no way this can overflow).\\n                        (FOUR_DECIMALS + temp_)) /\\n                    (FOUR_DECIMALS * FOUR_DECIMALS);\\n                // max possible temp_ value: 1e27 * 16383 * 2e4 / 1e8 = 3.2766e27\\n            }\\n            // from here temp_ => ratioSupplyYield (utilization * supplyRatio part) scaled by 1e27. max possible value ~1.64e31\\n\\n            // step2 of ratioSupplyYield: add borrowRatio (only x% of borrowers paying yield)\\n            if (borrowRatio_ & 1 == 1) {\\n                // ratio is borrowWithInterest / borrowInterestFree (borrowInterestFree is bigger)\\n                borrowRatio_ = borrowRatio_ >> 1;\\n                // borrowRatio_ => x of total bororwers paying yield. scale to 1e27.\\n\\n                // Note: case where borrowRatio_ == 0 (only borrowInterestFree, no yield) already covered\\n                // at the beginning of the method by early return if `borrowRatio_ == 1`.\\n\\n                // based on above example but borrowRawInterest is 10, borrowInterestFree is 50. no fee. borrowRatio = 20%.\\n                // so only 16.66% of borrowers are paying yield. so the 100% - part of the formula is not needed.\\n                // x of borrowers paying yield = (borrowRatio / (100 + borrowRatio)) = 16.6666666%\\n                // borrowRatio_ => x of total bororwers paying yield. scale to 1e27.\\n                borrowRatio_ = (borrowRatio_ * 1e27) / (FOUR_DECIMALS + borrowRatio_);\\n                // max value here for borrowRatio_ is (1e31 / (1e4 + 1e4))= 5e26 (= 50% of borrowers paying yield).\\n            } else {\\n                // ratio is borrowInterestFree / borrowWithInterest (borrowWithInterest is bigger)\\n                borrowRatio_ = borrowRatio_ >> 1;\\n\\n                // borrowRatio_ => x of total bororwers paying yield. scale to 1e27.\\n                // x of borrowers paying yield = 100% - (borrowRatio / (100 + borrowRatio)) = 100% - 16.6666666% = 83,333%.\\n                borrowRatio_ = (1e27 - ((borrowRatio_ * 1e27) / (FOUR_DECIMALS + borrowRatio_)));\\n                // borrowRatio can never be > 100%. so max subtraction can be 100% - 100% / 200%.\\n                // or if borrowRatio_ is 0 -> 100% - 0. or if borrowRatio_ is 1 -> 100% - 1 / 101.\\n                // max value here for borrowRatio_ is 1e27 - 0 = 1e27 (= 100% of borrowers paying yield).\\n            }\\n\\n            // temp_ => ratioSupplyYield. scaled down from 1e25 = 1% each to normal percent precision 1e2 = 1%.\\n            // max nominator value is ~1.64e31 * 1e27 = 1.64e58. max result = 1.64e8\\n            temp_ = (FOUR_DECIMALS * temp_ * borrowRatio_) / 1e54;\\n\\n            // 2. calculate supply rate\\n            // temp_ => supply rate (borrow rate  - revenueFee%) * ratioSupplyYield.\\n            // division part is done in next step to increase precision. (divided by 2x FOUR_DECIMALS, fee + borrowRate)\\n            // Note that all calculation divisions for supplyExchangePrice are rounded down.\\n            // Note supply rate can be bigger than the borrowRate, e.g. if there are only few lenders with interest\\n            // but more suppliers not earning interest.\\n            temp_ = ((exchangePricesAndConfig_ & X16) * // borrow rate\\n                temp_ * // ratioSupplyYield\\n                (FOUR_DECIMALS - ((exchangePricesAndConfig_ >> LiquiditySlotsLink.BITS_EXCHANGE_PRICES_FEE) & X14))); // revenueFee\\n            // fee can not be > 100%. max possible = 65535 * ~1.64e8 * 1e4 =~1.074774e17.\\n\\n            // 3. calculate increase in supply exchange price\\n            supplyExchangePrice_ += ((supplyExchangePrice_ * temp_ * secondsSinceLastUpdate_) /\\n                (SECONDS_PER_YEAR * FOUR_DECIMALS * FOUR_DECIMALS * FOUR_DECIMALS));\\n            // max possible nominator = max uint 64 * 1.074774e17 * max uint32 = ~8.52e45. Denominator can not be 0.\\n        }\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                     CALC REVENUE                       /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev gets the `revenueAmount_` for a token given its' totalAmounts and exchangePricesAndConfig from storage\\n    /// and the current balance of the Fluid liquidity contract for the token.\\n    /// @param totalAmounts_ total amounts packed uint256 read from storage\\n    /// @param exchangePricesAndConfig_ exchange prices and config packed uint256 read from storage\\n    /// @param liquidityTokenBalance_   current balance of Liquidity contract (IERC20(token_).balanceOf(address(this)))\\n    /// @return revenueAmount_ collectable revenue amount\\n    function calcRevenue(\\n        uint256 totalAmounts_,\\n        uint256 exchangePricesAndConfig_,\\n        uint256 liquidityTokenBalance_\\n    ) internal view returns (uint256 revenueAmount_) {\\n        // @dev no need to super-optimize this method as it is only used by admin\\n\\n        // calculate the new exchange prices based on earned interest\\n        (uint256 supplyExchangePrice_, uint256 borrowExchangePrice_) = calcExchangePrices(exchangePricesAndConfig_);\\n\\n        // total supply = interest free + with interest converted from raw\\n        uint256 totalSupply_ = getTotalSupply(totalAmounts_, supplyExchangePrice_);\\n\\n        if (totalSupply_ > 0) {\\n            // available revenue: balanceOf(token) + totalBorrowings - totalLendings.\\n            revenueAmount_ = liquidityTokenBalance_ + getTotalBorrow(totalAmounts_, borrowExchangePrice_);\\n            // ensure there is no possible case because of rounding etc. where this would revert,\\n            // explicitly check if >\\n            revenueAmount_ = revenueAmount_ > totalSupply_ ? revenueAmount_ - totalSupply_ : 0;\\n            // Note: if utilization > 100% (totalSupply < totalBorrow), then all the amount above 100% utilization\\n            // can only be revenue.\\n        } else {\\n            // if supply is 0, then rest of balance can be withdrawn as revenue so that no amounts get stuck\\n            revenueAmount_ = liquidityTokenBalance_;\\n        }\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                      CALC LIMITS                       /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev calculates withdrawal limit before an operate execution:\\n    /// amount of user supply that must stay supplied (not amount that can be withdrawn).\\n    /// i.e. if user has supplied 100m and can withdraw 5M, this method returns the 95M, not the withdrawable amount 5M\\n    /// @param userSupplyData_ user supply data packed uint256 from storage\\n    /// @param userSupply_ current user supply amount already extracted from `userSupplyData_` and converted from BigMath\\n    /// @return currentWithdrawalLimit_ current withdrawal limit updated for expansion since last interaction.\\n    ///         returned value is in raw for with interest mode, normal amount for interest free mode!\\n    function calcWithdrawalLimitBeforeOperate(\\n        uint256 userSupplyData_,\\n        uint256 userSupply_\\n    ) internal view returns (uint256 currentWithdrawalLimit_) {\\n        // @dev must support handling the case where timestamp is 0 (config is set but no interactions yet).\\n        // first tx where timestamp is 0 will enter `if (lastWithdrawalLimit_ == 0)` because lastWithdrawalLimit_ is not set yet.\\n        // returning max withdrawal allowed, which is not exactly right but doesn't matter because the first interaction must be\\n        // a deposit anyway. Important is that it would not revert.\\n\\n        // Note the first time a deposit brings the user supply amount to above the base withdrawal limit, the active limit\\n        // is the fully expanded limit immediately.\\n\\n        // extract last set withdrawal limit\\n        uint256 lastWithdrawalLimit_ = (userSupplyData_ >>\\n            LiquiditySlotsLink.BITS_USER_SUPPLY_PREVIOUS_WITHDRAWAL_LIMIT) & X64;\\n        lastWithdrawalLimit_ =\\n            (lastWithdrawalLimit_ >> DEFAULT_EXPONENT_SIZE) <<\\n            (lastWithdrawalLimit_ & DEFAULT_EXPONENT_MASK);\\n        if (lastWithdrawalLimit_ == 0) {\\n            // withdrawal limit is not activated. Max withdrawal allowed\\n            return 0;\\n        }\\n\\n        uint256 maxWithdrawableLimit_;\\n        uint256 temp_;\\n        unchecked {\\n            // extract max withdrawable percent of user supply and\\n            // calculate maximum withdrawable amount expandPercentage of user supply at full expansion duration elapsed\\n            // e.g.: if 10% expandPercentage, meaning 10% is withdrawable after full expandDuration has elapsed.\\n\\n            // userSupply_ needs to be atleast 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            maxWithdrawableLimit_ =\\n                (((userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_PERCENT) & X14) * userSupply_) /\\n                FOUR_DECIMALS;\\n\\n            // time elapsed since last withdrawal limit was set (in seconds)\\n            // @dev last process timestamp is guaranteed to exist for withdrawal, as a supply must have happened before.\\n            // last timestamp can not be > current timestamp\\n            temp_ =\\n                block.timestamp -\\n                ((userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_LAST_UPDATE_TIMESTAMP) & X33);\\n        }\\n        // calculate withdrawable amount of expandPercent that is elapsed of expandDuration.\\n        // e.g. if 60% of expandDuration has elapsed, then user should be able to withdraw 6% of user supply, down to 94%.\\n        // Note: no explicit check for this needed, it is covered by setting minWithdrawalLimit_ if needed.\\n        temp_ =\\n            (maxWithdrawableLimit_ * temp_) /\\n            // extract expand duration: After this, decrement won't happen (user can withdraw 100% of withdraw limit)\\n            ((userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_DURATION) & X24); // expand duration can never be 0\\n        // calculate expanded withdrawal limit: last withdrawal limit - withdrawable amount.\\n        // Note: withdrawable amount here can grow bigger than userSupply if timeElapsed is a lot bigger than expandDuration,\\n        // which would cause the subtraction `lastWithdrawalLimit_ - withdrawableAmount_` to revert. In that case, set 0\\n        // which will cause minimum (fully expanded) withdrawal limit to be set in lines below.\\n        unchecked {\\n            // underflow explicitly checked & handled\\n            currentWithdrawalLimit_ = lastWithdrawalLimit_ > temp_ ? lastWithdrawalLimit_ - temp_ : 0;\\n            // calculate minimum withdrawal limit: minimum amount of user supply that must stay supplied at full expansion.\\n            // subtraction can not underflow as maxWithdrawableLimit_ is a percentage amount (<=100%) of userSupply_\\n            temp_ = userSupply_ - maxWithdrawableLimit_;\\n        }\\n        // if withdrawal limit is decreased below minimum then set minimum\\n        // (e.g. when more than expandDuration time has elapsed)\\n        if (temp_ > currentWithdrawalLimit_) {\\n            currentWithdrawalLimit_ = temp_;\\n        }\\n    }\\n\\n    /// @dev calculates withdrawal limit after an operate execution:\\n    /// amount of user supply that must stay supplied (not amount that can be withdrawn).\\n    /// i.e. if user has supplied 100m and can withdraw 5M, this method returns the 95M, not the withdrawable amount 5M\\n    /// @param userSupplyData_ user supply data packed uint256 from storage\\n    /// @param userSupply_ current user supply amount already extracted from `userSupplyData_` and added / subtracted with the executed operate amount\\n    /// @param newWithdrawalLimit_ current withdrawal limit updated for expansion since last interaction, result from `calcWithdrawalLimitBeforeOperate`\\n    /// @return withdrawalLimit_ updated withdrawal limit that should be written to storage. returned value is in\\n    ///                          raw for with interest mode, normal amount for interest free mode!\\n    function calcWithdrawalLimitAfterOperate(\\n        uint256 userSupplyData_,\\n        uint256 userSupply_,\\n        uint256 newWithdrawalLimit_\\n    ) internal pure returns (uint256) {\\n        // temp_ => base withdrawal limit. below this, maximum withdrawals are allowed\\n        uint256 temp_ = (userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_BASE_WITHDRAWAL_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        // if user supply is below base limit then max withdrawals are allowed\\n        if (userSupply_ < temp_) {\\n            return 0;\\n        }\\n        // temp_ => withdrawal limit expandPercent (is in 1e2 decimals)\\n        temp_ = (userSupplyData_ >> LiquiditySlotsLink.BITS_USER_SUPPLY_EXPAND_PERCENT) & X14;\\n        unchecked {\\n            // temp_ => minimum withdrawal limit: userSupply - max withdrawable limit (userSupply * expandPercent))\\n            // userSupply_ needs to be atleast 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            // subtraction can not underflow as maxWithdrawableLimit_ is a percentage amount (<=100%) of userSupply_\\n            temp_ = userSupply_ - ((userSupply_ * temp_) / FOUR_DECIMALS);\\n        }\\n        // if new (before operation) withdrawal limit is less than minimum limit then set minimum limit.\\n        // e.g. can happen on new deposits. withdrawal limit is instantly fully expanded in a scenario where\\n        // increased deposit amount outpaces withrawals.\\n        if (temp_ > newWithdrawalLimit_) {\\n            return temp_;\\n        }\\n        return newWithdrawalLimit_;\\n    }\\n\\n    /// @dev calculates borrow limit before an operate execution:\\n    /// total amount user borrow can reach (not borrowable amount in current operation).\\n    /// i.e. if user has borrowed 50M and can still borrow 5M, this method returns the total 55M, not the borrowable amount 5M\\n    /// @param userBorrowData_ user borrow data packed uint256 from storage\\n    /// @param userBorrow_ current user borrow amount already extracted from `userBorrowData_`\\n    /// @return currentBorrowLimit_ current borrow limit updated for expansion since last interaction. returned value is in\\n    ///                             raw for with interest mode, normal amount for interest free mode!\\n    function calcBorrowLimitBeforeOperate(\\n        uint256 userBorrowData_,\\n        uint256 userBorrow_\\n    ) internal view returns (uint256 currentBorrowLimit_) {\\n        // @dev must support handling the case where timestamp is 0 (config is set but no interactions yet) -> base limit.\\n        // first tx where timestamp is 0 will enter `if (maxExpandedBorrowLimit_ < baseBorrowLimit_)` because `userBorrow_` and thus\\n        // `maxExpansionLimit_` and thus `maxExpandedBorrowLimit_` is 0 and `baseBorrowLimit_` can not be 0.\\n\\n        // temp_ = extract borrow expand percent (is in 1e2 decimals)\\n        uint256 temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_PERCENT) & X14;\\n\\n        uint256 maxExpansionLimit_;\\n        uint256 maxExpandedBorrowLimit_;\\n        unchecked {\\n            // calculate max expansion limit: Max amount limit can expand to since last interaction\\n            // userBorrow_ needs to be atleast 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            maxExpansionLimit_ = ((userBorrow_ * temp_) / FOUR_DECIMALS);\\n\\n            // calculate max borrow limit: Max point limit can increase to since last interaction\\n            maxExpandedBorrowLimit_ = userBorrow_ + maxExpansionLimit_;\\n        }\\n\\n        // currentBorrowLimit_ = extract base borrow limit\\n        currentBorrowLimit_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_BASE_BORROW_LIMIT) & X18;\\n        currentBorrowLimit_ =\\n            (currentBorrowLimit_ >> DEFAULT_EXPONENT_SIZE) <<\\n            (currentBorrowLimit_ & DEFAULT_EXPONENT_MASK);\\n\\n        if (maxExpandedBorrowLimit_ < currentBorrowLimit_) {\\n            return currentBorrowLimit_;\\n        }\\n        // time elapsed since last borrow limit was set (in seconds)\\n        unchecked {\\n            // temp_ = timeElapsed_ (last timestamp can not be > current timestamp)\\n            temp_ =\\n                block.timestamp -\\n                ((userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_LAST_UPDATE_TIMESTAMP) & X33); // extract last update timestamp\\n        }\\n\\n        // currentBorrowLimit_ = expandedBorrowableAmount + extract last set borrow limit\\n        currentBorrowLimit_ =\\n            // calculate borrow limit expansion since last interaction for `expandPercent` that is elapsed of `expandDuration`.\\n            // divisor is extract expand duration (after this, full expansion to expandPercentage happened).\\n            ((maxExpansionLimit_ * temp_) /\\n                ((userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_DURATION) & X24)) + // expand duration can never be 0\\n            //  extract last set borrow limit\\n            BigMathMinified.fromBigNumber(\\n                (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_PREVIOUS_BORROW_LIMIT) & X64,\\n                DEFAULT_EXPONENT_SIZE,\\n                DEFAULT_EXPONENT_MASK\\n            );\\n\\n        // if timeElapsed is bigger than expandDuration, new borrow limit would be > max expansion,\\n        // so set to `maxExpandedBorrowLimit_` in that case.\\n        // also covers the case where last process timestamp = 0 (timeElapsed would simply be very big)\\n        if (currentBorrowLimit_ > maxExpandedBorrowLimit_) {\\n            currentBorrowLimit_ = maxExpandedBorrowLimit_;\\n        }\\n        // temp_ = extract hard max borrow limit. Above this user can never borrow (not expandable above)\\n        temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_MAX_BORROW_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        if (currentBorrowLimit_ > temp_) {\\n            currentBorrowLimit_ = temp_;\\n        }\\n    }\\n\\n    /// @dev calculates borrow limit after an operate execution:\\n    /// total amount user borrow can reach (not borrowable amount in current operation).\\n    /// i.e. if user has borrowed 50M and can still borrow 5M, this method returns the total 55M, not the borrowable amount 5M\\n    /// @param userBorrowData_ user borrow data packed uint256 from storage\\n    /// @param userBorrow_ current user borrow amount already extracted from `userBorrowData_` and added / subtracted with the executed operate amount\\n    /// @param newBorrowLimit_ current borrow limit updated for expansion since last interaction, result from `calcBorrowLimitBeforeOperate`\\n    /// @return borrowLimit_ updated borrow limit that should be written to storage.\\n    ///                      returned value is in raw for with interest mode, normal amount for interest free mode!\\n    function calcBorrowLimitAfterOperate(\\n        uint256 userBorrowData_,\\n        uint256 userBorrow_,\\n        uint256 newBorrowLimit_\\n    ) internal pure returns (uint256 borrowLimit_) {\\n        // temp_ = extract borrow expand percent\\n        uint256 temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_EXPAND_PERCENT) & X14; // (is in 1e2 decimals)\\n\\n        unchecked {\\n            // borrowLimit_ = calculate maximum borrow limit at full expansion.\\n            // userBorrow_ needs to be at least 1e73 to overflow max limit of ~1e77 in uint256 (no token in existence where this is possible).\\n            borrowLimit_ = userBorrow_ + ((userBorrow_ * temp_) / FOUR_DECIMALS);\\n        }\\n\\n        // temp_ = extract base borrow limit\\n        temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_BASE_BORROW_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        if (borrowLimit_ < temp_) {\\n            // below base limit, borrow limit is always base limit\\n            return temp_;\\n        }\\n        // temp_ = extract hard max borrow limit. Above this user can never borrow (not expandable above)\\n        temp_ = (userBorrowData_ >> LiquiditySlotsLink.BITS_USER_BORROW_MAX_BORROW_LIMIT) & X18;\\n        temp_ = (temp_ >> DEFAULT_EXPONENT_SIZE) << (temp_ & DEFAULT_EXPONENT_MASK);\\n\\n        // make sure fully expanded borrow limit is not above hard max borrow limit\\n        if (borrowLimit_ > temp_) {\\n            borrowLimit_ = temp_;\\n        }\\n        // if new borrow limit (from before operate) is > max borrow limit, set max borrow limit.\\n        // (e.g. on a repay shrinking instantly to fully expanded borrow limit from new borrow amount. shrinking is instant)\\n        if (newBorrowLimit_ > borrowLimit_) {\\n            return borrowLimit_;\\n        }\\n        return newBorrowLimit_;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    //////////                      CALC RATES                        /////////\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev Calculates new borrow rate from utilization for a token\\n    /// @param rateData_ rate data packed uint256 from storage for the token\\n    /// @param utilization_ totalBorrow / totalSupply. 1e4 = 100% utilization\\n    /// @return rate_ rate for that particular token in 1e2 precision (e.g. 5% rate = 500)\\n    function calcBorrowRateFromUtilization(uint256 rateData_, uint256 utilization_) internal returns (uint256 rate_) {\\n        // extract rate version: 4 bits (0xF) starting from bit 0\\n        uint256 rateVersion_ = (rateData_ & 0xF);\\n\\n        if (rateVersion_ == 1) {\\n            rate_ = calcRateV1(rateData_, utilization_);\\n        } else if (rateVersion_ == 2) {\\n            rate_ = calcRateV2(rateData_, utilization_);\\n        } else {\\n            revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__UnsupportedRateVersion);\\n        }\\n\\n        if (rate_ > X16) {\\n            // hard cap for borrow rate at maximum value 16 bits (65535) to make sure it does not overflow storage space.\\n            // this is unlikely to ever happen if configs stay within expected levels.\\n            rate_ = X16;\\n            // emit event to more easily become aware\\n            emit BorrowRateMaxCap();\\n        }\\n    }\\n\\n    /// @dev calculates the borrow rate based on utilization for rate data version 1 (with one kink) in 1e2 precision\\n    /// @param rateData_ rate data packed uint256 from storage for the token\\n    /// @param utilization_  in 1e2 (100% = 1e4)\\n    /// @return rate_ rate in 1e2 precision\\n    function calcRateV1(uint256 rateData_, uint256 utilization_) internal pure returns (uint256 rate_) {\\n        /// For rate v1 (one kink) ------------------------------------------------------\\n        /// Next 16  bits =>  4 - 19 => Rate at utilization 0% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  20- 35 => Utilization at kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  36- 51 => Rate at utilization kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  52- 67 => Rate at utilization 100% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Last 188 bits =>  68-255 => blank, might come in use in future\\n\\n        // y = mx + c.\\n        // y is borrow rate\\n        // x is utilization\\n        // m = slope (m can also be negative for declining rates)\\n        // c is constant (c can be negative)\\n\\n        uint256 y1_;\\n        uint256 y2_;\\n        uint256 x1_;\\n        uint256 x2_;\\n\\n        // extract kink1: 16 bits (0xFFFF) starting from bit 20\\n        // kink is in 1e2, same as utilization, so no conversion needed for direct comparison of the two\\n        uint256 kink1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_UTILIZATION_AT_KINK) & X16;\\n        if (utilization_ < kink1_) {\\n            // if utilization is less than kink\\n            y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_ZERO) & X16;\\n            y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_KINK) & X16;\\n            x1_ = 0; // 0%\\n            x2_ = kink1_;\\n        } else {\\n            // else utilization is greater than kink\\n            y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_KINK) & X16;\\n            y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_MAX) & X16;\\n            x1_ = kink1_;\\n            x2_ = FOUR_DECIMALS; // 100%\\n        }\\n\\n        int256 constant_;\\n        int256 slope_;\\n        unchecked {\\n            // calculating slope with twelve decimal precision. m = (y2 - y1) / (x2 - x1).\\n            // utilization of x2 can not be <= utilization of x1 (so no underflow or 0 divisor)\\n            // y is in 1e2 so can not overflow when multiplied with TWELVE_DECIMALS\\n            slope_ = (int256(y2_ - y1_) * int256(TWELVE_DECIMALS)) / int256((x2_ - x1_));\\n\\n            // calculating constant at 12 decimal precision. slope is already in 12 decimal hence only multiple with y1. c = y - mx.\\n            // maximum y1_ value is 65535. 65535 * 1e12 can not overflow int256\\n            // maximum slope is 65535 - 0 * TWELVE_DECIMALS / 1 = 65535 * 1e12;\\n            // maximum x1_ is 100% (9_999 actually) => slope_ * x1_ can not overflow int256\\n            // subtraction most extreme case would be  0 - max value slope_ * x1_ => can not underflow int256\\n            constant_ = int256(y1_ * TWELVE_DECIMALS) - (slope_ * int256(x1_));\\n\\n            // calculating new borrow rate\\n            // - slope_ max value is 65535 * 1e12,\\n            // - utilization max value is let's say 500% (extreme case where borrow rate increases borrow amount without new supply)\\n            // - constant max value is 65535 * 1e12\\n            // so max values are 65535 * 1e12 * 50_000 + 65535 * 1e12 -> 3.2768*10^21, which easily fits int256\\n            // divisor TWELVE_DECIMALS can not be 0\\n            slope_ = (slope_ * int256(utilization_)) + constant_; // reusing `slope_` as variable for gas savings\\n            if (slope_ < 0) {\\n                revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__BorrowRateNegative);\\n            }\\n            rate_ = uint256(slope_) / TWELVE_DECIMALS;\\n        }\\n    }\\n\\n    /// @dev calculates the borrow rate based on utilization for rate data version 2 (with two kinks) in 1e4 precision\\n    /// @param rateData_ rate data packed uint256 from storage for the token\\n    /// @param utilization_  in 1e2 (100% = 1e4)\\n    /// @return rate_ rate in 1e4 precision\\n    function calcRateV2(uint256 rateData_, uint256 utilization_) internal pure returns (uint256 rate_) {\\n        /// For rate v2 (two kinks) -----------------------------------------------------\\n        /// Next 16  bits =>  4 - 19 => Rate at utilization 0% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  20- 35 => Utilization at kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  36- 51 => Rate at utilization kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  52- 67 => Utilization at kink2 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  68- 83 => Rate at utilization kink2 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Next 16  bits =>  84- 99 => Rate at utilization 100% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n        /// Last 156 bits => 100-255 => blank, might come in use in future\\n\\n        // y = mx + c.\\n        // y is borrow rate\\n        // x is utilization\\n        // m = slope (m can also be negative for declining rates)\\n        // c is constant (c can be negative)\\n\\n        uint256 y1_;\\n        uint256 y2_;\\n        uint256 x1_;\\n        uint256 x2_;\\n\\n        // extract kink1: 16 bits (0xFFFF) starting from bit 20\\n        // kink is in 1e2, same as utilization, so no conversion needed for direct comparison of the two\\n        uint256 kink1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_UTILIZATION_AT_KINK1) & X16;\\n        if (utilization_ < kink1_) {\\n            // if utilization is less than kink1\\n            y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_ZERO) & X16;\\n            y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK1) & X16;\\n            x1_ = 0; // 0%\\n            x2_ = kink1_;\\n        } else {\\n            // extract kink2: 16 bits (0xFFFF) starting from bit 52\\n            uint256 kink2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_UTILIZATION_AT_KINK2) & X16;\\n            if (utilization_ < kink2_) {\\n                // if utilization is less than kink2\\n                y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK1) & X16;\\n                y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK2) & X16;\\n                x1_ = kink1_;\\n                x2_ = kink2_;\\n            } else {\\n                // else utilization is greater than kink2\\n                y1_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK2) & X16;\\n                y2_ = (rateData_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_MAX) & X16;\\n                x1_ = kink2_;\\n                x2_ = FOUR_DECIMALS;\\n            }\\n        }\\n\\n        int256 constant_;\\n        int256 slope_;\\n        unchecked {\\n            // calculating slope with twelve decimal precision. m = (y2 - y1) / (x2 - x1).\\n            // utilization of x2 can not be <= utilization of x1 (so no underflow or 0 divisor)\\n            // y is in 1e2 so can not overflow when multiplied with TWELVE_DECIMALS\\n            slope_ = (int256(y2_ - y1_) * int256(TWELVE_DECIMALS)) / int256((x2_ - x1_));\\n\\n            // calculating constant at 12 decimal precision. slope is already in 12 decimal hence only multiple with y1. c = y - mx.\\n            // maximum y1_ value is 65535. 65535 * 1e12 can not overflow int256\\n            // maximum slope is 65535 - 0 * TWELVE_DECIMALS / 1 = 65535 * 1e12;\\n            // maximum x1_ is 100% (9_999 actually) => slope_ * x1_ can not overflow int256\\n            // subtraction most extreme case would be  0 - max value slope_ * x1_ => can not underflow int256\\n            constant_ = int256(y1_ * TWELVE_DECIMALS) - (slope_ * int256(x1_));\\n\\n            // calculating new borrow rate\\n            // - slope_ max value is 65535 * 1e12,\\n            // - utilization max value is let's say 500% (extreme case where borrow rate increases borrow amount without new supply)\\n            // - constant max value is 65535 * 1e12\\n            // so max values are 65535 * 1e12 * 50_000 + 65535 * 1e12 -> 3.2768*10^21, which easily fits int256\\n            // divisor TWELVE_DECIMALS can not be 0\\n            slope_ = (slope_ * int256(utilization_)) + constant_; // reusing `slope_` as variable for gas savings\\n            if (slope_ < 0) {\\n                revert FluidLiquidityCalcsError(ErrorTypes.LiquidityCalcs__BorrowRateNegative);\\n            }\\n            rate_ = uint256(slope_) / TWELVE_DECIMALS;\\n        }\\n    }\\n\\n    /// @dev reads the total supply out of Liquidity packed storage `totalAmounts_` for `supplyExchangePrice_`\\n    function getTotalSupply(\\n        uint256 totalAmounts_,\\n        uint256 supplyExchangePrice_\\n    ) internal pure returns (uint256 totalSupply_) {\\n        // totalSupply_ => supplyInterestFree\\n        totalSupply_ = (totalAmounts_ >> LiquiditySlotsLink.BITS_TOTAL_AMOUNTS_SUPPLY_INTEREST_FREE) & X64;\\n        totalSupply_ = (totalSupply_ >> DEFAULT_EXPONENT_SIZE) << (totalSupply_ & DEFAULT_EXPONENT_MASK);\\n\\n        uint256 totalSupplyRaw_ = totalAmounts_ & X64; // no shifting as supplyRaw is first 64 bits\\n        totalSupplyRaw_ = (totalSupplyRaw_ >> DEFAULT_EXPONENT_SIZE) << (totalSupplyRaw_ & DEFAULT_EXPONENT_MASK);\\n\\n        // totalSupply = supplyInterestFree + supplyRawInterest normalized from raw\\n        totalSupply_ += ((totalSupplyRaw_ * supplyExchangePrice_) / EXCHANGE_PRICES_PRECISION);\\n    }\\n\\n    /// @dev reads the total borrow out of Liquidity packed storage `totalAmounts_` for `borrowExchangePrice_`\\n    function getTotalBorrow(\\n        uint256 totalAmounts_,\\n        uint256 borrowExchangePrice_\\n    ) internal pure returns (uint256 totalBorrow_) {\\n        // totalBorrow_ => borrowInterestFree\\n        // no & mask needed for borrow interest free as it occupies the last bits in the storage slot\\n        totalBorrow_ = (totalAmounts_ >> LiquiditySlotsLink.BITS_TOTAL_AMOUNTS_BORROW_INTEREST_FREE);\\n        totalBorrow_ = (totalBorrow_ >> DEFAULT_EXPONENT_SIZE) << (totalBorrow_ & DEFAULT_EXPONENT_MASK);\\n\\n        uint256 totalBorrowRaw_ = (totalAmounts_ >> LiquiditySlotsLink.BITS_TOTAL_AMOUNTS_BORROW_WITH_INTEREST) & X64;\\n        totalBorrowRaw_ = (totalBorrowRaw_ >> DEFAULT_EXPONENT_SIZE) << (totalBorrowRaw_ & DEFAULT_EXPONENT_MASK);\\n\\n        // totalBorrow = borrowInterestFree + borrowRawInterest normalized from raw\\n        totalBorrow_ += ((totalBorrowRaw_ * borrowExchangePrice_) / EXCHANGE_PRICES_PRECISION);\\n    }\\n}\",\"versionPragma\":\"0.8.21\"}}}","address":"0x236c86cFe8F8997DBac9138096bceB03807b09cc","bytecode":"0x60a060405234801561001057600080fd5b5030608052608051612998610037600039600081816102ca01526109d201526129986000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636dc0ae22116100ad578063aa98df3911610071578063aa98df391461027c578063b788f3a11461028f578063bffa7f0f146102aa578063cc025f7c146102c5578063e6bd26a2146102ec57600080fd5b80636dc0ae22146101fd5780637aadef8b146102185780637e2f35fa1461023357806397b87b4a1461024e5780639d3d2a781461026957600080fd5b806325ad7f4d116100f457806325ad7f4d146101a25780632861c7d1146101bd578063588c77e6146101d857806361461954146101f357806366760d7d146101fb57600080fd5b80630680f417146101265780630bc9136e1461015e578063103f29071461017457806312e366aa1461018f575b600080fd5b61014173a0d3707c569ff8c87fa923d3823ec5d81c98be7881565b6040516001600160a01b0390911681526020015b60405180910390f35b610166602c81565b604051908152602001610155565b61014173324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d81565b61014161019d36600461215b565b6102ff565b610141739efde135ca4832abf0408c44c6f5f370eb0f35e881565b6101417352aa899454998be5b000ad077a46bbe360f4e49781565b610141735c43aac965ff230ac1cf63e924d0153291d78bad81565b6101fb61037d565b005b610141730204cd037b2ec03605cfdfe482d8e257c765fa1b81565b610141732386dc45added673317ef068992f19421b481f4c81565b61014173059a94a72451c0ae1cc1ce4bf0db52421bbe821081565b61014173f9b539cd37fc81bbea1f078240d16b988bbae07381565b610166610277366004612189565b610402565b6101fb61028a36600461221f565b610750565b610141734f6f977acdd1177dcd81ab83074855ecb9c2d49e81565b61014173a45f7bd6a5ff45d31aace6bcd3d426d9328cea0181565b6101417f000000000000000000000000000000000000000000000000000000000000000081565b6101416102fa36600461215b565b610afd565b604051630971b35560e11b81526004810182905260009073f9b539cd37fc81bbea1f078240d16b988bbae073906312e366aa906024015b602060405180830381865afa158015610353573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037791906122b4565b92915050565b30732386dc45added673317ef068992f19421b481f4c146103d85760405162461bcd60e51b815260206004820152601060248201526f3737ba16bb30b634b216b1b0b63632b960811b60448201526064015b60405180910390fd5b6103e0610b38565b6103e8610cdd565b6103f061101c565b6103f861119a565b6104006113e6565b565b600080841180156104135750600083115b156104605760405162461bcd60e51b815260206004820181905260248201527f626f74682075736420616e6420616d6f756e7420617265206e6f74207a65726f60448201526064016103cf565b604080516001600160a01b03871660208083019190915260058284015282518083038401815260608301938490528051910120632d71cdb960e21b90925260648101919091526000907352aa899454998be5b000ad077a46bbe360f4e4979063b5c736e490608401602060405180830381865afa1580156104e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050991906122d8565b90506000806105178361177c565b90925090506000601273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038b1601610553575062040b28905060126106d0565b737f39c581f595b53c5cb19bd0b3f8da6c935e2c9f196001600160a01b038b160161058657506204ce78905060126106d0565b73cd5fe23c85820f7b72d0926fc9b05b43e359b7ed196001600160a01b038b16016105b9575062043bfc905060126106d0565b6001600160a01b038a1673cbb7c0000ab88b473b1f5afd9ef808440eed33bf148061060057506001600160a01b038a16732260fac5e5542a773aa44fbcfedf7c193bc2c599145b1561061357506267e990905060086106d0565b6001600160a01b038a1673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48148061065a57506001600160a01b038a1673dac17f958d2ee523a2206206994597c13d831ec7145b1561066b57506064905060066106d0565b739d39a5de30e57443bff2a8307a4256c8797a3496196001600160a01b038b160161069c5750606e905060126106d0565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd0b599bdd5b9960ba1b60448201526064016103cf565b6000876106dd57836106df565b845b9050891561070e57806106f78b64e8d4a51000612307565b6107019190612334565b9650505050505050610748565b606461071a8285612307565b6107249190612334565b61072f83600a61243a565b61073e8b64e8d4a51000612307565b6106f79190612307565b949350505050565b3373a45f7bd6a5ff45d31aace6bcd3d426d9328cea011480610785575033734f6f977acdd1177dcd81ab83074855ecb9c2d49e145b806107a357503073059a94a72451c0ae1cc1ce4bf0db52421bbe8210145b806107c1575030739efde135ca4832abf0408c44c6f5f370eb0f35e8145b806107ca575060015b61080f5760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c8b5b9bdd0b585b1b1bddd95960521b60448201526064016103cf565b604080516001808252818301909252600090826020808301908036833701905050905060008267ffffffffffffffff81111561084d5761084d6121d8565b604051908082528060200260200182016040528015610876578160200160208202803683370190505b50905060008367ffffffffffffffff811115610894576108946121d8565b6040519080825280602002602001820160405280156108c757816020015b60608152602001906001900390816108b25790505b50905060008467ffffffffffffffff8111156108e5576108e56121d8565b60405190808252806020026020018201604052801561091857816020015b60608152602001906001900390816109035790505b509050732386dc45added673317ef068992f19421b481f4c8460008151811061094357610943612446565b60200260200101906001600160a01b031690816001600160a01b03168152505060008360008151811061097857610978612446565b60200260200101818152505060405180606001604052806024815260200161293f60249139826000815181106109b0576109b0612446565b602090810291909101810191909152604080516000815291820181526109f9917f00000000000000000000000000000000000000000000000000000000000000009181016124a2565b60405160208183030381529060405281600081518110610a1b57610a1b612446565b6020908102919091010152604051636d4ab48d60e11b8152600090730204cd037b2ec03605cfdfe482d8e257c765fa1b9063da95691a90610a689088908890889088908e90600401612573565b6020604051808303816000875af1158015610a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aab91906122d8565b9050602c8114610af45760405162461bcd60e51b815260206004820152601460248201527350524f504f53414c5f49535f4e4f545f53414d4560601b60448201526064016103cf565b50505050505050565b60405163735e935160e11b81526004810182905260009073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a290602401610336565b6000604051806101000160405280610b5060016102ff565b6001600160a01b03168152737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0602082015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6040820152600160608201819052608082015262b71b0060a0820181905260c082015263017d784060e0909101529050610bc381611971565b506000604051806101000160405280610bdc60026102ff565b6001600160a01b0316815273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48602082015273dac17f958d2ee523a2206206994597c13d831ec760408201526000606082018190526001608083015260a08201526298968060c08201526301312d0060e0909101529050610c4f81611971565b506000604051806101000160405280610c6860036102ff565b6001600160a01b0316815273cbb7c0000ab88b473b1f5afd9ef808440eed33bf6020820152732260fac5e5542a773aa44fbcfedf7c193bc2c59960408201526001606082018190526080820152627270e060a0820181905260c08201526298968060e0909101529050610cda81611971565b50565b60006040518060800160405280610cf46022610afd565b6001600160a01b03168152602001600281526000602082018190526040909101529050610d2081611add565b5060006040518060800160405280610d386023610afd565b6001600160a01b031681526020016001815273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee602082015260006040909101529050610d7781611add565b5060006040518060800160405280610d8f6024610afd565b6001600160a01b0316815260200160018152737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0602082015260006040909101529050610dce81611add565b5060006040518060800160405280610de66025610afd565b6001600160a01b031681526020016001815273cd5fe23c85820f7b72d0926fc9b05b43e359b7ee602082015260006040909101529050610e2581611add565b5060006040518060800160405280610e3d6026610afd565b6001600160a01b0316815260200160018152732260fac5e5542a773aa44fbcfedf7c193bc2c599602082015260006040909101529050610e7c81611add565b5060006040518060800160405280610e946027610afd565b6001600160a01b031681526020016001815273cbb7c0000ab88b473b1f5afd9ef808440eed33bf602082015260006040909101529050610ed381611add565b5060006040518060800160405280610eeb6028610afd565b6001600160a01b0316815260200160018152739d39a5de30e57443bff2a8307a4256c8797a3497602082015260006040909101529050610f2a81611add565b5060006040518060800160405280610f426029610afd565b6001600160a01b03168152602001600281526000602082018190526040909101529050610f6e81611add565b5060006040518060800160405280610f86602a610afd565b6001600160a01b03168152602001600081526000602082015273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040909101529050610fc581611add565b5060006040518060800160405280610fdd602b610afd565b6001600160a01b03168152602001600081526000602082015273dac17f958d2ee523a2206206994597c13d831ec76040909101529050610cda81611add565b6040516311272db960e31b8152738ec5e29ea39b2f64b21e32cb9ff11d5059982f8c6004820181905290736967e68f7f9b3921181f27e66aa9c3ac7e13dbc0906000907352aa899454998be5b000ad077a46bbe360f4e497906389396dc890602401600060405180830381865afa15801561109b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110c39190810190612628565b60405163110bad1960e11b81526001600160a01b03851660048201529091507352aa899454998be5b000ad077a46bbe360f4e497906322175a3290602401600060405180830381600087803b15801561111b57600080fd5b505af115801561112f573d6000803e3d6000fd5b50506040516378600da160e11b81527352aa899454998be5b000ad077a46bbe360f4e497925063f0c01b42915061116c90859085906004016126dc565b600060405180830381600087803b15801561118657600080fd5b505af1158015610af4573d6000803e3d6000fd5b60408051600380825260808201909252600091816020015b6111fb6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816111b25790505090506040518060e00160405280737f39c581f595b53c5cb19bd0b3f8da6c935e2ca06001600160a01b03168152602001611f408152602001612328815260200160328152602001606481526020016101f481526020016127108152508160008151811061127d5761127d612446565b60200260200101819052506040518060e0016040528073cbb7c0000ab88b473b1f5afd9ef808440eed33bf6001600160a01b03168152602001611f40815260200161232881526020016064815260200161012c81526020016103e88152602001612710815250816001815181106112f6576112f6612446565b60200260200101819052506040518060e00160405280732260fac5e5542a773aa44fbcfedf7c193bc2c5996001600160a01b03168152602001611f40815260200161232881526020016064815260200161012c81526020016103e881526020016127108152508160028151811061136f5761136f612446565b6020908102919091010152604051639dde597760e01b81527352aa899454998be5b000ad077a46bbe360f4e49790639dde5977906113b190849060040161273c565b600060405180830381600087803b1580156113cb57600080fd5b505af11580156113df573d6000803e3d6000fd5b5050505050565b6040805160018082528183019092526000916020808301908036833701905050905063ec0684cd60e01b8160008151811061142357611423612446565b6001600160e01b03199092166020928302919091019091015261147173c10a855055eb3939fcaa512253ec3f671c4ab83973b00df786d3611ace29d19de744b4147f378715f4836000611c25565b506040805160018082528183019092526000916020808301908036833701905050905063b4cd87e860e01b816000815181106114af576114af612446565b6001600160e01b0319909216602092830291909101909101526114e960007388ebad0f40ae93ea196b0094362525fae28ae3268382611c25565b506040805160018082528183019092526000916020808301908036833701905050905063abe09ee960e01b8160008151811061152757611527612446565b6001600160e01b031990921660209283029190910190910152611561600073a82bd4a64644054d85fa0d7a7643caf5a15f534b8382611c25565b5060408051600180825281830190925260009160208083019080368337019050509050635fe9e5b860e01b8160008151811061159f5761159f612446565b6001600160e01b0319909216602092830291909101909101526115ed7324d58fcfa6d74c5acc1e4b6814bf5703e1cdd8a873952cf2869dc2c59aaaf2311ec6c7c0a43f9cb6cf836000611c25565b5060405163c39aa07d60e01b815273ba15a31c8f9cc3cb1b6e08755d8b22a6af18d83d600482015273a0d3707c569ff8c87fa923d3823ec5d81c98be789063c39aa07d90602401600060405180830381600087803b15801561164e57600080fd5b505af1158015611662573d6000803e3d6000fd5b5060009250600191506116729050565b60405190808252806020026020018201604052801561169b578160200160208202803683370190505b506040805160018082528183019092529192506000919060208083019080368337019050509050600b826000815181106116d7576116d7612446565b602002602001019060ff16908160ff1681525050620e7ef08160008151811061170257611702612446565b60209081029190910101526040516307ac73b360e31b815273a0d3707c569ff8c87fa923d3823ec5d81c98be7890633d639d989061174690859085906004016127ba565b600060405180830381600087803b15801561176057600080fd5b505af1158015611774573d6000803e3d6000fd5b505050505050565b67ffffffffffffffff605b82901c811690609b83901c1681158061179e575080155b156117c157604051636a86ba8960e11b81526201117160048201526024016103cf565b61ffff8316603a84901c6401ffffffff16428181039160ea87901c617fff169114806117eb575082155b806117f65750806001145b1561180357505050915091565b64496cebb80084840283020484019350617fff60db87901c1692508260010361182e57505050915091565b826001166001036118835760019290921c91826c7e37be2022c0914b26800000008161185c5761185c61231e565b049250612710601e87901c613fff166b033b2e3c9fd0803ce80000008501020492506118b0565b60019290921c916305f5e100601e87901c613fff166127108501026b033b2e3c9fd0803ce8000000020492505b806001166001036118e75760011c61271081016b033b2e3c9fd0803ce80000008202816118df576118df61231e565b04905061191d565b60011c61271081016b033b2e3c9fd0803ce800000082028161190b5761190b61231e565b046b033b2e3c9fd0803ce80000000390505b760a70c3c40a64e6c51999090b65f67d92400000000000008382026127100261ffff881691900402601087901c613fff16612710030292506801b5a660ea44b8000085840283020485019450505050915091565b806060015115611a1c5760006040518060a0016040528083600001516001600160a01b0316815260200183602001516001600160a01b031681526020016113888152602001610e1081526020018360a0015181525090506119d181611eeb565b6040805160a0808201835284516001600160a01b0390811683528584015116602083015261138892820192909252610e106060820152908301516080820152611a1981611eeb565b50505b806080015115610cda5760006040518060c0016040528083600001516001600160a01b0316815260200183602001516001600160a01b031681526020016113888152602001610e1081526020018360c0015181526020018360e001518152509050611a8681612003565b6040805160c0808201835284516001600160a01b0390811683528584015116602083015261138892820192909252610e10606082015290830151608082015260e083015160a0820152611ad881612003565b505050565b600181602001516002811115611af557611af5612612565b03611b43576040805160a08101825282516001600160a01b039081168252838301511660208201526109c49181019190915261a8c06060820152627270e06080820152611b4181611eeb565b505b600081602001516002811115611b5b57611b5b612612565b03611bc15760006040518060c0016040528083600001516001600160a01b0316815260200183606001516001600160a01b031681526020016107d0815260200161a8c08152602001627270e081526020016301312d008152509050611bbf81612003565b505b8051604051637faa1d2160e01b81526001600160a01b039091166004820152734f6f977acdd1177dcd81ab83074855ecb9c2d49e60248201526000604482015273324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d90637faa1d21906064016113b1565b60606001600160a01b03851615801590611c3d575081155b15611cc5576040516311272db960e31b81526001600160a01b038616600482015273a0d3707c569ff8c87fa923d3823ec5d81c98be78906389396dc890602401600060405180830381865afa158015611c9a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cc29190810190612628565b90505b600083518251611cd59190612814565b67ffffffffffffffff811115611ced57611ced6121d8565b604051908082528060200260200182016040528015611d16578160200160208202803683370190505b5090506000805b8351811015611d8957838181518110611d3857611d38612446565b6020026020010151838380611d4c90612827565b945081518110611d5e57611d5e612446565b6001600160e01b03199092166020928302919091019091015280611d8181612827565b915050611d1d565b5060005b8551811015611df957858181518110611da857611da8612446565b6020026020010151838380611dbc90612827565b945081518110611dce57611dce612446565b6001600160e01b03199092166020928302919091019091015280611df181612827565b915050611d8d565b506001600160a01b03871615611e775760405163110bad1960e11b81526001600160a01b038816600482015273a0d3707c569ff8c87fa923d3823ec5d81c98be78906322175a3290602401600060405180830381600087803b158015611e5e57600080fd5b505af1158015611e72573d6000803e3d6000fd5b505050505b6040516378600da160e11b815273a0d3707c569ff8c87fa923d3823ec5d81c98be789063f0c01b4290611eb090899086906004016126dc565b600060405180830381600087803b158015611eca57600080fd5b505af1158015611ede573d6000803e3d6000fd5b5050505050505050505050565b604080516001808252818301909252600091816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a08201528252600019909201910181611f025790505090506040518060c0016040528083600001516001600160a01b0316815260200183602001516001600160a01b03168152602001600160ff1681526020018360400151815260200183606001518152602001611fab8460200151600086608001516001610402565b81525081600081518110611fc157611fc1612446565b60209081029190910101526040516301635db560e11b81527352aa899454998be5b000ad077a46bbe360f4e497906302c6bb6a90611746908490600401612840565b604080516001808252818301909252600091816020015b61206f6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600060ff168152602001600081526020016000815260200160008152602001600081525090565b81526020019060019003908161201a5790505090506040518060e0016040528083600001516001600160a01b0316815260200183602001516001600160a01b03168152602001600160ff16815260200183604001518152602001836060015181526020016120e98460200151600086608001516000610402565b8152602001612104846020015160008660a001516000610402565b8152508160008151811061211a5761211a612446565b602090810291909101015260405162dc47c360e11b81527352aa899454998be5b000ad077a46bbe360f4e497906301b88f86906117469084906004016128ba565b60006020828403121561216d57600080fd5b5035919050565b6001600160a01b0381168114610cda57600080fd5b6000806000806080858703121561219f57600080fd5b84356121aa81612174565b93506020850135925060408501359150606085013580151581146121cd57600080fd5b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612217576122176121d8565b604052919050565b6000602080838503121561223257600080fd5b823567ffffffffffffffff8082111561224a57600080fd5b818501915085601f83011261225e57600080fd5b813581811115612270576122706121d8565b612282601f8201601f191685016121ee565b9150808252868482850101111561229857600080fd5b8084840185840137600090820190930192909252509392505050565b6000602082840312156122c657600080fd5b81516122d181612174565b9392505050565b6000602082840312156122ea57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610377576103776122f1565b634e487b7160e01b600052601260045260246000fd5b60008261235157634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612391578160001904821115612377576123776122f1565b8085161561238457918102915b93841c939080029061235b565b509250929050565b6000826123a857506001610377565b816123b557506000610377565b81600181146123cb57600281146123d5576123f1565b6001915050610377565b60ff8411156123e6576123e66122f1565b50506001821b610377565b5060208310610133831016604e8410600b8410161715612414575081810a610377565b61241e8383612356565b8060001904821115612432576124326122f1565b029392505050565b60006122d18383612399565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561248257602081850181015186830182015201612466565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b038316815260606020820152600960608201526865786563757465282960b81b608082015260a06040820152600061074860a083018461245c565b600081518084526020808501945080840160005b83811015612513578151875295820195908201906001016124f7565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561256657828403895261255484835161245c565b9885019893509084019060010161253c565b5091979650505050505050565b60a0808252865190820181905260009060209060c0840190828a01845b828110156125b55781516001600160a01b031684529284019290840190600101612590565b505050838103828501526125c981896124e3565b91505082810360408401526125de818761251e565b905082810360608401526125f2818661251e565b90508281036080840152612606818561245c565b98975050505050505050565b634e487b7160e01b600052602160045260246000fd5b6000602080838503121561263b57600080fd5b825167ffffffffffffffff8082111561265357600080fd5b818501915085601f83011261266757600080fd5b815181811115612679576126796121d8565b8060051b915061268a8483016121ee565b81815291830184019184810190888411156126a457600080fd5b938501935b8385101561260657845192506001600160e01b0319831683146126cc5760008081fd5b82825293850193908501906126a9565b6001600160a01b038316815260406020808301829052835191830182905260009184820191906060850190845b8181101561272f5784516001600160e01b03191683529383019391830191600101612709565b5090979650505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561256657815180516001600160a01b0316855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0908101519085015260e09093019290850190600101612759565b604080825283519082018190526000906020906060840190828701845b828110156127f657815160ff16845292840192908401906001016127d7565b5050508381038285015261280a81866124e3565b9695505050505050565b80820180821115610377576103776122f1565b600060018201612839576128396122f1565b5060010190565b602080825282518282018190526000919060409081850190868401855b8281101561256657815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0908101519085015260c0909301929085019060010161285d565b602080825282518282018190526000919060409081850190868401855b8281101561256657815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0808201519086015260c0908101519085015260e090930192908501906001016128d756fe657865637574655061796c6f616428616464726573732c737472696e672c627974657329a264697066735822122084b767f521f39f32665878d6794924b1721fae6d1d472d287f11d0386c3c109864736f6c63430008150033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101215760003560e01c80636dc0ae22116100ad578063aa98df3911610071578063aa98df391461027c578063b788f3a11461028f578063bffa7f0f146102aa578063cc025f7c146102c5578063e6bd26a2146102ec57600080fd5b80636dc0ae22146101fd5780637aadef8b146102185780637e2f35fa1461023357806397b87b4a1461024e5780639d3d2a781461026957600080fd5b806325ad7f4d116100f457806325ad7f4d146101a25780632861c7d1146101bd578063588c77e6146101d857806361461954146101f357806366760d7d146101fb57600080fd5b80630680f417146101265780630bc9136e1461015e578063103f29071461017457806312e366aa1461018f575b600080fd5b61014173a0d3707c569ff8c87fa923d3823ec5d81c98be7881565b6040516001600160a01b0390911681526020015b60405180910390f35b610166602c81565b604051908152602001610155565b61014173324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d81565b61014161019d36600461215b565b6102ff565b610141739efde135ca4832abf0408c44c6f5f370eb0f35e881565b6101417352aa899454998be5b000ad077a46bbe360f4e49781565b610141735c43aac965ff230ac1cf63e924d0153291d78bad81565b6101fb61037d565b005b610141730204cd037b2ec03605cfdfe482d8e257c765fa1b81565b610141732386dc45added673317ef068992f19421b481f4c81565b61014173059a94a72451c0ae1cc1ce4bf0db52421bbe821081565b61014173f9b539cd37fc81bbea1f078240d16b988bbae07381565b610166610277366004612189565b610402565b6101fb61028a36600461221f565b610750565b610141734f6f977acdd1177dcd81ab83074855ecb9c2d49e81565b61014173a45f7bd6a5ff45d31aace6bcd3d426d9328cea0181565b6101417f000000000000000000000000000000000000000000000000000000000000000081565b6101416102fa36600461215b565b610afd565b604051630971b35560e11b81526004810182905260009073f9b539cd37fc81bbea1f078240d16b988bbae073906312e366aa906024015b602060405180830381865afa158015610353573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037791906122b4565b92915050565b30732386dc45added673317ef068992f19421b481f4c146103d85760405162461bcd60e51b815260206004820152601060248201526f3737ba16bb30b634b216b1b0b63632b960811b60448201526064015b60405180910390fd5b6103e0610b38565b6103e8610cdd565b6103f061101c565b6103f861119a565b6104006113e6565b565b600080841180156104135750600083115b156104605760405162461bcd60e51b815260206004820181905260248201527f626f74682075736420616e6420616d6f756e7420617265206e6f74207a65726f60448201526064016103cf565b604080516001600160a01b03871660208083019190915260058284015282518083038401815260608301938490528051910120632d71cdb960e21b90925260648101919091526000907352aa899454998be5b000ad077a46bbe360f4e4979063b5c736e490608401602060405180830381865afa1580156104e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050991906122d8565b90506000806105178361177c565b90925090506000601273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038b1601610553575062040b28905060126106d0565b737f39c581f595b53c5cb19bd0b3f8da6c935e2c9f196001600160a01b038b160161058657506204ce78905060126106d0565b73cd5fe23c85820f7b72d0926fc9b05b43e359b7ed196001600160a01b038b16016105b9575062043bfc905060126106d0565b6001600160a01b038a1673cbb7c0000ab88b473b1f5afd9ef808440eed33bf148061060057506001600160a01b038a16732260fac5e5542a773aa44fbcfedf7c193bc2c599145b1561061357506267e990905060086106d0565b6001600160a01b038a1673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48148061065a57506001600160a01b038a1673dac17f958d2ee523a2206206994597c13d831ec7145b1561066b57506064905060066106d0565b739d39a5de30e57443bff2a8307a4256c8797a3496196001600160a01b038b160161069c5750606e905060126106d0565b60405162461bcd60e51b81526020600482015260096024820152681b9bdd0b599bdd5b9960ba1b60448201526064016103cf565b6000876106dd57836106df565b845b9050891561070e57806106f78b64e8d4a51000612307565b6107019190612334565b9650505050505050610748565b606461071a8285612307565b6107249190612334565b61072f83600a61243a565b61073e8b64e8d4a51000612307565b6106f79190612307565b949350505050565b3373a45f7bd6a5ff45d31aace6bcd3d426d9328cea011480610785575033734f6f977acdd1177dcd81ab83074855ecb9c2d49e145b806107a357503073059a94a72451c0ae1cc1ce4bf0db52421bbe8210145b806107c1575030739efde135ca4832abf0408c44c6f5f370eb0f35e8145b806107ca575060015b61080f5760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c8b5b9bdd0b585b1b1bddd95960521b60448201526064016103cf565b604080516001808252818301909252600090826020808301908036833701905050905060008267ffffffffffffffff81111561084d5761084d6121d8565b604051908082528060200260200182016040528015610876578160200160208202803683370190505b50905060008367ffffffffffffffff811115610894576108946121d8565b6040519080825280602002602001820160405280156108c757816020015b60608152602001906001900390816108b25790505b50905060008467ffffffffffffffff8111156108e5576108e56121d8565b60405190808252806020026020018201604052801561091857816020015b60608152602001906001900390816109035790505b509050732386dc45added673317ef068992f19421b481f4c8460008151811061094357610943612446565b60200260200101906001600160a01b031690816001600160a01b03168152505060008360008151811061097857610978612446565b60200260200101818152505060405180606001604052806024815260200161293f60249139826000815181106109b0576109b0612446565b602090810291909101810191909152604080516000815291820181526109f9917f00000000000000000000000000000000000000000000000000000000000000009181016124a2565b60405160208183030381529060405281600081518110610a1b57610a1b612446565b6020908102919091010152604051636d4ab48d60e11b8152600090730204cd037b2ec03605cfdfe482d8e257c765fa1b9063da95691a90610a689088908890889088908e90600401612573565b6020604051808303816000875af1158015610a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aab91906122d8565b9050602c8114610af45760405162461bcd60e51b815260206004820152601460248201527350524f504f53414c5f49535f4e4f545f53414d4560601b60448201526064016103cf565b50505050505050565b60405163735e935160e11b81526004810182905260009073324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d9063e6bd26a290602401610336565b6000604051806101000160405280610b5060016102ff565b6001600160a01b03168152737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0602082015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6040820152600160608201819052608082015262b71b0060a0820181905260c082015263017d784060e0909101529050610bc381611971565b506000604051806101000160405280610bdc60026102ff565b6001600160a01b0316815273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48602082015273dac17f958d2ee523a2206206994597c13d831ec760408201526000606082018190526001608083015260a08201526298968060c08201526301312d0060e0909101529050610c4f81611971565b506000604051806101000160405280610c6860036102ff565b6001600160a01b0316815273cbb7c0000ab88b473b1f5afd9ef808440eed33bf6020820152732260fac5e5542a773aa44fbcfedf7c193bc2c59960408201526001606082018190526080820152627270e060a0820181905260c08201526298968060e0909101529050610cda81611971565b50565b60006040518060800160405280610cf46022610afd565b6001600160a01b03168152602001600281526000602082018190526040909101529050610d2081611add565b5060006040518060800160405280610d386023610afd565b6001600160a01b031681526020016001815273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee602082015260006040909101529050610d7781611add565b5060006040518060800160405280610d8f6024610afd565b6001600160a01b0316815260200160018152737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0602082015260006040909101529050610dce81611add565b5060006040518060800160405280610de66025610afd565b6001600160a01b031681526020016001815273cd5fe23c85820f7b72d0926fc9b05b43e359b7ee602082015260006040909101529050610e2581611add565b5060006040518060800160405280610e3d6026610afd565b6001600160a01b0316815260200160018152732260fac5e5542a773aa44fbcfedf7c193bc2c599602082015260006040909101529050610e7c81611add565b5060006040518060800160405280610e946027610afd565b6001600160a01b031681526020016001815273cbb7c0000ab88b473b1f5afd9ef808440eed33bf602082015260006040909101529050610ed381611add565b5060006040518060800160405280610eeb6028610afd565b6001600160a01b0316815260200160018152739d39a5de30e57443bff2a8307a4256c8797a3497602082015260006040909101529050610f2a81611add565b5060006040518060800160405280610f426029610afd565b6001600160a01b03168152602001600281526000602082018190526040909101529050610f6e81611add565b5060006040518060800160405280610f86602a610afd565b6001600160a01b03168152602001600081526000602082015273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040909101529050610fc581611add565b5060006040518060800160405280610fdd602b610afd565b6001600160a01b03168152602001600081526000602082015273dac17f958d2ee523a2206206994597c13d831ec76040909101529050610cda81611add565b6040516311272db960e31b8152738ec5e29ea39b2f64b21e32cb9ff11d5059982f8c6004820181905290736967e68f7f9b3921181f27e66aa9c3ac7e13dbc0906000907352aa899454998be5b000ad077a46bbe360f4e497906389396dc890602401600060405180830381865afa15801561109b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110c39190810190612628565b60405163110bad1960e11b81526001600160a01b03851660048201529091507352aa899454998be5b000ad077a46bbe360f4e497906322175a3290602401600060405180830381600087803b15801561111b57600080fd5b505af115801561112f573d6000803e3d6000fd5b50506040516378600da160e11b81527352aa899454998be5b000ad077a46bbe360f4e497925063f0c01b42915061116c90859085906004016126dc565b600060405180830381600087803b15801561118657600080fd5b505af1158015610af4573d6000803e3d6000fd5b60408051600380825260808201909252600091816020015b6111fb6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816111b25790505090506040518060e00160405280737f39c581f595b53c5cb19bd0b3f8da6c935e2ca06001600160a01b03168152602001611f408152602001612328815260200160328152602001606481526020016101f481526020016127108152508160008151811061127d5761127d612446565b60200260200101819052506040518060e0016040528073cbb7c0000ab88b473b1f5afd9ef808440eed33bf6001600160a01b03168152602001611f40815260200161232881526020016064815260200161012c81526020016103e88152602001612710815250816001815181106112f6576112f6612446565b60200260200101819052506040518060e00160405280732260fac5e5542a773aa44fbcfedf7c193bc2c5996001600160a01b03168152602001611f40815260200161232881526020016064815260200161012c81526020016103e881526020016127108152508160028151811061136f5761136f612446565b6020908102919091010152604051639dde597760e01b81527352aa899454998be5b000ad077a46bbe360f4e49790639dde5977906113b190849060040161273c565b600060405180830381600087803b1580156113cb57600080fd5b505af11580156113df573d6000803e3d6000fd5b5050505050565b6040805160018082528183019092526000916020808301908036833701905050905063ec0684cd60e01b8160008151811061142357611423612446565b6001600160e01b03199092166020928302919091019091015261147173c10a855055eb3939fcaa512253ec3f671c4ab83973b00df786d3611ace29d19de744b4147f378715f4836000611c25565b506040805160018082528183019092526000916020808301908036833701905050905063b4cd87e860e01b816000815181106114af576114af612446565b6001600160e01b0319909216602092830291909101909101526114e960007388ebad0f40ae93ea196b0094362525fae28ae3268382611c25565b506040805160018082528183019092526000916020808301908036833701905050905063abe09ee960e01b8160008151811061152757611527612446565b6001600160e01b031990921660209283029190910190910152611561600073a82bd4a64644054d85fa0d7a7643caf5a15f534b8382611c25565b5060408051600180825281830190925260009160208083019080368337019050509050635fe9e5b860e01b8160008151811061159f5761159f612446565b6001600160e01b0319909216602092830291909101909101526115ed7324d58fcfa6d74c5acc1e4b6814bf5703e1cdd8a873952cf2869dc2c59aaaf2311ec6c7c0a43f9cb6cf836000611c25565b5060405163c39aa07d60e01b815273ba15a31c8f9cc3cb1b6e08755d8b22a6af18d83d600482015273a0d3707c569ff8c87fa923d3823ec5d81c98be789063c39aa07d90602401600060405180830381600087803b15801561164e57600080fd5b505af1158015611662573d6000803e3d6000fd5b5060009250600191506116729050565b60405190808252806020026020018201604052801561169b578160200160208202803683370190505b506040805160018082528183019092529192506000919060208083019080368337019050509050600b826000815181106116d7576116d7612446565b602002602001019060ff16908160ff1681525050620e7ef08160008151811061170257611702612446565b60209081029190910101526040516307ac73b360e31b815273a0d3707c569ff8c87fa923d3823ec5d81c98be7890633d639d989061174690859085906004016127ba565b600060405180830381600087803b15801561176057600080fd5b505af1158015611774573d6000803e3d6000fd5b505050505050565b67ffffffffffffffff605b82901c811690609b83901c1681158061179e575080155b156117c157604051636a86ba8960e11b81526201117160048201526024016103cf565b61ffff8316603a84901c6401ffffffff16428181039160ea87901c617fff169114806117eb575082155b806117f65750806001145b1561180357505050915091565b64496cebb80084840283020484019350617fff60db87901c1692508260010361182e57505050915091565b826001166001036118835760019290921c91826c7e37be2022c0914b26800000008161185c5761185c61231e565b049250612710601e87901c613fff166b033b2e3c9fd0803ce80000008501020492506118b0565b60019290921c916305f5e100601e87901c613fff166127108501026b033b2e3c9fd0803ce8000000020492505b806001166001036118e75760011c61271081016b033b2e3c9fd0803ce80000008202816118df576118df61231e565b04905061191d565b60011c61271081016b033b2e3c9fd0803ce800000082028161190b5761190b61231e565b046b033b2e3c9fd0803ce80000000390505b760a70c3c40a64e6c51999090b65f67d92400000000000008382026127100261ffff881691900402601087901c613fff16612710030292506801b5a660ea44b8000085840283020485019450505050915091565b806060015115611a1c5760006040518060a0016040528083600001516001600160a01b0316815260200183602001516001600160a01b031681526020016113888152602001610e1081526020018360a0015181525090506119d181611eeb565b6040805160a0808201835284516001600160a01b0390811683528584015116602083015261138892820192909252610e106060820152908301516080820152611a1981611eeb565b50505b806080015115610cda5760006040518060c0016040528083600001516001600160a01b0316815260200183602001516001600160a01b031681526020016113888152602001610e1081526020018360c0015181526020018360e001518152509050611a8681612003565b6040805160c0808201835284516001600160a01b0390811683528584015116602083015261138892820192909252610e10606082015290830151608082015260e083015160a0820152611ad881612003565b505050565b600181602001516002811115611af557611af5612612565b03611b43576040805160a08101825282516001600160a01b039081168252838301511660208201526109c49181019190915261a8c06060820152627270e06080820152611b4181611eeb565b505b600081602001516002811115611b5b57611b5b612612565b03611bc15760006040518060c0016040528083600001516001600160a01b0316815260200183606001516001600160a01b031681526020016107d0815260200161a8c08152602001627270e081526020016301312d008152509050611bbf81612003565b505b8051604051637faa1d2160e01b81526001600160a01b039091166004820152734f6f977acdd1177dcd81ab83074855ecb9c2d49e60248201526000604482015273324c5dc1fc42c7a4d43d92df1eba58a54d13bf2d90637faa1d21906064016113b1565b60606001600160a01b03851615801590611c3d575081155b15611cc5576040516311272db960e31b81526001600160a01b038616600482015273a0d3707c569ff8c87fa923d3823ec5d81c98be78906389396dc890602401600060405180830381865afa158015611c9a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cc29190810190612628565b90505b600083518251611cd59190612814565b67ffffffffffffffff811115611ced57611ced6121d8565b604051908082528060200260200182016040528015611d16578160200160208202803683370190505b5090506000805b8351811015611d8957838181518110611d3857611d38612446565b6020026020010151838380611d4c90612827565b945081518110611d5e57611d5e612446565b6001600160e01b03199092166020928302919091019091015280611d8181612827565b915050611d1d565b5060005b8551811015611df957858181518110611da857611da8612446565b6020026020010151838380611dbc90612827565b945081518110611dce57611dce612446565b6001600160e01b03199092166020928302919091019091015280611df181612827565b915050611d8d565b506001600160a01b03871615611e775760405163110bad1960e11b81526001600160a01b038816600482015273a0d3707c569ff8c87fa923d3823ec5d81c98be78906322175a3290602401600060405180830381600087803b158015611e5e57600080fd5b505af1158015611e72573d6000803e3d6000fd5b505050505b6040516378600da160e11b815273a0d3707c569ff8c87fa923d3823ec5d81c98be789063f0c01b4290611eb090899086906004016126dc565b600060405180830381600087803b158015611eca57600080fd5b505af1158015611ede573d6000803e3d6000fd5b5050505050505050505050565b604080516001808252818301909252600091816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a08201528252600019909201910181611f025790505090506040518060c0016040528083600001516001600160a01b0316815260200183602001516001600160a01b03168152602001600160ff1681526020018360400151815260200183606001518152602001611fab8460200151600086608001516001610402565b81525081600081518110611fc157611fc1612446565b60209081029190910101526040516301635db560e11b81527352aa899454998be5b000ad077a46bbe360f4e497906302c6bb6a90611746908490600401612840565b604080516001808252818301909252600091816020015b61206f6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600060ff168152602001600081526020016000815260200160008152602001600081525090565b81526020019060019003908161201a5790505090506040518060e0016040528083600001516001600160a01b0316815260200183602001516001600160a01b03168152602001600160ff16815260200183604001518152602001836060015181526020016120e98460200151600086608001516000610402565b8152602001612104846020015160008660a001516000610402565b8152508160008151811061211a5761211a612446565b602090810291909101015260405162dc47c360e11b81527352aa899454998be5b000ad077a46bbe360f4e497906301b88f86906117469084906004016128ba565b60006020828403121561216d57600080fd5b5035919050565b6001600160a01b0381168114610cda57600080fd5b6000806000806080858703121561219f57600080fd5b84356121aa81612174565b93506020850135925060408501359150606085013580151581146121cd57600080fd5b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612217576122176121d8565b604052919050565b6000602080838503121561223257600080fd5b823567ffffffffffffffff8082111561224a57600080fd5b818501915085601f83011261225e57600080fd5b813581811115612270576122706121d8565b612282601f8201601f191685016121ee565b9150808252868482850101111561229857600080fd5b8084840185840137600090820190930192909252509392505050565b6000602082840312156122c657600080fd5b81516122d181612174565b9392505050565b6000602082840312156122ea57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610377576103776122f1565b634e487b7160e01b600052601260045260246000fd5b60008261235157634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612391578160001904821115612377576123776122f1565b8085161561238457918102915b93841c939080029061235b565b509250929050565b6000826123a857506001610377565b816123b557506000610377565b81600181146123cb57600281146123d5576123f1565b6001915050610377565b60ff8411156123e6576123e66122f1565b50506001821b610377565b5060208310610133831016604e8410600b8410161715612414575081810a610377565b61241e8383612356565b8060001904821115612432576124326122f1565b029392505050565b60006122d18383612399565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561248257602081850181015186830182015201612466565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b038316815260606020820152600960608201526865786563757465282960b81b608082015260a06040820152600061074860a083018461245c565b600081518084526020808501945080840160005b83811015612513578151875295820195908201906001016124f7565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561256657828403895261255484835161245c565b9885019893509084019060010161253c565b5091979650505050505050565b60a0808252865190820181905260009060209060c0840190828a01845b828110156125b55781516001600160a01b031684529284019290840190600101612590565b505050838103828501526125c981896124e3565b91505082810360408401526125de818761251e565b905082810360608401526125f2818661251e565b90508281036080840152612606818561245c565b98975050505050505050565b634e487b7160e01b600052602160045260246000fd5b6000602080838503121561263b57600080fd5b825167ffffffffffffffff8082111561265357600080fd5b818501915085601f83011261266757600080fd5b815181811115612679576126796121d8565b8060051b915061268a8483016121ee565b81815291830184019184810190888411156126a457600080fd5b938501935b8385101561260657845192506001600160e01b0319831683146126cc5760008081fd5b82825293850193908501906126a9565b6001600160a01b038316815260406020808301829052835191830182905260009184820191906060850190845b8181101561272f5784516001600160e01b03191683529383019391830191600101612709565b5090979650505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561256657815180516001600160a01b0316855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0908101519085015260e09093019290850190600101612759565b604080825283519082018190526000906020906060840190828701845b828110156127f657815160ff16845292840192908401906001016127d7565b5050508381038285015261280a81866124e3565b9695505050505050565b80820180821115610377576103776122f1565b600060018201612839576128396122f1565b5060010190565b602080825282518282018190526000919060409081850190868401855b8281101561256657815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0908101519085015260c0909301929085019060010161285d565b602080825282518282018190526000919060409081850190868401855b8281101561256657815180516001600160a01b0390811686528782015116878601528581015160ff1686860152606080820151908601526080808201519086015260a0808201519086015260c0908101519085015260e090930192908501906001016128d756fe657865637574655061796c6f616428616464726573732c737472696e672c627974657329a264697066735822122084b767f521f39f32665878d6794924b1721fae6d1d472d287f11d0386c3c109864736f6c63430008150033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"errorId_","type":"uint256"}],"name":"FluidLiquidityCalcsError","type":"error"},{"inputs":[],"name":"ADDRESS_THIS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEX_FACTORY","outputs":[{"internalType":"contract FluidDexFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GOVERNOR","outputs":[{"internalType":"contract IGovernorBravo","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LIQUIDITY","outputs":[{"internalType":"contract IFluidLiquidityAdmin","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LITE","outputs":[{"internalType":"contract ILite","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSAL_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG_2","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROPOSER_AVO_MULTISIG_3","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TEAM_MULTISIG","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TIMELOCK","outputs":[{"internalType":"contract ITimelock","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VAULT_FACTORY","outputs":[{"internalType":"contract FluidVaultFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"execute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dexId_","type":"uint256"}],"name":"getDexAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"amountInUSD","type":"uint256"},{"internalType":"bool","name":"isSupply","type":"bool"}],"name":"getRawAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"vaultId_","type":"uint256"}],"name":"getVaultAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"description","type":"string"}],"name":"propose","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"verifyProposal","outputs":[],"stateMutability":"view","type":"function"}]}